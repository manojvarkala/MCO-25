<?php
/**
 * Plugin Name:       MCO Exam Integration Engine
 * Plugin URI:        https://annapoornainfo.com
 * Description:       Provides the backend API, user authentication (SSO), and content management for the React-based examination app.
 * Version:           1.0.0
 * Author:            Annapoorna Infotech
 * Author URI:        https://annapoornainfo.com
 * License:           GPL v2 or later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain:       mco-exam-engine
 * Update URI:        false
 */
if (!defined('ABSPATH')) exit;

// Prevent duplicate plugin activation errors.
if (!function_exists('mco_is_plugin_already_active')) {
    function mco_is_plugin_already_active() {
        if (is_admin() && current_user_can('activate_plugins') && function_exists('is_plugin_active') && is_plugin_active(plugin_basename(__FILE__))) {
            $plugins = get_option('active_plugins');
            $this_plugin_path = plugin_basename(__FILE__);
            $this_plugin_dir = dirname($this_plugin_path);
            $duplicates = array();
            $current_plugin_data = get_file_data(__FILE__, array('Name' => 'Plugin Name'));
            $current_plugin_name = $current_plugin_data['Name'];

            foreach ($plugins as $plugin_path) {
                if ($plugin_path === $this_plugin_path) continue;
                if (file_exists(WP_PLUGIN_DIR . '/' . $plugin_path)) {
                    $plugin_data = get_file_data(WP_PLUGIN_DIR . '/' . $plugin_path, array('Name' => 'Plugin Name'));
                    if (isset($plugin_data['Name']) && $plugin_data['Name'] === $current_plugin_name && dirname($plugin_path) !== $this_plugin_dir) {
                        $duplicates[] = $plugin_path;
                    }
                }
            }
            if (!empty($duplicates)) {
                deactivate_plugins($this_plugin_path);
                set_transient('mco_duplicate_plugin_error', true, 60);
                if (isset($_GET['activate'])) unset($_GET['activate']);
            }
        }
    }
    add_action('admin_init', 'mco_is_plugin_already_active');

    function mco_show_duplicate_plugin_notice() {
        if (get_transient('mco_duplicate_plugin_error')) {
            echo '<div class="notice notice-error is-dismissible"><p><strong>Warning:</strong> A duplicate "MCO Exam Integration Engine" plugin was detected and has been deactivated to prevent site errors. Please go to your Plugins page and delete the older version before re-activating.</p></div>';
            delete_transient('mco_duplicate_plugin_error');
        }
    }
    add_action('admin_notices', 'mco_show_duplicate_plugin_notice');
}

// --- CONSTANTS & INCLUDES ---
define('MCO_PLUGIN_FILE', __FILE__);
define('MCO_PLUGIN_PATH', plugin_dir_path(MCO_PLUGIN_FILE));
define('MCO_PLUGIN_URL', plugin_dir_url(MCO_PLUGIN_FILE));
if (!defined('MCO_PLUGIN_VERSION')) {
    $plugin_data = get_file_data(MCO_PLUGIN_FILE, array('Version' => 'Version'));
    define('MCO_PLUGIN_VERSION', $plugin_data['Version']);
}
define('MCO_DB_VERSION_OPTION', 'mco_plugin_version_db');

// Include all files to define functions first.
require_once MCO_PLUGIN_PATH . 'includes/mco-cpts.php';
require_once MCO_PLUGIN_PATH . 'includes/mco-data.php';
require_once MCO_PLUGIN_PATH . 'includes/mco-api.php';
require_once MCO_PLUGIN_PATH . 'includes/mco-shortcodes.php';
require_once MCO_PLUGIN_PATH . 'includes/mco-admin.php'; // This file only defines functions, so it's safe to include globally.


// --- NEW BULLETPROOF, AGGRESSIVE CORS HANDLING ---
if (!function_exists('mco_handle_all_cors')) {
    function mco_handle_all_cors() {
        // We only want to apply these headers to REST API requests.
        if (!defined('REST_REQUEST') || !REST_REQUEST) {
            return;
        }

        $origin = get_http_origin();
        $allowed_urls_option = get_option('mco_exam_app_url', '');

        if (empty($allowed_urls_option)) {
            return; // No allowed origins configured.
        }

        $allowed_origins = array_map('trim', explode("\n", $allowed_urls_option));

        if ($origin && in_array($origin, $allowed_origins) && !headers_sent()) {
            header("Access-Control-Allow-Origin: {$origin}");
            header("Access-Control-Allow-Credentials: true");
            header('Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE');
            header('Access-Control-Allow-Headers: Authorization, X-WP-Nonce, Content-Type, X-Requested-With');
        }

        // Specifically handle and terminate the OPTIONS preflight request with a 200 OK status.
        if (isset($_SERVER['REQUEST_METHOD']) && $_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
            status_header(200);
            exit();
        }
    }
}
// Hook into 'send_headers'. This is an aggressive approach that runs late in the WordPress load,
// ensuring our headers are the last ones sent and can override any conflicting headers from other plugins or server configs.
add_action('send_headers', 'mco_handle_all_cors');


// --- INITIALIZATION HOOKS ---
if (!function_exists('mco_init_base_and_admin')) {
    /**
     * Initializes core components like CPTs, shortcodes, and admin hooks on the 'init' action.
     */
    function mco_init_base_and_admin() {
        mco_register_custom_post_types();
        mco_register_shortcode_hooks();
        
        if (is_admin()) {
            mco_check_for_updates();
            mco_register_admin_hooks();
        }
    }
    add_action('init', 'mco_init_base_and_admin');
}

if (!function_exists('mco_init_rest_api')) {
    /**
     * Initializes all REST API components on the 'rest_api_init' action, which is best practice.
     */
    function mco_init_rest_api() {
        mco_register_api_hooks();
    }
    add_action('rest_api_init', 'mco_init_rest_api');
}


if (!function_exists('mco_check_for_updates')) {
    function mco_check_for_updates() {
        $current_db_version = get_option(MCO_DB_VERSION_OPTION, '0.0.0');
        if (version_compare($current_db_version, MCO_PLUGIN_VERSION, '<')) {
            // This is an update. Run the activation logic, which is safe.
            mco_exam_engine_activate(); 
            // Update the DB version to match the plugin version.
            update_option(MCO_DB_VERSION_OPTION, MCO_PLUGIN_VERSION);
        }
    }
}

// Activation hook for flushing rewrite rules
if (!function_exists('mco_exam_engine_activate')) {
    function mco_exam_engine_activate() {
        mco_register_custom_post_types();
        flush_rewrite_rules();
        delete_transient('mco_app_config_data');
        // Set the version on activation/update
        update_option(MCO_DB_VERSION_OPTION, MCO_PLUGIN_VERSION);
    }
    register_activation_hook(MCO_PLUGIN_FILE, 'mco_exam_engine_activate');
}

// Deactivation hook
if (!function_exists('mco_exam_engine_deactivate')) {
    function mco_exam_engine_deactivate() {
        flush_rewrite_rules();
    }
    register_deactivation_hook(MCO_PLUGIN_FILE, 'mco_exam_engine_deactivate');
}
?>