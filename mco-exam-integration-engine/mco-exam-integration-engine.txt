<?php
/**
 * Plugin Name:       Exam App Integration Engine
 * Description:       A multi-tenant engine to integrate the React examination app with any WordPress/WooCommerce site, handling SSO, dynamic data, and API services. Now with Spin & Win, user reviews, and admin tools.
 * Version:           30.1.0
 * Author:            Annapoorna Infotech
 * 
 * --- HOW TO UPDATE THIS PLUGIN ---
 * To prevent fatal errors from duplicate function definitions, please follow these steps exactly:
 * 1. DEACTIVATE the existing "Exam App Integration Engine" plugin in your WordPress dashboard.
 * 2. DELETE the deactivated plugin. Your settings and data will NOT be lost.
 * 3. UPLOAD the new .zip file of the plugin.
 * 4. ACTIVATE the new plugin.
 * ---------------------------------
 */


if (!defined('ABSPATH')) exit;

define('MCO_PLUGIN_VERSION', '30.1.0');
define('MCO_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('MCO_PLUGIN_URL', plugin_dir_url(__FILE__));

// --- FAILSAFE DEPENDENCY CHECK ---
if (!function_exists('mco_failsafe_dependency_check')) {
    function mco_failsafe_dependency_check() {
        if (!class_exists('WooCommerce')) {
            add_action('admin_notices', 'mco_dependency_error_notice');
            deactivate_plugins(plugin_basename(__FILE__));
            if (isset($_GET['activate'])) {
                unset($_GET['activate']);
            }
        }
    }
}
if (!function_exists('mco_dependency_error_notice')) {
    function mco_dependency_error_notice() {
        echo '<div class="notice notice-error is-dismissible">';
        echo '<p><strong>Exam App Engine:</strong> has been automatically deactivated because it requires the <strong>WooCommerce</strong> plugin to be installed and active. Please install or activate WooCommerce, then try activating this plugin again.</p>';
        echo '</div>';
    }
}
add_action('admin_init', 'mco_failsafe_dependency_check');

// --- ACTIVATION / DEACTIVATION HOOKS ---
register_activation_hook(__FILE__, 'mco_plugin_activate');
register_deactivation_hook(__FILE__, 'mco_plugin_deactivate');

if (!function_exists('mco_plugin_activate')) {
    function mco_plugin_activate() {
        require_once MCO_PLUGIN_DIR . 'includes/mco-cpts.php';
        mco_register_custom_post_types();
        flush_rewrite_rules(true);
        
        // Seed default certificate templates on first activation or if empty
        if (!get_option('mco_certificate_templates')) {
            require_once MCO_PLUGIN_DIR . 'includes/mco-admin.php';
            update_option('mco_certificate_templates', mco_get_default_certificate_templates());
        }
        
        mco_run_updates(); // Run updates on activation
        update_option('mco_plugin_version', MCO_PLUGIN_VERSION);
    }
}

if (!function_exists('mco_plugin_deactivate')) {
    function mco_plugin_deactivate() {
        flush_rewrite_rules();
        delete_option('mco_plugin_version');
    }
}

// --- DATA MIGRATION/UPDATE HANDLER ---
if (!function_exists('mco_run_updates')) {
    function mco_run_updates() {
        $saved_version = get_option('mco_plugin_version', '1.0.0');
        
        // Check if the saved version is less than the current version to run updates.
        if (version_compare($saved_version, MCO_PLUGIN_VERSION, '<')) {
            
            // Fix for incorrect certificate template keys (from v30.0.3 and earlier)
            if (version_compare($saved_version, '30.0.4', '<')) {
                $templates = get_option('mco_certificate_templates');
                if (is_array($templates)) {
                    $updated = false;
                    // Migrate 'cert-practice-1' to 'cert-practice'
                    if (isset($templates['cert-practice-1']) && !isset($templates['cert-practice'])) {
                        $templates['cert-practice'] = $templates['cert-practice-1'];
                        $templates['cert-practice']['id'] = 'cert-practice';
                        unset($templates['cert-practice-1']);
                        $updated = true;
                    }
                    // Migrate 'cert-generic' to 'cert-completion'
                    if (isset($templates['cert-generic']) && !isset($templates['cert-completion'])) {
                        $templates['cert-completion'] = $templates['cert-generic'];
                        $templates['cert-completion']['id'] = 'cert-completion';
                        unset($templates['cert-generic']);
                        $updated = true;
                    }
                    if ($updated) {
                        update_option('mco_certificate_templates', $templates);
                    }
                }
            }
            
            // After all updates, flush rewrite rules and update the version number.
            flush_rewrite_rules(true);
            update_option('mco_plugin_version', MCO_PLUGIN_VERSION);
        }
    }
}


// --- INITIALIZATION ---
if (!function_exists('mco_plugin_init')) {
    function mco_plugin_init() {
        mco_run_updates(); // Check for updates on every load
        
        if (!class_exists('WooCommerce')) {
            return;
        }

        require_once MCO_PLUGIN_DIR . 'includes/mco-cpts.php';
        require_once MCO_PLUGIN_DIR . 'includes/mco-admin.php';
        require_once MCO_PLUGIN_DIR . 'includes/mco-data.php';
        require_once MCO_PLUGIN_DIR . 'includes/mco-api.php';
        require_once MCO_PLUGIN_DIR . 'includes/mco-shortcodes.php';

        // Register all components now that files are loaded to prevent timing conflicts
        mco_register_custom_post_types();
        mco_register_shortcode_hooks();
        mco_register_admin_hooks();
        mco_register_api_hooks();
    }
}
add_action('init', 'mco_plugin_init');
?>