<?php
/**
 * Plugin Name:       MCO Exam Integration Engine
 * Plugin URI:        https://annapoornainfo.com
 * Description:       Provides the backend API, user authentication (SSO), and content management for the React-based examination app.
 * Version:           1.0.0
 * Author:            Annapoorna Infotech
 * Author URI:        https://annapoornainfo.com
 * License:           GPL v2 or later
 * License URI:       https://www.gnu.org/licenses/gpl-2.0.html
 * Text Domain:       mco-exam-engine
 * Update URI:        false
 */
if (!defined('ABSPATH')) exit;

// --- CONSTANTS & INCLUDES ---
define('MCO_PLUGIN_FILE', __FILE__);
define('MCO_PLUGIN_PATH', plugin_dir_path(MCO_PLUGIN_FILE));
define('MCO_PLUGIN_URL', plugin_dir_url(MCO_PLUGIN_FILE));
$plugin_data = get_file_data(MCO_PLUGIN_FILE, array('Version' => 'Version'));
define('MCO_PLUGIN_VERSION', $plugin_data['Version']);

require_once MCO_PLUGIN_PATH . 'includes/mco-cpts.php';
require_once MCO_PLUGIN_PATH . 'includes/mco-data.php';
require_once MCO_PLUGIN_PATH . 'includes/mco-api.php';
require_once MCO_PLUGIN_PATH . 'includes/mco-shortcodes.php';
require_once MCO_PLUGIN_PATH . 'includes/mco-admin.php';

// --- INITIALIZATION HOOKS ---

// Handles CPTs, shortcodes, and admin-specific hooks.
add_action('init', function() {
    mco_register_custom_post_types();
    mco_register_shortcode_hooks();
    if (is_admin()) {
        mco_register_admin_hooks();
    }
});

// Handles all REST API related setup, including routes and CORS.
add_action('rest_api_init', function() {
    mco_register_api_hooks(); // From mco-api.php

    // This is our new, robust CORS handler.
    add_filter('rest_pre_serve_request', 'mco_handle_cors_and_preflight', 15, 4);
    
    // This ensures auth errors also get correct CORS headers.
    add_filter('rest_authentication_errors', 'mco_handle_auth_errors_cors', 15);
});

// --- NEW, ROBUST CORS & PREFLIGHT HANDLING ---

/**
 * Gets the list of allowed origin URLs from the plugin settings.
 * @return array A list of validated origin URLs.
 */
function mco_get_allowed_origins() {
    $app_urls_string = get_option('mco_exam_app_url', '');
    if (empty($app_urls_string)) return [];

    $urls = preg_split('/\r\n|\r|\n/', $app_urls_string);
    $allowed_origins = [];

    foreach ($urls as $url) {
        $trimmed_url = trim($url);
        if (empty($trimmed_url)) continue;

        $parsed_url = parse_url($trimmed_url);
        if (empty($parsed_url['scheme']) || empty($parsed_url['host'])) continue;
        
        $origin = $parsed_url['scheme'] . '://' . $parsed_url['host'];
        if (!empty($parsed_url['port'])) {
            $origin .= ':' . $parsed_url['port'];
        }
        
        if (!in_array($origin, $allowed_origins, true)) {
            $allowed_origins[] = $origin;
        }
    }
    return $allowed_origins;
}

/**
 * Handles CORS headers for all API requests and properly responds to preflight OPTIONS requests.
 * This is the core fix for all connectivity issues.
 */
function mco_handle_cors_and_preflight($served, $result, $request, $server) {
    // Only apply this logic to our custom namespace to avoid interfering with other plugins.
    if (strpos($request->get_route(), '/mco-app/v1/') !== false) {
        $origin = get_http_origin();
        $allowed_origins = mco_get_allowed_origins();

        if ($origin && in_array($origin, $allowed_origins, true)) {
            // Use the WordPress REST Server's method to send headers. This is the correct way.
            $server->send_header('Access-Control-Allow-Origin', $origin);
            $server->send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE');
            $server->send_header('Access-Control-Allow-Credentials', 'true');
            $server->send_header('Access-Control-Allow-Headers', 'Authorization, X-WP-Nonce, Content-Type, X-Requested-With');
            $server->send_header('Vary', 'Origin');
        }
        
        // If this is a preflight (OPTIONS) request, we must send a 200 OK and exit.
        if ($request->get_method() === 'OPTIONS') {
            status_header(200);
            exit();
        }
    }
    return $served;
}

/**
 * Ensures that even authentication error responses get the correct CORS headers.
 * This allows the frontend to read the error message (e.g., "Token expired")
 * instead of just getting a generic network error.
 */
function mco_handle_auth_errors_cors($result) {
    if (is_wp_error($result) && !headers_sent()) {
        $origin = get_http_origin();
        $allowed_origins = mco_get_allowed_origins();
        if ($origin && in_array($origin, $allowed_origins, true)) {
            header('Access-Control-Allow-Origin: ' . esc_url_raw($origin));
            header('Access-Control-Allow-Credentials: true');
            header('Vary: Origin');
        }
    }
    return $result;
}


// --- ACTIVATION & DEACTIVATION HOOKS ---

register_activation_hook(MCO_PLUGIN_FILE, function() {
    mco_register_custom_post_types();
    flush_rewrite_rules();
    delete_transient('mco_app_config_data');
});

register_deactivation_hook(MCO_PLUGIN_FILE, function() {
    flush_rewrite_rules();
});
?>