<?php
if (!defined('ABSPATH')) exit;

// --- HOOKS ---
if (!function_exists('mco_register_admin_hooks')) {
    function mco_register_admin_hooks() {
        add_action('admin_menu', 'mco_add_admin_menu');
        add_action('admin_init', 'mco_register_settings');
        add_action('admin_init', 'mco_handle_admin_actions');
        add_action('add_meta_boxes', 'mco_add_meta_boxes');
        add_action('save_post', 'mco_save_meta_box_data');
    }
}

// --- MENU & PAGE SETUP ---
if (!function_exists('mco_add_admin_menu')) {
    function mco_add_admin_menu() {
        add_menu_page(
            'Exam App Engine',
            'Exam App Engine',
            'manage_options',
            'mco-exam-engine',
            'mco_create_admin_page',
            'dashicons-analytics',
            25
        );
    }
}

function mco_create_admin_page() {
    $active_tab = isset($_GET['tab']) ? sanitize_key($_GET['tab']) : 'main_settings';
    ?>
    <div class="wrap">
        <h1>MCO Exam Integration Engine</h1>
        <h2 class="nav-tab-wrapper">
            <a href="?page=mco-exam-engine&tab=main_settings" class="nav-tab <?php echo $active_tab == 'main_settings' ? 'nav-tab-active' : ''; ?>">Main Settings</a>
            <a href="?page=mco-exam-engine&tab=themes" class="nav-tab <?php echo $active_tab == 'themes' ? 'nav-tab-active' : ''; ?>">Themes</a>
            <a href="?page=mco-exam-engine&tab=certificate_templates" class="nav-tab <?php echo $active_tab == 'certificate_templates' ? 'nav-tab-active' : ''; ?>">Certificate Templates</a>
            <a href="?page=mco-exam-engine&tab=bulk_import" class="nav-tab <?php echo $active_tab == 'bulk_import' ? 'nav-tab-active' : ''; ?>">Bulk Import</a>
            <a href="?page=mco-exam-engine&tab=tools" class="nav-tab <?php echo $active_tab == 'tools' ? 'nav-tab-active' : ''; ?>">Tools</a>
        </h2>

        <form method="post" action="options.php">
            <?php
            settings_fields('mco_settings_group');
            do_settings_sections('mco-exam-engine');

            if ($active_tab == 'main_settings') {
                mco_render_main_settings_tab();
            } elseif ($active_tab == 'themes') {
                mco_render_themes_tab();
            } elseif ($active_tab == 'certificate_templates') {
                mco_render_certificate_templates_tab();
            }
            ?>
        </form>
        
        <?php
        if ($active_tab == 'bulk_import') {
            mco_render_bulk_import_tab();
        } elseif ($active_tab == 'tools') {
            mco_render_tools_tab();
        }
        ?>
    </div>
    <?php
}

// --- SETTINGS REGISTRATION ---
function mco_register_settings() {
    register_setting('mco_settings_group', 'mco_exam_app_url');
    register_setting('mco_settings_group', 'mco_custom_logo_url');
    register_setting('mco_settings_group', 'mco_active_theme_id');
    register_setting('mco_settings_group', 'mco_spin_wheel_enabled');
    register_setting('mco_settings_group', 'mco_certificate_templates');
}


// --- TAB RENDERING FUNCTIONS ---

function mco_render_main_settings_tab() {
    ?>
    <table class="form-table">
        <tr valign="top">
            <th scope="row">Exam Application URL(s)</th>
            <td>
                <textarea name="mco_exam_app_url" rows="3" class="large-text"><?php echo esc_attr(get_option('mco_exam_app_url')); ?></textarea>
                <p class="description">Enter the full URL of your React application. For multiple domains (e.g., production and staging), enter each on a new line. This is required for CORS and SSO to function correctly.</p>
            </td>
        </tr>
        <tr valign="top">
            <th scope="row">Custom Logo URL</th>
            <td>
                <input type="text" name="mco_custom_logo_url" value="<?php echo esc_attr(get_option('mco_custom_logo_url')); ?>" class="large-text" />
                <p class="description">Optional. Enter the full URL to a custom logo (e.g., https://...). If empty, it will use the Site Icon from Appearance > Customize.</p>
            </td>
        </tr>
         <tr valign="top">
            <th scope="row">Enable "Spin & Win"</th>
            <td>
                <label>
                    <input type="checkbox" name="mco_spin_wheel_enabled" value="1" <?php checked(1, get_option('mco_spin_wheel_enabled'), true); ?> />
                    Enable the gamified "Spin & Win" feature for users.
                </label>
            </td>
        </tr>
    </table>
    <?php submit_button(); ?>
    <?php
}

function mco_render_themes_tab() {
    $themes = [
        ['id' => 'default', 'name' => 'Cyberpunk'],
        ['id' => 'professional', 'name' => 'Professional'],
        ['id' => 'serene', 'name' => 'Serene'],
        ['id' => 'academic', 'name' => 'Academic'],
        ['id' => 'noir', 'name' => 'Noir'],
    ];
    $active_theme = get_option('mco_active_theme_id', 'default');
    ?>
    <h3>Theme Selector</h3>
    <p>Select the default visual theme for the examination application. Users can override this choice in their profile.</p>
    <table class="form-table">
        <tr valign="top">
            <th scope="row">Active Default Theme</th>
            <td>
                <select name="mco_active_theme_id">
                    <?php foreach ($themes as $theme) : ?>
                        <option value="<?php echo esc_attr($theme['id']); ?>" <?php selected($active_theme, $theme['id']); ?>>
                            <?php echo esc_html($theme['name']); ?>
                        </option>
                    <?php endforeach; ?>
                </select>
            </td>
        </tr>
    </table>
    <?php submit_button('Save Theme'); ?>
    <?php
}

function mco_render_certificate_templates_tab() {
    $templates = get_option('mco_certificate_templates');
    if (empty($templates) || !is_array($templates)) {
        $templates = mco_get_default_certificate_templates();
    }
    ?>
    <h3>Certificate Templates</h3>
    <p>Manage the templates used for generating PDF certificates. Use placeholders like <code>{candidateName}</code>, <code>{examName}</code>, and <code>{finalScore}</code>.</p>
    <div id="mco-templates-wrapper">
        <?php foreach ($templates as $index => $template) : ?>
            <div class="mco-template-card">
                <table class="form-table">
                    <?php // FIX: Added isset() checks to prevent PHP notices from breaking the page if template data is incomplete. ?>
                    <tr valign="top"><th scope="row">Template ID</th><td><input type="text" readonly value="<?php echo isset($template['id']) ? esc_attr($template['id']) : ''; ?>" class="regular-text" /></td></tr>
                    <tr valign="top"><th scope="row">Template Name</th><td><input type="text" name="mco_certificate_templates[<?php echo $index; ?>][name]" value="<?php echo isset($template['name']) ? esc_attr($template['name']) : ''; ?>" class="regular-text" /></td></tr>
                    <tr valign="top"><th scope="row">Certificate Title</th><td><input type="text" name="mco_certificate_templates[<?php echo $index; ?>][title]" value="<?php echo isset($template['title']) ? esc_attr($template['title']) : ''; ?>" class="large-text" /></td></tr>
                    <tr valign="top"><th scope="row">Body Text</th><td><textarea name="mco_certificate_templates[<?php echo $index; ?>][body]" rows="3" class="large-text"><?php echo isset($template['body']) ? esc_textarea($template['body']) : ''; ?></textarea></td></tr>
                    <tr valign="top"><th scope="row">Signature 1 Name</th><td><input type="text" name="mco_certificate_templates[<?php echo $index; ?>][signature1Name]" value="<?php echo isset($template['signature1Name']) ? esc_attr($template['signature1Name']) : ''; ?>" class="regular-text" /></td></tr>
                    <tr valign="top"><th scope="row">Signature 1 Title</th><td><input type="text" name="mco_certificate_templates[<?php echo $index; ?>][signature1Title]" value="<?php echo isset($template['signature1Title']) ? esc_attr($template['signature1Title']) : ''; ?>" class="regular-text" /></td></tr>
                    <tr valign="top"><th scope="row">Signature 1 Image URL</th><td><input type="text" name="mco_certificate_templates[<?php echo $index; ?>][signature1ImageUrl]" value="<?php echo isset($template['signature1ImageUrl']) ? esc_attr($template['signature1ImageUrl']) : ''; ?>" class="large-text" /></td></tr>
                    <tr valign="top"><th scope="row">Signature 2 Name</th><td><input type="text" name="mco_certificate_templates[<?php echo $index; ?>][signature2Name]" value="<?php echo isset($template['signature2Name']) ? esc_attr($template['signature2Name']) : ''; ?>" class="regular-text" /></td></tr>
                    <tr valign="top"><th scope="row">Signature 2 Title</th><td><input type="text" name="mco_certificate_templates[<?php echo $index; ?>][signature2Title]" value="<?php echo isset($template['signature2Title']) ? esc_attr($template['signature2Title']) : ''; ?>" class="regular-text" /></td></tr>
                    <tr valign="top"><th scope="row">Signature 2 Image URL</th><td><input type="text" name="mco_certificate_templates[<?php echo $index; ?>][signature2ImageUrl]" value="<?php echo isset($template['signature2ImageUrl']) ? esc_attr($template['signature2ImageUrl']) : ''; ?>" class="large-text" /></td></tr>
                </table>
                <input type="hidden" name="mco_certificate_templates[<?php echo $index; ?>][id]" value="<?php echo isset($template['id']) ? esc_attr($template['id']) : ''; ?>" />
            </div>
        <?php endforeach; ?>
    </div>
    <style>.mco-template-card { border: 1px solid #ccd0d4; padding: 1rem; margin-bottom: 1rem; background: #fff; border-radius: 4px; }</style>
    <?php submit_button('Save Templates'); ?>
    <?php
}

function mco_render_bulk_import_tab() {
    ?>
    <h3>Bulk Import Content</h3>
    <p>Efficiently create or update exam programs and recommended books by uploading a CSV file. Use the "Download Template" buttons to get a file pre-populated with your existing content, which is the easiest way to perform bulk edits.</p>
    
    <div class="mco-tool-card">
        <h4>Import Exam Programs</h4>
        <p><strong>Step 1:</strong> Download the template, which will include all your existing exam programs. Do not change the column headers.</p>
        <form method="post" action="" style="display: inline-block; margin-right: 1rem;">
            <input type="hidden" name="mco_action" value="download_exam_programs_csv">
            <?php wp_nonce_field('mco_download_exam_programs_csv_nonce', 'mco_nonce'); ?>
            <button type="submit" class="button button-secondary">Download Template with Existing Data</button>
        </form>
        
        <p style="margin-top: 1rem;"><strong>Step 2:</strong> Fill or edit the template with your program data. Each row represents one exam program. Re-uploading will update existing programs based on "program_title" or create new ones.</p>
        
        <form method="post" enctype="multipart/form-data" style="margin-top: 1rem; border-top: 1px solid #ddd; padding-top: 1rem;">
            <input type="hidden" name="mco_action" value="bulk_import_programs">
            <?php wp_nonce_field('mco_bulk_import_programs_nonce', 'mco_nonce'); ?>
            <label for="programs_csv_file" style="font-weight: bold;">Upload your Exam Programs CSV File:</label><br/>
            <input type="file" id="programs_csv_file" name="programs_csv_file" accept=".csv" required style="margin-top: 0.5rem;">
            <?php submit_button('Upload & Import Programs', 'primary'); ?>
        </form>
    </div>

    <div class="mco-tool-card" style="margin-top: 2rem;">
        <h4>Import Recommended Books</h4>
        <p><strong>Step 1:</strong> Download the template, which will include all your existing recommended books.</p>
        <form method="post" action="" style="display: inline-block; margin-right: 1rem;">
            <input type="hidden" name="mco_action" value="download_recommended_books_csv">
            <?php wp_nonce_field('mco_download_recommended_books_csv_nonce', 'mco_nonce'); ?>
            <button type="submit" class="button button-secondary">Download Template with Existing Data</button>
        </form>
        
        <p style="margin-top: 1rem;"><strong>Step 2:</strong> Fill or edit the template with your book data. Re-uploading will update existing books based on "book_title" or create new ones.</p>
        
        <form method="post" enctype="multipart/form-data" style="margin-top: 1rem; border-top: 1px solid #ddd; padding-top: 1rem;">
            <input type="hidden" name="mco_action" value="bulk_import_books">
            <?php wp_nonce_field('mco_bulk_import_books_nonce', 'mco_nonce'); ?>
            <label for="books_csv_file" style="font-weight: bold;">Upload your Recommended Books CSV File:</label><br/>
            <input type="file" id="books_csv_file" name="books_csv_file" accept=".csv" required style="margin-top: 0.5rem;">
            <?php submit_button('Upload & Import Books', 'primary'); ?>
        </form>
    </div>
    <?php
}

function mco_render_tools_tab() {
    $app_url = get_option('mco_exam_app_url');
    $logo_url = get_option('mco_custom_logo_url') ?: get_site_icon_url();
    $templates = get_option('mco_certificate_templates', []);
    $has_signatures = false;
    foreach ($templates as $template) {
        if (!empty($template['signature1Name'])) {
            $has_signatures = true;
            break;
        }
    }
    $prerequisites_met = !empty($app_url) && !empty($logo_url) && $has_signatures;

    ?>
    <h3>Developer & Maintenance Tools</h3>
    
    <div class="mco-tool-card">
        <h4>Generate Tenant Blueprint</h4>
        <p class="description">Generate a starter <code>tenant-config.json</code> file for launching a new tenant. This file contains branding and empty content structures. You must configure the prerequisites before you can generate the file.</p>
        
        <div id="mco-prerequisites">
            <p><strong>Prerequisites Checklist:</strong></p>
            <ul>
                <li class="<?php echo !empty($app_url) ? 'complete' : ''; ?>">Set the Exam Application URL in Main Settings.</li>
                <li class="<?php echo !empty($logo_url) ? 'complete' : ''; ?>">Set a Custom Logo URL or a Site Icon.</li>
                <li class="<?php echo $has_signatures ? 'complete' : ''; ?>">Configure at least one Signature in Certificate Templates.</li>
            </ul>
        </div>
        
        <form method="post" action="">
            <input type="hidden" name="mco_action" value="generate_tenant_blueprint">
            <?php wp_nonce_field('mco_generate_tenant_blueprint_nonce', 'mco_nonce'); ?>
            <?php submit_button('Generate & Download Blueprint', 'primary', 'submit', true, !$prerequisites_met ? ['disabled' => 'disabled'] : []); ?>
        </form>
    </div>

    <div class="mco-tool-card">
        <h4>Generate Full Content Snapshot</h4>
        <p class="description">Generate a complete, fully-populated JSON file containing all current exams, books, prices, and settings. Use this to create a point-in-time backup or to update the static fallback file in your React app for faster initial loads.</p>
        <form method="post" action="">
            <input type="hidden" name="mco_action" value="generate_full_snapshot">
            <?php wp_nonce_field('mco_generate_full_snapshot_nonce', 'mco_nonce'); ?>
            <?php submit_button('Generate & Download Full Snapshot', 'secondary'); ?>
        </form>
    </div>

    <div class="mco-tool-card">
        <h4>Clear Server Config Cache</h4>
        <p class="description">Force the server to rebuild its main configuration cache. Use this after making significant changes to exam programs or products to ensure the app reflects the latest data immediately.</p>
        <?php
            // FIX: Replaced form submission with a safer nonce link to prevent accidental clearing of WordPress options.
            $nonce_url = wp_nonce_url(
                admin_url('admin.php?page=mco-exam-engine&tab=tools&mco_action=clear_config_cache'),
                'mco_clear_config_cache_nonce',
                'mco_nonce'
            );
            echo '<a href="' . esc_url($nonce_url) . '" class="button button-delete">Clear Server Config Cache</a>';
        ?>
    </div>
    
    <style>
        .mco-tool-card { border: 1px solid #ccd0d4; padding: 1rem; margin-top: 1rem; background: #fff; border-radius: 4px; }
        #mco-prerequisites ul { list-style: none; margin-left: 0; }
        #mco-prerequisites li::before { content: '❌'; margin-right: 8px; color: #dc3232; }
        #mco-prerequisites li.complete::before { content: '✅'; color: #46b450; }
    </style>
    <?php
}

// --- META BOXES for CPTs ---
function mco_add_meta_boxes() {
    add_meta_box('mco_exam_program_details', 'Exam Program Details', 'mco_exam_program_metabox_html', 'mco_exam_program', 'normal', 'high');
    add_meta_box('mco_recommended_book_details', 'Book Details', 'mco_book_metabox_html', 'mco_recommended_book', 'normal', 'high');
}

function mco_exam_program_metabox_html($post) {
    wp_nonce_field('mco_save_meta_box_data', 'mco_meta_box_nonce');
    // ... HTML for exam program meta box fields ...
}

function mco_book_metabox_html($post) {
     wp_nonce_field('mco_save_meta_box_data', 'mco_meta_box_nonce');
    // ... HTML for book meta box fields ...
}

function mco_save_meta_box_data($post_id) {
    if (!isset($_POST['mco_meta_box_nonce']) || !wp_verify_nonce($_POST['mco_meta_box_nonce'], 'mco_save_meta_box_data')) return;
    if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) return;
    if (!current_user_can('edit_post', $post_id)) return;
    // ... Logic to save meta box data ...
}

// --- ACTION HANDLERS ---
function mco_handle_admin_actions() {
    // FIX: Use $_REQUEST to handle both POST and GET actions, accommodating the safer nonce link method for tools.
    if (isset($_REQUEST['mco_action']) && isset($_REQUEST['mco_nonce'])) {
        $action = sanitize_key($_REQUEST['mco_action']);
        $nonce = sanitize_text_field($_REQUEST['mco_nonce']);

        if ($action === 'generate_tenant_blueprint' && wp_verify_nonce($nonce, 'mco_generate_tenant_blueprint_nonce')) {
            mco_handle_generate_tenant_blueprint();
        }
        if ($action === 'generate_full_snapshot' && wp_verify_nonce($nonce, 'mco_generate_full_snapshot_nonce')) {
            mco_handle_generate_full_snapshot();
        }
        if ($action === 'clear_config_cache' && wp_verify_nonce($nonce, 'mco_clear_config_cache_nonce')) {
            delete_transient('mco_app_config_data');
            add_action('admin_notices', function() {
                echo '<div class="notice notice-success is-dismissible"><p>Server configuration cache has been cleared.</p></div>';
            });
        }
        if ($action === 'download_exam_programs_csv' && wp_verify_nonce($nonce, 'mco_download_exam_programs_csv_nonce')) {
            mco_generate_exam_programs_csv_content();
        }
        if ($action === 'download_recommended_books_csv' && wp_verify_nonce($nonce, 'mco_download_recommended_books_csv_nonce')) {
            mco_generate_recommended_books_csv_content();
        }
    }
    
    // Keep using $_POST specifically for bulk imports as they involve file uploads.
    if (isset($_POST['mco_action']) && $_POST['mco_action'] === 'bulk_import_programs' && isset($_POST['mco_nonce']) && wp_verify_nonce($_POST['mco_nonce'], 'mco_bulk_import_programs_nonce')) {
        mco_handle_bulk_import_programs();
    }
    if (isset($_POST['mco_action']) && $_POST['mco_action'] === 'bulk_import_books' && isset($_POST['mco_nonce']) && wp_verify_nonce($_POST['mco_nonce'], 'mco_bulk_import_books_nonce')) {
        mco_handle_bulk_import_books();
    }
}

function mco_handle_bulk_import_books() {
    if (!isset($_FILES['books_csv_file']) || $_FILES['books_csv_file']['error'] !== UPLOAD_ERR_OK) {
        add_action('admin_notices', function() { echo '<div class="notice notice-error"><p>Error uploading file. Please try again.</p></div>'; });
        return;
    }

    $file = fopen($_FILES['books_csv_file']['tmp_name'], 'r');
    $header = fgetcsv($file);
    if (!in_array('book_title', $header)) {
        add_action('admin_notices', function() { echo '<div class="notice notice-error"><p>CSV file is missing required header column: book_title</p></div>'; });
        fclose($file);
        return;
    }
    
    $created_count = 0; $updated_count = 0;
    while (($row = fgetcsv($file)) !== false) {
        $data = array_combine($header, $row);
        $post_title = sanitize_text_field($data['book_title']);
        if (empty($post_title)) continue;

        $existing_post = get_page_by_title($post_title, OBJECT, 'mco_recommended_book');
        $post_data = [
            'post_title' => $post_title,
            'post_content' => wp_kses_post($data['book_description'] ?? ''),
            'post_type' => 'mco_recommended_book',
            'post_status' => 'publish',
        ];

        if ($existing_post) {
            $post_data['ID'] = $existing_post->ID;
            wp_update_post($post_data);
            $post_id = $existing_post->ID;
            $updated_count++;
        } else {
            $post_id = wp_insert_post($post_data);
            $created_count++;
        }
        
        if ($post_id && !is_wp_error($post_id)) {
            update_post_meta($post_id, '_mco_thumbnail_url', esc_url_raw($data['thumbnail_url'] ?? ''));
            update_post_meta($post_id, '_mco_link_com', esc_url_raw($data['affiliate_link_com'] ?? ''));
            update_post_meta($post_id, '_mco_link_in', esc_url_raw($data['affiliate_link_in'] ?? ''));
            update_post_meta($post_id, '_mco_link_ae', esc_url_raw($data['affiliate_link_ae'] ?? ''));
        }
    }
    fclose($file);
    delete_transient('mco_app_config_data');
    add_action('admin_notices', function() use ($created_count, $updated_count) {
        echo '<div class="notice notice-success is-dismissible"><p>Bulk import complete! Created: ' . $created_count . ', Updated: ' . $updated_count . ' books. Cache cleared.</p></div>';
    });
}


function mco_handle_bulk_import_programs() {
    if (!isset($_FILES['programs_csv_file']) || $_FILES['programs_csv_file']['error'] !== UPLOAD_ERR_OK) {
        add_action('admin_notices', function() { echo '<div class="notice notice-error"><p>Error uploading file. Please try again.</p></div>'; });
        return;
    }

    $csv_file_path = $_FILES['programs_csv_file']['tmp_name'];
    $file = fopen($csv_file_path, 'r');
    if ($file === false) {
        add_action('admin_notices', function() { echo '<div class="notice notice-error"><p>Could not open the uploaded file.</p></div>'; });
        return;
    }

    $header = fgetcsv($file); // Read header row
    $required_headers = ['program_title', 'certification_exam_sku'];
    foreach ($required_headers as $required) {
        if (!in_array($required, $header)) {
             add_action('admin_notices', function() use ($required) { echo '<div class="notice notice-error"><p>CSV file is missing required header column: ' . esc_html($required) . '</p></div>'; });
             fclose($file);
             return;
        }
    }

    $created_count = 0;
    $updated_count = 0;

    while (($row = fgetcsv($file)) !== false) {
        $data = array_combine($header, $row);

        $post_title = sanitize_text_field($data['program_title']);
        $post_content = wp_kses_post($data['program_description'] ?? '');
        $post_status = sanitize_text_field($data['status'] ?? 'publish');
        $sku = sanitize_text_field($data['certification_exam_sku']);
        
        if (empty($post_title) || empty($sku)) continue;

        $existing_post = get_page_by_title($post_title, OBJECT, 'mco_exam_program');
        
        $post_data = [ 'post_title' => $post_title, 'post_content' => $post_content, 'post_type' => 'mco_exam_program', 'post_status' => $post_status ];

        if ($existing_post) {
            $post_data['ID'] = $existing_post->ID;
            wp_update_post($post_data);
            $post_id = $existing_post->ID;
            $updated_count++;
        } else {
            $post_id = wp_insert_post($post_data);
            $created_count++;
        }
        
        if ($post_id && !is_wp_error($post_id)) {
            $meta_fields = [
                'cert_exam_sku' => $sku, 'question_source_url' => esc_url_raw($data['question_source_url'] ?? ''),
                'is_proctored' => !empty($data['is_proctored']), 'certificate_enabled' => !empty($data['certificate_enabled']),
                'recommended_book_ids' => array_map('sanitize_text_field', explode(',', $data['recommended_book_id'] ?? '')),
                'practice_questions' => intval($data['practice_questions'] ?? 25), 'practice_duration' => intval($data['practice_duration'] ?? 60),
                'cert_questions' => intval($data['cert_questions'] ?? 100), 'cert_duration' => intval($data['cert_duration'] ?? 120),
                'pass_score' => intval($data['pass_score'] ?? 70)
            ];
            foreach ($meta_fields as $key => $value) { update_post_meta($post_id, $key, $value); }
        }
    }
    fclose($file);

    delete_transient('mco_app_config_data');

    add_action('admin_notices', function() use ($created_count, $updated_count) {
        echo '<div class="notice notice-success is-dismissible"><p>Bulk import complete! Created: ' . $created_count . ', Updated: ' . $updated_count . ' programs. Cache cleared.</p></div>';
    });
}
?>