<?php
if (!defined('ABSPATH')) exit;

// --- HOOKS ---
if (!function_exists('mco_register_admin_hooks')) {
    function mco_register_admin_hooks() {
        add_action('admin_menu', 'mco_add_admin_menu');
        add_action('admin_init', 'mco_register_plugin_settings');
        add_filter('manage_mco_exam_program_posts_columns', 'mco_add_exam_program_columns');
        add_action('manage_mco_exam_program_posts_custom_column', 'mco_display_exam_program_columns', 10, 2);
    }
}

// --- ADMIN MENU & PAGE SETUP ---
if (!function_exists('mco_add_admin_menu')) {
    function mco_add_admin_menu() {
        $hook_suffix = add_menu_page('Exam App Engine', 'Exam App Engine', 'manage_options', 'mco-exam-engine', 'mco_admin_page_html', 'dashicons-analytics');
        add_submenu_page('mco-exam-engine', 'Exam Programs', 'Exam Programs', 'manage_options', 'edit.php?post_type=mco_exam_program');
        add_submenu_page('mco-exam-engine', 'Recommended Books', 'Recommended Books', 'manage_options', 'edit.php?post_type=mco_recommended_book');

        // Hook for handling POST/GET actions on this specific admin page.
        add_action('load-' . $hook_suffix, 'mco_handle_admin_page_actions');
    }
}

// --- ADMIN PAGE HTML ---
if (!function_exists('mco_admin_page_html')) {
    function mco_admin_page_html() {
        $active_tab = isset($_GET['tab']) ? $_GET['tab'] : 'main_settings';
        ?>
        <div class="wrap">
            <h1>Exam App Engine Settings</h1>
            <?php settings_errors(); ?>

            <h2 class="nav-tab-wrapper">
                <a href="?page=mco-exam-engine&tab=main_settings" class="nav-tab <?php echo $active_tab == 'main_settings' ? 'nav-tab-active' : ''; ?>">Main Settings</a>
                <a href="?page=mco-exam-engine&tab=certificate_templates" class="nav-tab <?php echo $active_tab == 'certificate_templates' ? 'nav-tab-active' : ''; ?>">Certificate Templates</a>
                <a href="?page=mco-exam-engine&tab=bulk_import" class="nav-tab <?php echo $active_tab == 'bulk_import' ? 'nav-tab-active' : ''; ?>">Bulk Import</a>
                <a href="?page=mco-exam-engine&tab=tools" class="nav-tab <?php echo $active_tab == 'tools' ? 'nav-tab-active' : ''; ?>">Tools</a>
            </h2>

            <form method="post" action="options.php" <?php if ($active_tab !== 'main_settings' && $active_tab !== 'certificate_templates') echo 'style="display:none;"'; ?>>
                <?php
                if ($active_tab == 'main_settings') {
                    settings_fields('mco_main_settings_group');
                    do_settings_sections('mco-exam-engine-main');
                } elseif ($active_tab == 'certificate_templates') {
                    settings_fields('mco_certificate_templates_group');
                    do_settings_sections('mco-exam-engine-certs');
                }
                submit_button('Save Settings');
                ?>
            </form>
            
            <?php if ($active_tab == 'bulk_import'): ?>
                <?php mco_bulk_import_tab_html(); ?>
            <?php endif; ?>

            <?php if ($active_tab == 'tools'): ?>
                <?php mco_tools_tab_html(); ?>
            <?php endif; ?>
        </div>
        <?php
    }
}


// --- BULK IMPORT & TOOLS TABS ---

function mco_bulk_import_tab_html() {
    $exam_template_url = admin_url('admin.php?page=mco-exam-engine&tab=bulk_import&download_template=exam_program');
    $book_template_url = admin_url('admin.php?page=mco-exam-engine&tab=bulk_import&download_template=recommended_book');
    ?>
    <h3>Bulk Import Exam Programs</h3>
    <p>Upload a CSV file to create or update multiple Exam Programs at once. The importer matches programs by title.</p>
    <form method="post" enctype="multipart/form-data">
        <?php wp_nonce_field('mco_exam_csv_upload_nonce', 'mco_exam_csv_upload_nonce'); ?>
        <input type="hidden" name="mco_action" value="handle_exam_program_csv_upload" />
        <table class="form-table">
            <tr valign="top">
                <th scope="row"><label for="exam_program_csv">CSV File</label></th>
                <td>
                    <input type="file" id="exam_program_csv" name="exam_program_csv" accept=".csv" required>
                    <p class="description">
                        Required columns: <code>program_title, program_description, question_source_url, certification_exam_sku, is_proctored, recommended_book_id, practice_questions, practice_duration, cert_questions, cert_duration, pass_score, status</code><br>
                        - <strong>is_proctored:</strong> Use '1' for yes, '0' for no.<br>
                        - <strong>recommended_book_id:</strong> Use the custom `book_id` from your books CSV. For multiple books, use a comma-separated list (e.g., "book-1,book-2").<br>
                        - <strong>status:</strong> Must be a valid post status (e.g., 'publish', 'draft').<br>
                        <a href="<?php echo esc_url($exam_template_url); ?>">Download Exam Program CSV Template</a>
                    </p>
                </td>
            </tr>
        </table>
        <?php submit_button('Upload and Import Exams'); ?>
    </form>
    <hr>
    <h3>Bulk Import Recommended Books</h3>
    <p>Upload a CSV file to create or update Recommended Books. The importer matches books by title.</p>
    <form method="post" enctype="multipart/form-data">
        <?php wp_nonce_field('mco_book_csv_upload_nonce', 'mco_book_csv_upload_nonce'); ?>
        <input type="hidden" name="mco_action" value="handle_book_csv_upload" />
        <table class="form-table">
            <tr valign="top">
                <th scope="row"><label for="recommended_book_csv">CSV File</label></th>
                <td>
                    <input type="file" id="recommended_book_csv" name="recommended_book_csv" accept=".csv" required>
                    <p class="description">
                        Required columns: <code>book_id, book_title, book_description, thumbnail_url, link_com, link_in, link_ae</code><br>
                        - <strong>book_id:</strong> A unique identifier you create (e.g., 'cpc-study-guide'). This ID is used to link books to exams.<br>
                        <a href="<?php echo esc_url($book_template_url); ?>">Download Recommended Book CSV Template</a>
                    </p>
                </td>
            </tr>
        </table>
        <?php submit_button('Upload and Import Books'); ?>
    </form>
    <?php
}

function mco_tools_tab_html() {
    ?>
    <h3>Tools</h3>
    <p>Use these tools to manage application data.</p>
    <form method="post">
        <?php wp_nonce_field('mco_tools_action_nonce', 'mco_tools_action_nonce'); ?>
        <table class="form-table">
            <tr valign="top">
                <th scope="row">Clear App Cache</th>
                <td>
                    <p class="description">This will force the application to re-fetch its configuration from WordPress on the next load. Use this after making significant changes to settings or content.</p>
                    <p><button type="submit" name="mco_action" value="clear_app_cache" class="button">Clear App Configuration Cache</button></p>
                </td>
            </tr>
        </table>
    </form>
    <?php
}

// --- HANDLER FOR PAGE-SPECIFIC ACTIONS (POST/GET) ---
if (!function_exists('mco_handle_admin_page_actions')) {
    function mco_handle_admin_page_actions() {
        // Handle POST actions like CSV uploads and tool buttons
        if (!empty($_POST['mco_action']) && isset($_POST['_wpnonce'])) {
            $action = sanitize_key($_POST['mco_action']);
            
            if ($action === 'handle_exam_program_csv_upload' && check_admin_referer('mco_exam_csv_upload_nonce', 'mco_exam_csv_upload_nonce')) {
                mco_handle_exam_program_csv_upload();
            } elseif ($action === 'handle_book_csv_upload' && check_admin_referer('mco_book_csv_upload_nonce', 'mco_book_csv_upload_nonce')) {
                mco_handle_book_csv_upload();
            } elseif ($action === 'clear_app_cache' && check_admin_referer('mco_tools_action_nonce', 'mco_tools_action_nonce')) {
                mco_handle_clear_app_cache();
            }
        }
        
        // Handle GET actions like downloading a template
        if (isset($_GET['download_template']) && current_user_can('manage_options')) {
            $template_type = sanitize_key($_GET['download_template']);
            if ($template_type === 'exam_program') {
                mco_download_csv_template('exam_program');
            } elseif ($template_type === 'recommended_book') {
                mco_download_csv_template('recommended_book');
            }
        }
    }
}

// --- SETTINGS REGISTRATION ---
if (!function_exists('mco_register_plugin_settings')) {
    function mco_register_plugin_settings() {
        // Main Settings
        register_setting('mco_main_settings_group', 'mco_exam_app_url', ['type' => 'string', 'sanitize_callback' => 'mco_sanitize_textarea']);
        register_setting('mco_main_settings_group', 'mco_logo_url', ['type' => 'string', 'sanitize_callback' => 'esc_url_raw']);
        add_settings_section('mco_main_section', 'Main Application Settings', null, 'mco-exam-engine-main');
        add_settings_field('mco_exam_app_url', 'Exam Application URL(s)', 'mco_exam_app_url_callback', 'mco-exam-engine-main', 'mco_main_section');
        add_settings_field('mco_logo_url', 'Organization Logo', 'mco_logo_url_callback', 'mco-exam-engine-main', 'mco_main_section');

        // Certificate Templates
        register_setting('mco_certificate_templates_group', 'mco_certificate_templates', ['type' => 'array', 'sanitize_callback' => 'mco_sanitize_certificate_templates']);
        add_settings_section('mco_certs_section', 'Certificate Templates', 'mco_certificate_section_callback', 'mco-exam-engine-certs');
    }
}

function mco_sanitize_textarea($value) {
    update_option('mco_config_version', current_time('YmdHis')); // Force refresh
    return implode("\n", array_map('sanitize_text_field', explode("\n", $value)));
}

function mco_sanitize_certificate_templates($templates) {
    update_option('mco_config_version', current_time('YmdHis')); // Force refresh
    foreach ($templates as &$template) {
        $template['id'] = sanitize_key($template['id']);
        $template['title'] = sanitize_text_field($template['title']);
        $template['body'] = wp_kses_post($template['body']);
        $template['signature1Name'] = sanitize_text_field($template['signature1Name']);
        $template['signature1Title'] = sanitize_text_field($template['signature1Title']);
        $template['signature1ImageUrl'] = sanitize_text_field($template['signature1ImageUrl']);
        $template['signature2Name'] = sanitize_text_field($template['signature2Name']);
        $template['signature2Title'] = sanitize_text_field($template['signature2Title']);
        $template['signature2ImageUrl'] = sanitize_text_field($template['signature2ImageUrl']);
    }
    return $templates;
}

// --- CSV IMPORT LOGIC (UPDATE-OR-CREATE) ---
function mco_handle_exam_program_csv_upload() {
    if (empty($_FILES['exam_program_csv']['tmp_name'])) {
        add_settings_error('mco_importer', 'csv_error', 'No file uploaded.', 'error');
        return;
    }

    $csv_file = $_FILES['exam_program_csv']['tmp_name'];
    $file_handle = fopen($csv_file, 'r');
    if (!$file_handle) {
        add_settings_error('mco_importer', 'csv_error', 'Could not open the uploaded file.', 'error');
        return;
    }

    $header = fgetcsv($file_handle);
    $created_count = 0;
    $updated_count = 0;
    $failed_count = 0;

    while (($row = fgetcsv($file_handle)) !== FALSE) {
        $data = array_combine($header, $row);

        $post_title = sanitize_text_field($data['program_title']);
        if (empty($post_title)) {
            $failed_count++;
            continue;
        }

        $post_content = wp_kses_post($data['program_description']);
        $post_status = sanitize_key($data['status']);

        $post_args = [
            'post_title'   => $post_title,
            'post_content' => $post_content,
            'post_status'  => in_array($post_status, ['publish', 'draft', 'pending']) ? $post_status : 'draft',
            'post_type'    => 'mco_exam_program',
        ];

        // Check if post exists by title
        $existing_post = get_page_by_title($post_title, OBJECT, 'mco_exam_program');

        if ($existing_post) {
            $post_id = $existing_post->ID;
            $post_args['ID'] = $post_id;
            wp_update_post($post_args);
            $updated_count++;
        } else {
            $post_id = wp_insert_post($post_args);
            if (is_wp_error($post_id)) {
                $failed_count++;
                continue;
            }
            $created_count++;
        }

        // Update post meta and taxonomies
        update_post_meta($post_id, '_mco_question_source_url', esc_url_raw($data['question_source_url']));
        update_post_meta($post_id, '_mco_certification_exam_sku', sanitize_text_field($data['certification_exam_sku']));
        update_post_meta($post_id, '_mco_is_proctored', intval($data['is_proctored']));

        // Handle multiple book IDs
        $book_ids_str = sanitize_text_field($data['recommended_book_id']);
        $book_slugs = array_map('trim', explode(',', $book_ids_str));
        $wp_book_post_ids = [];

        foreach ($book_slugs as $book_slug) {
            if (empty($book_slug)) continue;
            $book_query = new WP_Query([
                'post_type' => 'mco_recommended_book',
                'meta_key' => '_mco_book_id',
                'meta_value' => $book_slug,
                'posts_per_page' => 1,
                'fields' => 'ids'
            ]);
            if ($book_query->have_posts()) {
                $wp_book_post_ids[] = $book_query->posts[0];
            }
        }
        update_post_meta($post_id, '_mco_recommended_book_ids', $wp_book_post_ids);

        // Update taxonomies
        wp_set_post_terms($post_id, $data['practice_questions'], 'exam_practice_questions', false);
        wp_set_post_terms($post_id, $data['practice_duration'], 'exam_practice_duration', false);
        wp_set_post_terms($post_id, $data['cert_questions'], 'exam_cert_questions', false);
        wp_set_post_terms($post_id, $data['cert_duration'], 'exam_cert_duration', false);
        wp_set_post_terms($post_id, $data['pass_score'], 'exam_pass_score', false);
    }
    fclose($file_handle);
    update_option('mco_config_version', current_time('YmdHis'));
    add_settings_error('mco_importer', 'csv_success', "Import complete. Created: {$created_count}, Updated: {$updated_count}, Failed/Skipped: {$failed_count}.", 'success');
}


function mco_handle_book_csv_upload() {
    if (empty($_FILES['recommended_book_csv']['tmp_name'])) {
        add_settings_error('mco_importer', 'csv_error', 'No file uploaded.', 'error');
        return;
    }

    $csv_file = $_FILES['recommended_book_csv']['tmp_name'];
    $file_handle = fopen($csv_file, 'r');
    if (!$file_handle) {
        add_settings_error('mco_importer', 'csv_error', 'Could not open the uploaded file.', 'error');
        return;
    }

    $header = fgetcsv($file_handle);
    $created_count = 0;
    $updated_count = 0;
    $failed_count = 0;

    while (($row = fgetcsv($file_handle)) !== FALSE) {
        $data = array_combine($header, $row);

        $post_title = sanitize_text_field($data['book_title']);
        $book_id_slug = sanitize_key($data['book_id']);
        if (empty($post_title) || empty($book_id_slug)) {
            $failed_count++;
            continue;
        }

        $post_args = [
            'post_title'   => $post_title,
            'post_content' => wp_kses_post($data['book_description']),
            'post_status'  => 'publish',
            'post_type'    => 'mco_recommended_book',
        ];

        $existing_post = get_page_by_title($post_title, OBJECT, 'mco_recommended_book');

        if ($existing_post) {
            $post_id = $existing_post->ID;
            $post_args['ID'] = $post_id;
            wp_update_post($post_args);
            $updated_count++;
        } else {
            $post_id = wp_insert_post($post_args);
            if (is_wp_error($post_id)) {
                $failed_count++;
                continue;
            }
            $created_count++;
        }

        // Update post meta for book_id and affiliate links
        update_post_meta($post_id, '_mco_book_id', $book_id_slug);
        update_post_meta($post_id, '_mco_thumbnail_url', esc_url_raw($data['thumbnail_url']));
        update_post_meta($post_id, '_mco_link_com', esc_url_raw($data['link_com']));
        update_post_meta($post_id, '_mco_link_in', esc_url_raw($data['link_in']));
        update_post_meta($post_id, '_mco_link_ae', esc_url_raw($data['link_ae']));
    }
    fclose($file_handle);
    update_option('mco_config_version', current_time('YmdHis'));
    add_settings_error('mco_importer', 'csv_success', "Import complete. Created: {$created_count}, Updated: {$updated_count}, Failed/Skipped: {$failed_count}.", 'success');
}


// --- TOOLS HANDLERS ---
function mco_handle_clear_app_cache() {
    update_option('mco_config_version', current_time('YmdHis'));
    add_settings_error('mco_tools', 'cache_cleared', 'Application configuration cache has been cleared.', 'success');
}


// --- CSV TEMPLATE DOWNLOAD ---
function mco_download_csv_template($type) {
    if ($type === 'exam_program') {
        $filename = 'exam_program_template.csv';
        $header = ['program_title', 'program_description', 'question_source_url', 'certification_exam_sku', 'is_proctored', 'recommended_book_id', 'practice_questions', 'practice_duration', 'cert_questions', 'cert_duration', 'pass_score', 'status'];
    } elseif ($type === 'recommended_book') {
        $filename = 'recommended_book_template.csv';
        $header = ['book_id', 'book_title', 'book_description', 'thumbnail_url', 'link_com', 'link_in', 'link_ae'];
    } else {
        return;
    }

    header('Content-Type: text/csv; charset=utf-8');
    header('Content-Disposition: attachment; filename=' . $filename);
    $output = fopen('php://output', 'w');
    fputcsv($output, $header);
    fclose($output);
    exit;
}

// --- SETTINGS UI CALLBACKS ---
function mco_exam_app_url_callback() {
    $value = get_option('mco_exam_app_url', '');
    echo '<textarea name="mco_exam_app_url" rows="3" class="large-text code">' . esc_textarea($value) . '</textarea>';
    echo '<p class="description">Enter the full URL of your React exam application. For multiple domains (e.g., Vercel preview URLs), enter each URL on a new line. This is crucial for CORS to work.</p>';
}
function mco_logo_url_callback() {
    $value = get_option('mco_logo_url', '');
    echo '<input type="text" name="mco_logo_url" value="' . esc_attr($value) . '" class="large-text code" placeholder="Enter URL or Base64 data URI">';
    echo '<p class="description">Optional. Overrides the site icon. Paste a direct image URL or Base64 data. For best results with certificates, use Base64.</p>';
}
function mco_certificate_section_callback() {
    echo '<p>Customize the content of the certificates generated by the app. Use the placeholders like <code>{examName}</code> to dynamically insert data.</p>';
}

function mco_get_default_certificate_templates() {
    return [
        'cert-practice' => [
            'id' => 'cert-practice',
            'title' => 'Certificate of Proficiency',
            'body' => 'This certifies that <strong>{candidateName}</strong> has successfully demonstrated proficiency in the <strong>{examName}</strong> practice exam, achieving a score of <strong>{finalScore}%</strong>.',
            'signature1Name' => 'Director of Education',
            'signature1Title' => 'Lead Instructor',
            'signature1ImageUrl' => '',
            'signature2Name' => '',
            'signature2Title' => '',
            'signature2ImageUrl' => ''
        ],
        'cert-completion' => [
            'id' => 'cert-completion',
            'title' => 'Certificate of Achievement',
            'body' => 'This is to certify that <strong>{candidateName}</strong> has successfully completed the rigorous requirements of the <strong>{examName}</strong> and is hereby awarded this certificate upon achieving a passing score of <strong>{finalScore}%</strong>.',
            'signature1Name' => 'Director of Education',
            'signature1Title' => 'Lead Instructor',
            'signature1ImageUrl' => '',
            'signature2Name' => 'Chief Executive Officer',
            'signature2Title' => 'CEO',
            'signature2ImageUrl' => ''
        ],
    ];
}


// --- CPT ADMIN COLUMNS ---
function mco_add_exam_program_columns($columns) {
    $new_columns = [];
    foreach ($columns as $key => $title) {
        $new_columns[$key] = $title;
        if ($key === 'title') {
            $new_columns['cert_sku'] = 'Cert. SKU';
        }
    }
    return $new_columns;
}

function mco_display_exam_program_columns($column, $post_id) {
    if ($column === 'cert_sku') {
        echo esc_html(get_post_meta($post_id, '_mco_certification_exam_sku', true));
    }
}
?>