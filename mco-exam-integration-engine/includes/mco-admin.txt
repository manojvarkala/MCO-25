<?php
if (!defined('ABSPATH')) exit;

// Note: Hook registration is now handled by mco_register_admin_hooks() to prevent timing issues.
if (!function_exists('mco_register_admin_hooks')) {
    function mco_register_admin_hooks() {
        // --- HOOKS ---
        add_action('admin_menu', 'mco_exam_add_admin_menu');
        add_action('add_meta_boxes', 'mco_add_meta_boxes');
        add_action('save_post_product', 'mco_save_wc_product_meta_data');
        add_action('save_post_mco_exam_program', 'mco_save_exam_program_meta');
        add_action('save_post_mco_recommended_book', 'mco_save_book_meta_data');
        add_action('admin_init', 'mco_register_settings_and_fields');
        add_action('save_post', 'mco_auto_update_config_version_on_save');
        add_action('update_option_mco_certificate_templates', 'mco_auto_update_config_version_on_settings_save', 10, 1);
        add_action('admin_notices', 'mco_admin_notices');
    }
}

// --- AUTO-VERSIONING ---
if (!function_exists('mco_auto_update_config_version_on_save')) {
    function mco_auto_update_config_version_on_save($post_id) {
        $post_type = get_post_type($post_id);
        if ($post_type === 'mco_exam_program' || $post_type === 'mco_recommended_book') {
            update_option('mco_config_version', current_time('YmdHis'));
        }
    }
}
if (!function_exists('mco_auto_update_config_version_on_settings_save')) {
    function mco_auto_update_config_version_on_settings_save($option_name) {
        if ($option_name === 'mco_certificate_templates') {
            update_option('mco_config_version', current_time('YmdHis'));
        }
    }
}

// --- ADMIN NOTICES ---
if (!function_exists('mco_admin_notices')) {
    function mco_admin_notices() {
        if (!defined('MCO_JWT_SECRET') || strlen(MCO_JWT_SECRET) < 32) echo '<div class="notice notice-error"><p><strong>Exam App Engine:</strong> A secure <strong>MCO_JWT_SECRET</strong> is not defined in wp-config.php. SSO will not work.</p></div>';
        if (empty(get_option('mco_exam_app_url'))) echo '<div class="notice notice-warning"><p><strong>Exam App Engine:</strong> The Exam App URL is not set. Please <a href="' . admin_url('admin.php?page=mco-exam-engine') . '">configure it</a>.</p></div>';
    }
}

// --- ADMIN MENU & PAGES ---
if (!function_exists('mco_exam_add_admin_menu')) {
    function mco_exam_add_admin_menu() {
        add_menu_page('Exam App Engine', 'Exam App Engine', 'manage_options', 'mco-exam-engine', 'mco_render_settings_page', 'dashicons-analytics', 80);
        add_submenu_page('mco-exam-engine', 'Exam Programs', 'Exam Programs', 'manage_options', 'edit.php?post_type=mco_exam_program');
        add_submenu_page('mco-exam-engine', 'Recommended Books', 'Recommended Books', 'manage_options', 'edit.php?post_type=mco_recommended_book');
    }
}

if (!function_exists('mco_render_settings_page')) {
    function mco_render_settings_page() {
        $active_tab = isset($_GET['tab']) ? sanitize_key($_GET['tab']) : 'main_settings';

        if (isset($_POST['mco_flush_rewrites']) && check_admin_referer('mco_flush_rewrites_nonce')) {
            flush_rewrite_rules(true);
            add_action('admin_notices', function() {
                echo '<div class="notice notice-success is-dismissible"><p>API routes have been successfully refreshed.</p></div>';
            });
        }
        ?>
        <div class="wrap">
            <h1>Exam App Engine Settings</h1>
            <?php settings_errors(); do_action('admin_notices'); ?>
            <h2 class="nav-tab-wrapper">
                <a href="?page=mco-exam-engine&tab=main_settings" class="nav-tab <?php echo $active_tab == 'main_settings' ? 'nav-tab-active' : ''; ?>">Main Settings</a>
                <a href="?page=mco-exam-engine&tab=certificate_templates" class="nav-tab <?php echo $active_tab == 'certificate_templates' ? 'nav-tab-active' : ''; ?>">Certificate Templates</a>
                <a href="?page=mco-exam-engine&tab=tools" class="nav-tab <?php echo $active_tab == 'tools' ? 'nav-tab-active' : ''; ?>">Tools</a>
            </h2>

            <?php if ($active_tab !== 'tools'): ?>
                <form method="post" action="options.php">
                    <?php
                    if ($active_tab == 'main_settings') {
                        settings_fields('mco_main_settings_group');
                        do_settings_sections('mco_main_settings_page');
                    } elseif ($active_tab == 'certificate_templates') {
                        settings_fields('mco_certificate_templates_group');
                        do_settings_sections('mco_certificate_templates_page');
                    }
                    submit_button();
                    ?>
                </form>
            <?php else: ?>
                <?php mco_render_tools_tab(); ?>
            <?php endif; ?>
        </div>
        <?php
    }
}

if (!function_exists('mco_register_settings_and_fields')) {
    function mco_register_settings_and_fields() {
        register_setting('mco_main_settings_group', 'mco_exam_app_url');
        register_setting('mco_main_settings_group', 'mco_logo_url');
        add_settings_section('mco_main_section', 'Core Configuration', null, 'mco_main_settings_page');
        add_settings_field('mco_exam_app_url_field', 'Exam Application URL(s)', 'mco_render_app_url_field', 'mco_main_settings_page', 'mco_main_section');
        add_settings_field('mco_logo_url_field', 'Organization Logo URL', 'mco_render_logo_url_field', 'mco_main_settings_page', 'mco_main_section');
        add_settings_field('mco_config_version_field', 'Live Config Version', 'mco_render_config_version_field', 'mco_main_settings_page', 'mco_main_section');
        
        register_setting('mco_certificate_templates_group', 'mco_certificate_templates', ['sanitize_callback' => 'mco_sanitize_certificate_templates']);
        add_settings_section('mco_certificate_section', 'Manage Certificate Templates', null, 'mco_certificate_templates_page');
        add_settings_field('mco_certificate_templates_field', '', 'mco_render_certificate_templates_field', 'mco_certificate_templates_page', 'mco_certificate_section');
    }
}

// --- RENDER FUNCTIONS FOR SETTINGS FIELDS ---
if (!function_exists('mco_render_app_url_field')) {
    function mco_render_app_url_field() {
        $urls = get_option('mco_exam_app_url', '');
        echo '<textarea name="mco_exam_app_url" rows="4" class="large-text" placeholder="https://exam.yourdomain.com&#10;https://preview-branch.vercel.app">' . esc_textarea($urls) . '</textarea>';
        echo '<p class="description"><strong>Crucial:</strong> Enter all possible URLs for your React app, <strong>one per line</strong>. The first URL will be used for redirects. This is required for security (CORS) and must include any Vercel/preview domains you use for testing (e.g., <code>https://mco-25.vercel.app</code>).</p>';
    }
}

if (!function_exists('mco_render_logo_url_field')) {
    function mco_render_logo_url_field() {
        $logo_url = get_option('mco_logo_url', '');
        echo '<input type="url" name="mco_logo_url" value="' . esc_attr($logo_url) . '" class="regular-text" placeholder="https://yourdomain.com/logo.png">';
        echo '<p class="description">Optional. Provide a direct URL to your organization\'s logo. If left blank, the plugin will attempt to use the "Site Icon" from your WordPress settings (Appearance &rarr; Customize &rarr; Site Identity).</p>';
    }
}

if (!function_exists('mco_render_config_version_field')) {
    function mco_render_config_version_field() {
        $version = get_option('mco_config_version', 'Not set');
        echo '<input type="text" value="' . esc_attr($version) . '" class="regular-text" readonly disabled>';
        echo '<p class="description">This version timestamp updates automatically when you save an exam, book, or certificate template. It signals the app to fetch new content.</p>';
    }
}

if (!function_exists('mco_render_certificate_templates_field')) {
    function mco_render_certificate_templates_field() {
        $templates = get_option('mco_certificate_templates', []);
        $variables_helper = '<p class="description" style="margin-top: 4px;">Available variables: <code>{examName}</code>, <code>{finalScore}</code>, <code>{candidateName}</code>, <code>{date}</code></p>';
        echo '<p class="description" style="margin-bottom: 1rem;">Edit the details for each certificate type below. The <strong>Proficiency Certificate</strong> is awarded for passing any practice exam. The <strong>Completion Certificate</strong> is for passing any paid certification exam.</p>';
        echo '<div id="mco-certificate-accordion">';
        foreach ($templates as $id => $template) {
            ?>
            <div class="mco-cert-template-item">
                <h4 class="mco-cert-template-title"><?php echo esc_html($template['title']); ?> (ID: <?php echo esc_html($id); ?>)</h4>
                <div class="mco-cert-template-content">
                    <input type="hidden" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][id]" value="<?php echo esc_attr($id); ?>">
                    <p><label>Title:<br><input type="text" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][title]" value="<?php echo esc_attr($template['title']); ?>" class="large-text"></label><?php echo $variables_helper; ?></p>
                    <p><label>Body:<br><textarea name="mco_certificate_templates[<?php echo esc_attr($id); ?>][body]" rows="3" class="large-text"><?php echo esc_textarea($template['body']); ?></textarea></label><?php echo $variables_helper; ?></p>
                    <p><label>Signature 1 Name:<br><input type="text" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][signature1Name]" value="<?php echo esc_attr($template['signature1Name']); ?>" class="regular-text"></label></p>
                    <p><label>Signature 1 Title:<br><input type="text" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][signature1Title]" value="<?php echo esc_attr($template['signature1Title']); ?>" class="regular-text"></label></p>
                    <p><label>Signature 1 Image URL (e.g., JPG, PNG):<br><input type="url" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][signature1ImageUrl]" value="<?php echo esc_attr($template['signature1ImageUrl']); ?>" class="large-text"></label></p>
                    <hr style="margin: 1rem 0;">
                    <p><label>Signature 2 Name (optional):<br><input type="text" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][signature2Name]" value="<?php echo esc_attr($template['signature2Name']); ?>" class="regular-text"></label></p>
                    <p><label>Signature 2 Title (optional):<br><input type="text" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][signature2Title]" value="<?php echo esc_attr($template['signature2Title']); ?>" class="regular-text"></label></p>
                    <p><label>Signature 2 Image URL (e.g., JPG, PNG):<br><input type="url" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][signature2ImageUrl]" value="<?php echo esc_attr($template['signature2ImageUrl']); ?>" class="large-text"></label></p>
                </div>
            </div>
            <?php
        }
        echo '</div>';
        ?>
        <style>
            .mco-cert-template-item { border: 1px solid #ddd; margin-bottom: 1rem; }
            .mco-cert-template-title { font-size: 1.1em; padding: 0.8rem; margin: 0; background: #f9f9f9; cursor: pointer; }
            .mco-cert-template-content { display: none; padding: 1rem; border-top: 1px solid #ddd; }
            .mco-cert-template-item.active .mco-cert-template-content { display: block; }
        </style>
        <script>
        jQuery(document).ready(function($){
            $('#mco-certificate-accordion .mco-cert-template-title').click(function(){
                $(this).parent().toggleClass('active').find('.mco-cert-template-content').slideToggle();
            });
        });
        </script>
        <?php
    }
}

if (!function_exists('mco_sanitize_certificate_templates')) {
    function mco_sanitize_certificate_templates($input) {
        $output = [];
        foreach ($input as $id => $template) {
            $sanitized_id = sanitize_key($id);
            $output[$sanitized_id] = [
                'id' => $sanitized_id,
                'title' => sanitize_text_field($template['title']),
                'body' => wp_kses_post($template['body']),
                'signature1Name' => sanitize_text_field($template['signature1Name']),
                'signature1Title' => sanitize_text_field($template['signature1Title']),
                'signature1ImageUrl' => esc_url_raw($template['signature1ImageUrl']),
                'signature2Name' => sanitize_text_field($template['signature2Name']),
                'signature2Title' => sanitize_text_field($template['signature2Title']),
                'signature2ImageUrl' => esc_url_raw($template['signature2ImageUrl']),
            ];
        }
        return $output;
    }
}

if (!function_exists('mco_render_tools_tab')) {
    function mco_render_tools_tab() {
        ?>
        <h3>Maintenance Tools</h3>
        <form method="post" action="?page=mco-exam-engine&tab=tools">
            <?php wp_nonce_field('mco_flush_rewrites_nonce'); ?>
            <input type="hidden" name="mco_flush_rewrites" value="1">
            <table class="form-table">
                <tr valign="top">
                    <th scope="row">API Routes</th>
                    <td>
                        <p>If you see API errors, click this button to rebuild the API route list. This is often needed after plugin updates.</p>
                        <?php submit_button('Force Refresh API Routes', 'secondary', 'submit_flush', false); ?>
                    </td>
                </tr>
            </table>
        </form>
        <?php
    }
}

// --- META BOXES & SAVE FUNCTIONS ---
if (!function_exists('mco_add_meta_boxes')) {
    function mco_add_meta_boxes() {
        add_meta_box('mco_wc_product_meta', 'Exam App Configuration', 'mco_render_wc_product_meta_box', 'product', 'side', 'high');
        add_meta_box('mco_exam_program_meta', 'Exam Program Details', 'mco_render_exam_program_meta_box', 'mco_exam_program', 'normal', 'high');
        add_meta_box('mco_book_links_meta', 'Affiliate Links', 'mco_render_book_links_meta_box', 'mco_recommended_book', 'normal', 'high');
    }
}

if (!function_exists('mco_render_exam_program_meta_box')) {
    function mco_render_exam_program_meta_box($post) {
        wp_nonce_field('mco_save_exam_meta', 'mco_exam_nonce');
        $source_url = get_post_meta($post->ID, '_mco_question_source_url', true);
        $cert_sku = get_post_meta($post->ID, '_mco_certification_exam_sku', true);
        
        echo '<p><label for="mco_question_source_url"><strong>Question Source Google Sheet URL:</strong></label><br>';
        echo '<input type="url" id="mco_question_source_url" name="mco_question_source_url" value="' . esc_attr($source_url) . '" style="width:100%; margin-bottom: 0.5rem;">';
        
        echo '<p class="description" style="background-color: #f0f6fa; padding: 10px; border-radius: 4px; border-left: 3px solid #72aee6;">';
        echo '<strong>Important:</strong> Ensure your Google Sheet is public ("Anyone with the link can view"). The sheet must be in CSV format with a header row and three columns with the exact headers: <code>question</code>, <code>options</code>, and <code>correctAnswer</code>.<br>';
        echo '<ul style="list-style: disc; margin-left: 20px; margin-top: 5px;">';
        echo '<li><strong>question:</strong> The full text of the question.</li>';
        echo '<li><strong>options:</strong> All possible answers, separated by a pipe (<code>|</code>) character. Ex: <code>Option A|Option B|Option C</code></li>';
        echo '<li><strong>correctAnswer:</strong> The full text of the correct answer, exactly as it appears in the options list. Ex: <code>Option C</code></li>';
        echo '</ul></p></p>';

        echo '<p style="margin-top: 1rem;"><label for="mco_certification_exam_sku"><strong>Certification Exam Product SKU:</strong></label><br>';
        echo '<input type="text" id="mco_certification_exam_sku" name="mco_certification_exam_sku" value="' . esc_attr($cert_sku) . '" style="width:100%;">';
        echo '<p class="description">Enter the WooCommerce product SKU for the main certification exam associated with this program.</p>';
        echo '</p>';
    }
}

if (!function_exists('mco_save_exam_program_meta')) {
    function mco_save_exam_program_meta($post_id) {
        if (!isset($_POST['mco_exam_nonce']) || !wp_verify_nonce($_POST['mco_exam_nonce'], 'mco_save_exam_meta') || (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE)) return;
        if (isset($_POST['mco_question_source_url'])) update_post_meta($post_id, '_mco_question_source_url', esc_url_raw($_POST['mco_question_source_url']));
        if (isset($_POST['mco_certification_exam_sku'])) update_post_meta($post_id, '_mco_certification_exam_sku', sanitize_text_field($_POST['mco_certification_exam_sku']));
    }
}

if (!function_exists('mco_render_book_links_meta_box')) {
    function mco_render_book_links_meta_box($post) {
        wp_nonce_field('mco_save_book_meta', 'mco_book_nonce');
        $link_com = get_post_meta($post->ID, '_mco_link_com', true); $link_in = get_post_meta($post->ID, '_mco_link_in', true); $link_ae = get_post_meta($post->ID, '_mco_link_ae', true);
        echo '<p><label>Amazon.com URL:</label><br><input type="url" name="mco_link_com" value="' . esc_attr($link_com) . '" style="width:100%;"></p>';
        echo '<p><label>Amazon.in URL:</label><br><input type="url" name="mco_link_in" value="' . esc_attr($link_in) . '" style="width:100%;"></p>';
        echo '<p><label>Amazon.ae URL:</label><br><input type="url" name="mco_link_ae" value="' . esc_attr($link_ae) . '" style="width:100%;"></p>';
    }
}

if (!function_exists('mco_save_book_meta_data')) {
    function mco_save_book_meta_data($post_id) {
        if (!isset($_POST['mco_book_nonce']) || !wp_verify_nonce($_POST['mco_book_nonce'], 'mco_save_book_meta') || (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE)) return;
        if (isset($_POST['mco_link_com'])) update_post_meta($post_id, '_mco_link_com', esc_url_raw($_POST['mco_link_com']));
        if (isset($_POST['mco_link_in'])) update_post_meta($post_id, '_mco_link_in', esc_url_raw($_POST['mco_link_in']));
        if (isset($_POST['mco_link_ae'])) update_post_meta($post_id, '_mco_link_ae', esc_url_raw($_POST['mco_link_ae']));
    }
}

if (!function_exists('mco_render_wc_product_meta_box')) {
    function mco_render_wc_product_meta_box($post) {
        wp_nonce_field('mco_save_wc_meta', 'mco_wc_nonce');
        $product_type = get_post_meta($post->ID, '_mco_product_type', true);
        echo '<label for="mco_product_type">Product Role:</label><select name="mco_product_type" id="mco_product_type" style="width:100%;"><option value="" ' . selected($product_type, '', false) . '>None</option><option value="certification_exam" ' . selected($product_type, 'certification_exam', false) . '>Certification Exam</option><option value="subscription_bundle" ' . selected($product_type, 'subscription_bundle', false) . '>Subscription / Bundle</option></select>';
    }
}

if (!function_exists('mco_save_wc_product_meta_data')) {
    function mco_save_wc_product_meta_data($post_id) {
        if (!isset($_POST['mco_wc_nonce']) || !wp_verify_nonce($_POST['mco_wc_nonce'], 'mco_save_wc_meta') || (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE)) return;
        if (isset($_POST['mco_product_type'])) update_post_meta($post_id, '_mco_product_type', sanitize_text_field($_POST['mco_product_type']));
    }
}

if (!function_exists('mco_get_default_certificate_templates')) {
    function mco_get_default_certificate_templates() {
        return [
            'cert-practice' => [
                'id' => 'cert-practice',
                'title' => 'Certificate of Proficiency',
                'body' => 'This certificate is proudly presented to {candidateName} for demonstrating proficiency in the {examName} with a final score of {finalScore} on {date}.',
                'signature1Name' => 'Program Director',
                'signature1Title' => 'Certification Authority',
                'signature1ImageUrl' => '',
                'signature2Name' => 'Lead Instructor',
                'signature2Title' => 'Training Department',
                'signature2ImageUrl' => ''
            ],
            'cert-completion' => [
                'id' => 'cert-completion',
                'title' => 'Certificate of Completion',
                'body' => 'This certificate is proudly presented to {candidateName} for successfully completing the {examName} with a final score of {finalScore} on {date}.',
                'signature1Name' => 'Program Director',
                'signature1Title' => 'Certification Authority',
                'signature1ImageUrl' => '',
                'signature2Name' => 'Lead Instructor',
                'signature2Title' => 'Training Department',
                'signature2ImageUrl' => ''
            ]
        ];
    }
}
?>