<?php
if (!defined('ABSPATH')) exit;

// Custom sanitizer to allow data URIs for images or sanitize as a URL
function mco_sanitize_data_uri_or_url($input) {
    // FIX: Add wp_unslash to prevent backslashes from being added to base64 strings on save.
    $unslashed_input = wp_unslash(trim($input));
    // Allow data URIs for common image types
    if (preg_match('/^data:image\/(svg\+xml|png|jpeg|gif|webp);base64,/', $unslashed_input)) {
        return $unslashed_input;
    }
    // For anything else, treat it as a URL and sanitize it.
    return esc_url_raw($unslashed_input);
}

// --- ADMIN MENU & HOOKS ---
function mco_add_admin_menu() {
    add_menu_page('Exam App Engine', 'Exam App Engine', 'manage_options', 'mco-exam-engine', 'mco_exam_engine_admin_page', 'dashicons-welcome-learn-more', 25);
    add_submenu_page('mco-exam-engine', 'Exam Programs', 'Exam Programs', 'manage_options', 'edit.php?post_type=mco_exam_program');
    add_submenu_page('mco-exam-engine', 'Recommended Books', 'Recommended Books', 'manage_options', 'edit.php?post_type=mco_recommended_book');
    add_submenu_page('mco-exam-engine', 'Settings & Tools', 'Settings & Tools', 'manage_options', 'mco-exam-engine', 'mco_exam_engine_admin_page');
}

function mco_register_admin_hooks() {
    add_action('admin_menu', 'mco_add_admin_menu');
    add_action('admin_enqueue_scripts', 'mco_admin_enqueue_scripts');
    add_action('admin_post_mco_bulk_import_csv', 'mco_handle_csv_upload');
    add_action('admin_post_mco_generate_tenant_blueprint', 'mco_handle_generate_tenant_blueprint');
    add_action('admin_post_mco_generate_full_snapshot', 'mco_handle_generate_full_snapshot');
    add_action('admin_post_mco_generate_programs_csv', 'mco_handle_generate_programs_csv');
    add_action('admin_post_mco_generate_products_csv', 'mco_handle_generate_products_csv');
}

// --- ADMIN PAGE RENDERING ---
function mco_admin_enqueue_scripts($hook) {
    $screen = get_current_screen();
    if (!$screen || ($screen->post_type !== 'mco_exam_program' && $screen->base !== 'toplevel_page_mco-exam-engine' && $screen->base !== 'exam-app-engine_page_mco-exam-engine')) {
        return;
    }
    wp_enqueue_style('mco-admin-styles', MCO_PLUGIN_URL . 'assets/mco-styles.css', [], MCO_PLUGIN_VERSION);
}

function mco_exam_engine_admin_page() {
    if (isset($_POST['mco_save_settings_nonce']) && wp_verify_nonce($_POST['mco_save_settings_nonce'], 'mco_save_settings')) {
        $form_action = isset($_POST['mco_form_action']) ? sanitize_text_field($_POST['mco_form_action']) : '';

        if ($form_action === 'save_main_settings') {
            update_option('mco_exam_app_url', sanitize_textarea_field($_POST['mco_exam_app_url']));
            update_option('mco_custom_logo_url', sanitize_textarea_field($_POST['mco_custom_logo_url']));
            update_option('mco_intro_video_url', esc_url_raw($_POST['mco_intro_video_url']));
            update_option('mco_subscriptions_enabled', isset($_POST['mco_subscriptions_enabled']) ? '1' : '0');
            update_option('mco_bundles_enabled', isset($_POST['mco_bundles_enabled']) ? '1' : '0');
            delete_transient('mco_app_config_data');
            update_option('mco_config_version', current_time('YmdHis'));
            echo '<div class="notice notice-success is-dismissible"><p>Settings saved and config cache cleared.</p></div>';

        } elseif ($form_action === 'save_theme_settings') {
            update_option('mco_active_theme_id', sanitize_text_field($_POST['mco_active_theme_id']));
            delete_transient('mco_app_config_data');
            update_option('mco_config_version', current_time('YmdHis'));
            echo '<div class="notice notice-success is-dismissible"><p>Theme settings saved.</p></div>';

        } elseif ($form_action === 'save_certificate_templates') {
            $templates_data = $_POST['mco_templates'] ?? [];
            $sanitized_templates = [];
            $existing_templates = get_option('mco_certificate_templates', mco_get_default_certificate_templates());

            foreach ($templates_data as $id => $template) {
                if (isset($template['delete']) && $template['delete'] === '1' && !in_array($id, ['cert-practice', 'cert-completion'])) {
                    continue;
                }

                $new_id = $id;
                if (strpos($id, 'new_template_') === 0 && isset($template['name']) && !empty($template['name'])) {
                    $base_id = 'cert-' . sanitize_title($template['name']);
                    $final_id = $base_id;
                    $counter = 2;
                    while (isset($sanitized_templates[$final_id]) || isset($existing_templates[$final_id])) {
                        $final_id = $base_id . '-' . $counter++;
                    }
                    $new_id = $final_id;
                }

                $sanitized_templates[$new_id] = [
                    'id' => $new_id,
                    'name' => isset($template['name']) ? sanitize_text_field($template['name']) : 'Untitled Template',
                    'title' => isset($template['title']) ? sanitize_text_field($template['title']) : '',
                    'body' => isset($template['body']) ? wp_kses_post($template['body']) : '',
                    'signature1Name' => isset($template['signature1Name']) ? sanitize_text_field($template['signature1Name']) : '',
                    'signature1Title' => isset($template['signature1Title']) ? sanitize_text_field($template['signature1Title']) : '',
                    'signature1ImageUrl' => isset($template['signature1ImageUrl']) ? mco_sanitize_data_uri_or_url($template['signature1ImageUrl']) : '',
                    'signature2Name' => isset($template['signature2Name']) ? sanitize_text_field($template['signature2Name']) : '',
                    'signature2Title' => isset($template['signature2Title']) ? sanitize_text_field($template['signature2Title']) : '',
                    'signature2ImageUrl' => isset($template['signature2ImageUrl']) ? mco_sanitize_data_uri_or_url($template['signature2ImageUrl']) : '',
                ];
            }
            update_option('mco_certificate_templates', $sanitized_templates);
            update_option('mco_certificate_theme_id', sanitize_text_field($_POST['mco_certificate_theme_id']));
            delete_transient('mco_app_config_data');
            update_option('mco_config_version', current_time('YmdHis'));
            echo '<div class="notice notice-success is-dismissible"><p>Certificate templates saved and cache cleared.</p></div>';
        
        } elseif ($form_action === 'clear_caches') {
             if (isset($_POST['clear_config_cache'])) {
                delete_transient('mco_app_config_data');
                update_option('mco_config_version', current_time('YmdHis'));
                echo '<div class="notice notice-success is-dismissible"><p>Application config cache cleared.</p></div>';
            }
            if (isset($_POST['clear_question_caches'])) {
                global $wpdb;
                $wpdb->query("DELETE FROM {$wpdb->options} WHERE option_name LIKE '\_transient\_mco\_sheet\_%' OR option_name LIKE '\_transient\_timeout\_mco\_sheet\_%'");
                echo '<div class="notice notice-success is-dismissible"><p>All question sheet caches cleared.</p></div>';
            }
        }
    }

    $active_tab = isset($_GET['tab']) ? $_GET['tab'] : 'main_settings';
    ?>
    <div class="wrap mco-admin-wrap">
        <h1>Settings & Tools</h1>
        <h2 class="nav-tab-wrapper">
            <a href="?page=mco-exam-engine&tab=main_settings" class="nav-tab <?php echo $active_tab == 'main_settings' ? 'nav-tab-active' : ''; ?>">Main Settings</a>
            <a href="?page=mco-exam-engine&tab=certificate_templates" class="nav-tab <?php echo $active_tab == 'certificate_templates' ? 'nav-tab-active' : ''; ?>">Certificate Templates</a>
            <a href="?page=mco-exam-engine&tab=theme_selector" class="nav-tab <?php echo $active_tab == 'theme_selector' ? 'nav-tab-active' : ''; ?>">Theme Selector</a>
            <a href="?page=mco-exam-engine&tab=bulk_data" class="nav-tab <?php echo $active_tab == 'bulk_data' ? 'nav-tab-active' : ''; ?>">Bulk Data</a>
            <a href="?page=mco-exam-engine&tab=tools" class="nav-tab <?php echo $active_tab == 'tools' ? 'nav-tab-active' : ''; ?>">Tools</a>
        </h2>
        <div class="tab-content" style="margin-top: 20px;">
            <?php
            $render_function_name = 'mco_render_' . $active_tab . '_tab';
            if (function_exists($render_function_name)) {
                call_user_func($render_function_name);
            }
            ?>
        </div>
    </div>
    <?php
}

function mco_render_main_settings_tab() { ?>
    <form method="post" action="?page=mco-exam-engine&tab=main_settings">
        <?php wp_nonce_field('mco_save_settings', 'mco_save_settings_nonce'); ?>
        <input type="hidden" name="mco_form_action" value="save_main_settings">
        <table class="form-table">
            <tr><th>App URL(s)</th><td><textarea name="mco_exam_app_url" rows="3" class="widefat"><?php echo esc_textarea(get_option('mco_exam_app_url')); ?></textarea><p class="description">Enter the full URL of your React app. Add multiple URLs on new lines for different environments.</p></td></tr>
            <tr><th>Custom Logo URL</th><td><textarea name="mco_custom_logo_url" class="widefat" rows="5"><?php echo esc_textarea(get_option('mco_custom_logo_url')); ?></textarea><p class="description">Optional. Can be a URL or a base64 data URI. If empty, uses the Site Icon from Customizer.</p></td></tr>
            <tr><th>Intro Video URL</th><td><input type="text" name="mco_intro_video_url" value="<?php echo esc_attr(get_option('mco_intro_video_url')); ?>" class="widefat"><p class="description">Optional. URL for the intro video on the landing page.</p></td></tr>
            <tr><th>JWT Secret Key</th><td><code><?php echo defined('MCO_JWT_SECRET') ? 'Defined in wp-config.php' : '<strong>Not Defined!</strong>'; ?></code><p class="description">You must define <code>MCO_JWT_SECRET</code> in your <code>wp-config.php</code> file.</p></td></tr>
            <tr><th colspan="2"><h4>Feature Toggles</h4></th></tr>
            <tr>
                <th><label for="mco_subscriptions_enabled">Enable Subscriptions</label></th>
                <td><input type="checkbox" id="mco_subscriptions_enabled" name="mco_subscriptions_enabled" value="1" <?php checked(get_option('mco_subscriptions_enabled', '1'), '1'); ?>>
                <p class="description">Show monthly/yearly subscription offers in the app. Requires the official WooCommerce Subscriptions plugin.</p></td>
            </tr>
            <tr>
                <th><label for="mco_bundles_enabled">Enable Bundle Products</label></th>
                <td><input type="checkbox" id="mco_bundles_enabled" name="mco_bundles_enabled" value="1" <?php checked(get_option('mco_bundles_enabled', '1'), '1'); ?>>
                <p class="description">Show product bundles (e.g., Exam + Subscription) in the app.</p></td>
            </tr>
        </table>
        <?php submit_button(); ?>
    </form>
<?php }

function mco_render_certificate_templates_tab() {
    $saved_templates = get_option('mco_certificate_templates');
    $templates = (empty($saved_templates) || !is_array($saved_templates)) ? mco_get_default_certificate_templates() : $saved_templates;
    $cert_theme = get_option('mco_certificate_theme_id', 'classic');
    ?>
    <form method="post" action="?page=mco-exam-engine&tab=certificate_templates">
        <?php wp_nonce_field('mco_save_settings', 'mco_save_settings_nonce'); ?>
        <input type="hidden" name="mco_form_action" value="save_certificate_templates">
        <h2>Certificate Templates</h2>
        <p>Customize the content of the certificates. Use placeholders like <code>{candidateName}</code>, <code>{examName}</code>, and <code>{finalScore}</code>.</p>
        
        <table class="form-table">
            <tr><th>Default Certificate Theme</th><td>
                <select name="mco_certificate_theme_id">
                    <option value="classic" <?php selected($cert_theme, 'classic'); ?>>Classic</option>
                    <option value="modern" <?php selected($cert_theme, 'modern'); ?>>Modern</option>
                </select>
                <p class="description">Select the default visual style for all certificates. You can preview any template with this theme below.</p>
            </td></tr>
        </table>

        <div id="mco-certificate-accordion">
            <?php foreach ($templates as $id => $template): 
                $is_default = in_array($id, ['cert-practice', 'cert-completion']);
            ?>
            <div class="mco-accordion-item" id="template-item-<?php echo esc_attr($id); ?>">
                <h3 class="mco-accordion-title"><?php echo esc_html($template['name'] ?? 'Untitled Template'); ?> <?php if ($is_default) echo '(Default)'; ?></h3>
                <div class="mco-accordion-content">
                    <input type="hidden" name="mco_templates[<?php echo esc_attr($id); ?>][delete]" value="0" class="delete-flag">
                    <table class="form-table">
                        <tr><th>Template Name</th><td><input type="text" class="widefat" name="mco_templates[<?php echo esc_attr($id); ?>][name]" value="<?php echo esc_attr($template['name'] ?? ''); ?>" <?php if ($is_default) echo 'readonly'; ?>></td></tr>
                        <tr><th>Title</th><td><input type="text" class="widefat" name="mco_templates[<?php echo esc_attr($id); ?>][title]" value="<?php echo esc_attr($template['title'] ?? ''); ?>"></td></tr>
                        <tr><th>Body Text</th><td><textarea class="widefat" rows="4" name="mco_templates[<?php echo esc_attr($id); ?>][body]"><?php echo esc_textarea($template['body'] ?? ''); ?></textarea></td></tr>
                        <tr><th>Signature 1 Name</th><td><input type="text" class="widefat" name="mco_templates[<?php echo esc_attr($id); ?>][signature1Name]" value="<?php echo esc_attr($template['signature1Name'] ?? ''); ?>"></td></tr>
                        <tr><th>Signature 1 Title</th><td><input type="text" class="widefat" name="mco_templates[<?php echo esc_attr($id); ?>][signature1Title]" value="<?php echo esc_attr($template['signature1Title'] ?? ''); ?>"></td></tr>
                        <tr><th>Signature 1 Image URL</th><td><textarea class="widefat" rows="5" name="mco_templates[<?php echo esc_attr($id); ?>][signature1ImageUrl]"><?php echo esc_textarea($template['signature1ImageUrl'] ?? ''); ?></textarea><p class="description">Optional. Use a URL or a base64 data URI for best results.</p></td></tr>
                        <tr><th>Signature 2 Name</th><td><input type="text" class="widefat" name="mco_templates[<?php echo esc_attr($id); ?>][signature2Name]" value="<?php echo esc_attr($template['signature2Name'] ?? ''); ?>"></td></tr>
                        <tr><th>Signature 2 Title</th><td><input type="text" class="widefat" name="mco_templates[<?php echo esc_attr($id); ?>][signature2Title]" value="<?php echo esc_attr($template['signature2Title'] ?? ''); ?>"></td></tr>
                        <tr><th>Signature 2 Image URL</th><td><textarea class="widefat" rows="5" name="mco_templates[<?php echo esc_attr($id); ?>][signature2ImageUrl]"><?php echo esc_textarea($template['signature2ImageUrl'] ?? ''); ?></textarea><p class="description">Optional.</p></td></tr>
                         <tr><th>Actions</th><td><a href="#" class="button mco-preview-cert" data-template-id="<?php echo esc_attr($id); ?>" target="_blank">Preview</a></td></tr>
                    </table>
                    <?php if (!$is_default): ?>
                        <p class="submit" style="padding:0; margin-top: 10px;">
                            <button type="button" class="button delete mco-delete-template">Delete Template</button>
                        </p>
                    <?php endif; ?>
                </div>
            </div>
            <?php endforeach; ?>
        </div>
        <div style="margin-top: 20px;">
            <button type="button" id="mco-add-template" class="button button-secondary">Add New Template</button>
        </div>
        <?php submit_button(); ?>
    </form>
    <script>
    jQuery(document).ready(function($) {
        var accordion = $('#mco-certificate-accordion');

        function updatePreviewLinks() {
            var appUrl = "<?php echo esc_js(mco_get_exam_app_url()); ?>";
            if (!appUrl) return;

            var themeId = $('select[name="mco_certificate_theme_id"]').val();
            
            $('.mco-preview-cert').each(function() {
                var templateId = $(this).data('template-id');
                var previewUrl = new URL(appUrl.split('\\n')[0].trim() + '/certificate/sample');
                previewUrl.searchParams.set('template_id', templateId);
                previewUrl.searchParams.set('theme_id', themeId);
                $(this).attr('href', previewUrl.toString());
            });
        }

        updatePreviewLinks();
        $('select[name="mco_certificate_theme_id"]').on('change', updatePreviewLinks);
        
        accordion.on('click', '.mco-accordion-title', function() {
            $(this).toggleClass('active');
            var content = $(this).next('.mco-accordion-content');
            if (content.css('max-height') !== '0px') {
                content.css('max-height', '0px');
            } else {
                content.css('max-height', content.get(0).scrollHeight + 'px');
            }
        });

        $('#mco-add-template').on('click', function() {
            var newId = 'new_template_' + Date.now();
            var newTemplateHtml = `
                <div class="mco-accordion-item" id="template-item-${newId}">
                    <h3 class="mco-accordion-title active">New Custom Template</h3>
                    <div class="mco-accordion-content" style="max-height: 1000px; padding: 15px;">
                        <input type="hidden" name="mco_templates[${newId}][delete]" value="0" class="delete-flag">
                        <table class="form-table">
                            <tr><th>Template Name</th><td><input type="text" class="widefat" name="mco_templates[${newId}][name]" value="New Custom Template"></td></tr>
                            <tr><th>Title</th><td><input type="text" class="widefat" name="mco_templates[${newId}][title]" value="Certificate of Completion"></td></tr>
                            <tr><th>Body Text</th><td><textarea class="widefat" rows="4" name="mco_templates[${newId}][body]"></textarea></td></tr>
                            <tr><th>Signature 1 Name</th><td><input type="text" class="widefat" name="mco_templates[${newId}][signature1Name]" value=""></td></tr>
                            <tr><th>Signature 1 Title</th><td><input type="text" class="widefat" name="mco_templates[${newId}][signature1Title]" value=""></td></tr>
                            <tr><th>Signature 1 Image URL</th><td><textarea class="widefat" rows="5" name="mco_templates[${newId}][signature1ImageUrl]"></textarea></td></tr>
                            <tr><th>Signature 2 Name</th><td><input type="text" class="widefat" name="mco_templates[${newId}][signature2Name]" value=""></td></tr>
                            <tr><th>Signature 2 Title</th><td><input type="text" class="widefat" name="mco_templates[${newId}][signature2Title]" value=""></td></tr>
                            <tr><th>Signature 2 Image URL</th><td><textarea class="widefat" rows="5" name="mco_templates[${newId}][signature2ImageUrl]"></textarea></td></tr>
                            <tr><th>Actions</th><td><a href="#" class="button mco-preview-cert" data-template-id="${newId}" target="_blank">Preview</a></td></tr>
                        </table>
                        <p class="submit" style="padding:0; margin-top: 10px;">
                            <button type="button" class="button delete mco-delete-template">Delete Template</button>
                        </p>
                    </div>
                </div>`;
            accordion.append(newTemplateHtml);
            updatePreviewLinks();
        });

        accordion.on('click', '.mco-delete-template', function() {
            if (confirm('Are you sure you want to delete this template? This cannot be undone.')) {
                var item = $(this).closest('.mco-accordion-item');
                item.find('.delete-flag').val('1');
                item.slideUp();
            }
        });
    });
    </script>
<?php }

function mco_render_theme_selector_tab() {
    $themes = [
        ['id' => 'default', 'name' => 'Cyberpunk'],
        ['id' => 'professional', 'name' => 'Professional'],
        ['id' => 'serene', 'name' => 'Serene'],
        ['id' => 'academic', 'name' => 'Academic'],
        ['id' => 'noir', 'name' => 'Noir'],
    ];
    $active_theme = get_option('mco_active_theme_id', 'default');
    ?>
    <form method="post" action="?page=mco-exam-engine&tab=theme_selector">
        <?php wp_nonce_field('mco_save_settings', 'mco_save_settings_nonce'); ?>
        <input type="hidden" name="mco_form_action" value="save_theme_settings">
        <h2>Application Theme</h2><p>Select the default visual theme for the exam application.</p>
        <div class="mco-theme-selector-grid">
            <?php foreach ($themes as $theme): ?>
                <label class="mco-theme-card <?php echo $active_theme === $theme['id'] ? 'mco-theme-card--selected' : ''; ?>">
                    <input type="radio" name="mco_active_theme_id" value="<?php echo esc_attr($theme['id']); ?>" class="mco-theme-radio" <?php checked($active_theme, $theme['id']); ?>>
                    <div class="mco-theme-swatches">
                        <div class="mco-theme-swatch theme-swatch-<?php echo esc_attr($theme['id']); ?>-primary"></div>
                        <div class="mco-theme-swatch theme-swatch-<?php echo esc_attr($theme['id']); ?>-secondary"></div>
                        <div class="mco-theme-swatch theme-swatch-<?php echo esc_attr($theme['id']); ?>-accent"></div>
                        <div class="mco-theme-swatch theme-swatch-<?php echo esc_attr($theme['id']); ?>-background"></div>
                    </div>
                    <p class="mco-theme-name"><?php echo esc_html($theme['name']); ?></p>
                </label>
            <?php endforeach; ?>
        </div>
        <?php submit_button(); ?>
    </form>
<?php }
function mco_render_bulk_data_tab() { ?>
    <h2>Bulk Data Import & Export</h2>
    <p>Use these tools to manage your exam content in bulk using CSV files.</p>
    <h3 style="margin-top: 2rem;">Step 1: Export Data (Optional)</h3>
    <p>Generate CSV files from your existing content for bulk editing.</p>
    <table class="form-table">
        <tr>
            <th>Export Exam Programs</th>
            <td>
                <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>">
                    <input type="hidden" name="action" value="mco_generate_programs_csv">
                    <?php wp_nonce_field('mco_generate_programs_csv_nonce'); ?>
                    <?php submit_button('Generate & Download Programs CSV', 'secondary', 'submit_generate_programs_csv', false); ?>
                </form>
            </td>
        </tr>
        <tr>
            <th>Export WooCommerce Products</th>
            <td>
                <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>">
                    <input type="hidden" name="action" value="mco_generate_products_csv">
                    <?php wp_nonce_field('mco_generate_products_csv_nonce'); ?>
                    <?php submit_button('Generate & Download Products CSV', 'secondary', 'submit_generate_products_csv', false); ?>
                </form>
            </td>
        </tr>
    </table>
    <h3 style="margin-top: 2rem;">Step 2: Import Data</h3>
    <p>Upload a CSV file to create or update multiple Exam Programs or Recommended Books at once.</p>
    <?php 
    if (isset($_GET['import_status'])) {
        $status = sanitize_text_field($_GET['import_status']);
        $message = isset($_GET['message']) ? sanitize_text_field(urldecode($_GET['message'])) : 'An unknown error occurred.';
        if ($status === 'success') {
            echo '<div class="notice notice-success is-dismissible"><p>' . esc_html($message) . '</p></div>';
        } else {
            echo '<div class="notice notice-error is-dismissible"><p>' . esc_html($message) . '</p></div>';
        }
    } 
    ?>
    <h4>Import Exam Programs</h4>
    <p>Required columns: <code>program_title, program_description, question_source_url, certification_exam_sku, is_proctored, certificate_enabled, recommended_book_id, practice_questions, practice_duration, cert_questions, cert_duration, pass_score, status</code></p>
    <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>" enctype="multipart/form-data">
        <input type="hidden" name="action" value="mco_bulk_import_csv"><input type="hidden" name="import_type" value="exam_programs"><?php wp_nonce_field('mco_bulk_import_csv_nonce', 'mco_bulk_import_csv_nonce'); ?>
        <table class="form-table"><tr><th>Exam Programs CSV File</th><td><input type="file" name="csv_file" accept=".csv" required></td></tr></table>
        <?php submit_button('Import Exam Programs'); ?>
    </form>
    <hr>
    <h4>Import Recommended Books</h4>
    <p>Required columns: <code>book_id, title, description, thumbnail_url, link_com, link_in, link_ae, status</code></p>
    <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>" enctype="multipart/form-data">
        <input type="hidden" name="action" value="mco_bulk_import_csv"><input type="hidden" name="import_type" value="recommended_books"><?php wp_nonce_field('mco_bulk_import_csv_nonce', 'mco_bulk_import_csv_nonce'); ?>
        <table class="form-table"><tr><th>Recommended Books CSV File</th><td><input type="file" name="csv_file" accept=".csv" required></td></tr></table>
        <?php submit_button('Import Recommended Books'); ?>
    </form>
<?php }
function mco_render_tools_tab() {
    $is_blueprint_ready = !empty(get_option('mco_exam_app_url')) && !empty(get_option('mco_certificate_templates'));
    ?>
    <h2>Maintenance Tools</h2>
    <form method="post" action="?page=mco-exam-engine&tab=tools">
        <?php wp_nonce_field('mco_save_settings', 'mco_save_settings_nonce'); ?>
        <input type="hidden" name="mco_form_action" value="clear_caches">
        <table class="form-table">
            <tr><th>Clear Application Config Cache</th><td>
                <button type="submit" name="clear_config_cache" class="button">Clear Config Cache</button>
                <p class="description">Forces the app to fetch the latest settings, exams, and books. Use after making content changes.</p>
            </td></tr>
            <tr><th>Clear Question Sheet Caches</th><td>
                <button type="submit" name="clear_question_caches" class="button">Clear All Question Caches</button>
                <p class="description">Forces the server to re-fetch questions from all Google Sheets. Use after updating questions.</p>
            </td></tr>
        </table>
    </form>
    <hr>
    <h2>Onboarding & Backup Tools</h2>
    <table class="form-table">
         <tr><th>Generate Tenant Blueprint</th><td>
            <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>">
                <input type="hidden" name="action" value="mco_generate_tenant_blueprint">
                <?php wp_nonce_field('mco_generate_tenant_blueprint_nonce'); ?>
                <button type="submit" class="button" <?php disabled(!$is_blueprint_ready); ?>>Generate & Download Blueprint</button>
                <p class="description">Generates a JSON config file for onboarding a new tenant. <?php if(!$is_blueprint_ready) echo '<strong>Requires App URL and Certificate settings to be saved first.</strong>'; ?></p>
            </form>
        </td></tr>
        <tr><th>Generate Full Content Snapshot</th><td>
            <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>">
                <input type="hidden" name="action" value="mco_generate_full_snapshot">
                <?php wp_nonce_field('mco_generate_full_snapshot_nonce'); ?>
                <?php submit_button('Generate & Download Snapshot', 'secondary', 'submit_generate_snapshot', false); ?>
                <p class="description">Creates a complete JSON backup of all current content and settings for performance optimization or migration.</p>
            </form>
        </td></tr>
    </table>
<?php }
// --- Handlers for Bulk CSV Export ---
function mco_handle_generate_programs_csv() {
    if (!current_user_can('manage_options') || !isset($_POST['_wpnonce']) || !wp_verify_nonce($_POST['_wpnonce'], 'mco_generate_programs_csv_nonce')) {
        wp_die('Security check failed.');
    }

    $programs = get_posts(['post_type' => 'mco_exam_program', 'posts_per_page' => -1, 'post_status' => ['publish', 'draft', 'pending']]);
    $csv_headers = ['program_title', 'program_description', 'question_source_url', 'certification_exam_sku', 'is_proctored', 'certificate_enabled', 'recommended_book_id', 'practice_questions', 'practice_duration', 'cert_questions', 'cert_duration', 'pass_score', 'status'];
    
    header('Content-Type: text/csv');
    header('Content-Disposition: attachment; filename="exam_programs_export_' . date('Y-m-d') . '.csv"');
    $output = fopen('php://output', 'w');
    fputcsv($output, $csv_headers);

    foreach ($programs as $program) {
        $book_post_ids = get_post_meta($program->ID, '_mco_recommended_book_ids', true) ?: [];
        $book_slugs = [];
        if (is_array($book_post_ids)) {
            foreach ($book_post_ids as $book_post_id) {
                $custom_id = get_post_meta($book_post_id, '_mco_book_id', true);
                if ($custom_id) $book_slugs[] = $custom_id;
            }
        }
        $row = [
            'program_title' => $program->post_title,
            'program_description' => $program->post_content,
            'question_source_url' => get_post_meta($program->ID, '_mco_question_source_url', true),
            'certification_exam_sku' => get_post_meta($program->ID, '_mco_certification_exam_sku', true),
            'is_proctored' => get_post_meta($program->ID, '_mco_is_proctored', true) ? '1' : '0',
            'certificate_enabled' => get_post_meta($program->ID, '_mco_certificate_enabled', true) ? '1' : '0',
            'recommended_book_id' => implode(', ', $book_slugs),
            'practice_questions' => mco_get_single_term($program->ID, 'exam_practice_questions'),
            'practice_duration' => mco_get_single_term($program->ID, 'exam_practice_duration'),
            'cert_questions' => mco_get_single_term($program->ID, 'exam_cert_questions'),
            'cert_duration' => mco_get_single_term($program->ID, 'exam_cert_duration'),
            'pass_score' => mco_get_single_term($program->ID, 'exam_pass_score'),
            'status' => $program->post_status,
        ];
        fputcsv($output, $row);
    }
    fclose($output);
    exit;
}
function mco_handle_generate_products_csv() {
    if (!current_user_can('manage_options') || !isset($_POST['_wpnonce']) || !wp_verify_nonce($_POST['_wpnonce'], 'mco_generate_products_csv_nonce')) {
        wp_die('Security check failed.');
    }
    
    $programs = get_posts(['post_type' => 'mco_exam_program', 'posts_per_page' => -1, 'post_status' => 'publish']);
    $csv_headers = ['Type', 'SKU', 'Name', 'Published', 'Virtual', 'Regular price', 'Sale price'];
    
    header('Content-Type: text/csv');
    header('Content-Disposition: attachment; filename="woocommerce_products_from_programs_' . date('Y-m-d') . '.csv"');
    $output = fopen('php://output', 'w');
    fputcsv($output, $csv_headers);
    foreach ($programs as $program) {
        $sku = get_post_meta($program->ID, '_mco_certification_exam_sku', true);
        if ($sku) {
             $row = [
                'Type' => 'simple',
                'SKU' => $sku,
                'Name' => $program->post_title . ' Certification',
                'Published' => 1,
                'Virtual' => 1,
                'Regular price' => '49.99',
                'Sale price' => '',
            ];
            fputcsv($output, $row);
        }
    }
    fclose($output);
    exit;
}
function mco_handle_generate_tenant_blueprint() {
    if (!current_user_can('manage_options')) wp_die('Permission denied.');
    $snapshot_data = mco_get_full_snapshot_data(true); // true for blueprint
    header('Content-Type: application/json');
    header('Content-Disposition: attachment; filename="tenant-blueprint-' . sanitize_title(get_bloginfo('name')) . '.json"');
    echo json_encode($snapshot_data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
    exit;
}
function mco_handle_generate_full_snapshot() {
    if (!current_user_can('manage_options')) wp_die('Permission denied.');
    $snapshot_data = mco_get_full_snapshot_data(false); // false for full snapshot
    header('Content-Type: application/json');
    header('Content-Disposition: attachment; filename="content-snapshot-' . sanitize_title(get_bloginfo('name')) . '-' . date('Y-m-d') . '.json"');
    echo json_encode($snapshot_data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
    exit;
}

// --- NEWLY IMPLEMENTED: Bulk CSV Upload Handler ---
function mco_handle_csv_upload() {
    if (!current_user_can('manage_options') || !isset($_POST['mco_bulk_import_csv_nonce']) || !wp_verify_nonce($_POST['mco_bulk_import_csv_nonce'], 'mco_bulk_import_csv_nonce')) {
        wp_die('Security check failed.');
    }

    if (empty($_FILES['csv_file']['tmp_name'])) {
        wp_redirect(admin_url('admin.php?page=mco-exam-engine&tab=bulk_data&import_status=error&message=' . urlencode('No file uploaded.')));
        exit;
    }

    $import_type = sanitize_text_field($_POST['import_type']);
    $file_path = $_FILES['csv_file']['tmp_name'];
    
    // Read the file and handle BOM
    $file_content = file_get_contents($file_path);
    $file_content = preg_replace('/^\xEF\xBB\xBF/', '', $file_content); // Remove UTF-8 BOM
    $csv_data = array_map('str_getcsv', preg_split('/\r\n|\r|\n/', $file_content));

    $headers = array_shift($csv_data);
    $success_count = 0;
    $error_count = 0;
    $errors = [];

    if ($import_type === 'exam_programs') {
        foreach ($csv_data as $index => $row) {
            if (count($headers) !== count($row)) continue;
            $row_data = array_combine($headers, $row);
            
            $post_id = 0;
            $existing_post = get_page_by_title($row_data['program_title'], OBJECT, 'mco_exam_program');
            if ($existing_post) $post_id = $existing_post->ID;

            $post_arr = [
                'post_title'   => sanitize_text_field($row_data['program_title']),
                'post_content' => wp_kses_post($row_data['program_description']),
                'post_type'    => 'mco_exam_program',
                'post_status'  => sanitize_text_field($row_data['status'] ?? 'publish'),
            ];
            
            if ($post_id) {
                $post_arr['ID'] = $post_id;
                wp_update_post($post_arr);
            } else {
                $post_id = wp_insert_post($post_arr);
            }

            if ($post_id && !is_wp_error($post_id)) {
                update_post_meta($post_id, '_mco_question_source_url', esc_url_raw($row_data['question_source_url']));
                update_post_meta($post_id, '_mco_certification_exam_sku', sanitize_text_field($row_data['certification_exam_sku']));
                update_post_meta($post_id, '_mco_is_proctored', ($row_data['is_proctored'] == '1') ? '1' : '0');
                update_post_meta($post_id, '_mco_certificate_enabled', ($row_data['certificate_enabled'] == '1') ? '1' : '0');

                wp_set_object_terms($post_id, (int)$row_data['practice_questions'], 'exam_practice_questions');
                wp_set_object_terms($post_id, (int)$row_data['practice_duration'], 'exam_practice_duration');
                wp_set_object_terms($post_id, (int)$row_data['cert_questions'], 'exam_cert_questions');
                wp_set_object_terms($post_id, (int)$row_data['cert_duration'], 'exam_cert_duration');
                wp_set_object_terms($post_id, (int)$row_data['pass_score'], 'exam_pass_score');
                
                if (!empty($row_data['recommended_book_id'])) {
                    $book_slugs = array_map('trim', explode(',', $row_data['recommended_book_id']));
                    $book_post_ids = [];
                    foreach ($book_slugs as $slug) {
                        $book_query = new WP_Query(['post_type' => 'mco_recommended_book', 'meta_key' => '_mco_book_id', 'meta_value' => $slug, 'posts_per_page' => 1, 'fields' => 'ids']);
                        if ($book_query->have_posts()) $book_post_ids[] = $book_query->posts[0];
                    }
                    update_post_meta($post_id, '_mco_recommended_book_ids', $book_post_ids);
                }
                $success_count++;
            } else {
                $error_count++;
            }
        }
    } elseif ($import_type === 'recommended_books') {
        foreach ($csv_data as $index => $row) {
            if (count($headers) !== count($row)) continue;
            $row_data = array_combine($headers, $row);

            $book_id = sanitize_text_field($row_data['book_id']);
            $post_id = 0;
            if ($book_id) {
                $book_query = new WP_Query(['post_type' => 'mco_recommended_book', 'meta_key' => '_mco_book_id', 'meta_value' => $book_id, 'posts_per_page' => 1, 'fields' => 'ids']);
                if ($book_query->have_posts()) $post_id = $book_query->posts[0];
            }
            
            $post_arr = [
                'post_title' => sanitize_text_field($row_data['title']),
                'post_content' => wp_kses_post($row_data['description']),
                'post_type' => 'mco_recommended_book',
                'post_status' => sanitize_text_field($row_data['status'] ?? 'publish'),
            ];

            if ($post_id) {
                $post_arr['ID'] = $post_id;
                wp_update_post($post_arr);
            } else {
                $post_id = wp_insert_post($post_arr);
            }
            
            if ($post_id && !is_wp_error($post_id)) {
                update_post_meta($post_id, '_mco_book_id', $book_id);
                update_post_meta($post_id, '_mco_thumbnail_url', esc_url_raw($row_data['thumbnail_url']));
                update_post_meta($post_id, '_mco_link_com', esc_url_raw($row_data['link_com']));
                update_post_meta($post_id, '_mco_link_in', esc_url_raw($row_data['link_in']));
                update_post_meta($post_id, '_mco_link_ae', esc_url_raw($row_data['link_ae']));
                $success_count++;
            } else {
                $error_count++;
            }
        }
    }

    delete_transient('mco_app_config_data');
    update_option('mco_config_version', current_time('YmdHis'));

    $message = urlencode("Import complete. {$success_count} rows processed successfully. {$error_count} rows failed.");
    wp_redirect(admin_url("admin.php?page=mco-exam-engine&tab=bulk_data&import_status=success&message={$message}"));
    exit;
}

?>