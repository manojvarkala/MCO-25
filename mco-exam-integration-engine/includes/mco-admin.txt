<?php
if (!defined('ABSPATH')) exit;

// --- ADMIN MENU & PAGE ---

if (!function_exists('mco_register_admin_hooks')) {
    function mco_register_admin_hooks() {
        add_action('admin_menu', 'mco_add_admin_menu');
        add_action('admin_enqueue_scripts', 'mco_admin_enqueue_styles');
        // Action to handle CSV upload form submission
        add_action('admin_post_mco_bulk_import_csv', 'mco_handle_csv_upload');
    }
}

if (!function_exists('mco_add_admin_menu')) {
    function mco_add_admin_menu() {
        add_menu_page(
            'Exam App Engine',
            'Exam App Engine',
            'manage_options',
            'mco-exam-engine',
            'mco_exam_engine_admin_page',
            'dashicons-awards',
            25
        );
        add_submenu_page('mco-exam-engine', 'Exam Programs', 'Exam Programs', 'manage_options', 'edit.php?post_type=mco_exam_program');
        add_submenu_page('mco-exam-engine', 'Recommended Books', 'Recommended Books', 'manage_options', 'edit.php?post_type=mco_recommended_book');
        add_submenu_page('mco-exam-engine', 'Certificate Templates', 'Certificate Templates', 'manage_options', 'mco-exam-engine&tab=certificate_templates');
    }
}

if (!function_exists('mco_admin_enqueue_styles')) {
    function mco_admin_enqueue_styles($hook) {
        if ($hook !== 'toplevel_page_mco-exam-engine') {
            return;
        }
        ?>
        <style>
            .mco-admin-wrap { max-width: 960px; }
            .mco-admin-wrap h1 { margin-bottom: 20px; }
            .mco-admin-wrap .nav-tab { font-size: 14px; }
            .mco-admin-wrap .form-table th { width: 200px; }
            .mco-admin-wrap .form-table td input[type="text"], .mco-admin-wrap .form-table td textarea { width: 100%; max-width: 500px; }
            .mco-admin-wrap .form-table td textarea { height: 100px; }
            .mco-admin-wrap .notice-success { border-left-color: #4CAF50; }
            .mco-admin-wrap .notice-error { border-left-color: #F44336; }
            .mco-admin-wrap .notice-warning { border-left-color: #FFC107; }
            .mco-feedback-box { background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 4px; padding: 15px; margin-top: 20px; max-height: 400px; overflow-y: auto; font-family: monospace; font-size: 13px; }
            .mco-feedback-box.full-height { max-height: none; }
            .mco-feedback-box ul { margin: 0; padding-left: 20px; }
            .mco-feedback-box li.error { color: #dc3545; }
            .mco-feedback-box li.success { color: #28a745; }
        </style>
        <?php
    }
}

if (!function_exists('mco_exam_engine_admin_page')) {
    function mco_exam_engine_admin_page() {
        $active_tab = isset($_GET['tab']) ? $_GET['tab'] : 'main_settings';
        ?>
        <div class="wrap mco-admin-wrap">
            <h1>Exam App Engine Settings</h1>
            <nav class="nav-tab-wrapper">
                <a href="?page=mco-exam-engine&tab=main_settings" class="nav-tab <?php echo $active_tab == 'main_settings' ? 'nav-tab-active' : ''; ?>">Main Settings</a>
                <a href="?page=mco-exam-engine&tab=bulk_import" class="nav-tab <?php echo $active_tab == 'bulk_import' ? 'nav-tab-active' : ''; ?>">Bulk Import</a>
                <a href="?page=mco-exam-engine&tab=certificate_templates" class="nav-tab <?php echo $active_tab == 'certificate_templates' ? 'nav-tab-active' : ''; ?>">Certificate Templates</a>
            </nav>
            <div class="tab-content">
                <?php
                if ($active_tab == 'main_settings') {
                    mco_render_main_settings_tab();
                } elseif ($active_tab == 'bulk_import') {
                    mco_render_bulk_import_tab();
                } elseif ($active_tab == 'certificate_templates') {
                    mco_render_certificate_templates_tab();
                }
                ?>
            </div>
        </div>
        <?php
    }
}

function mco_render_main_settings_tab() {
    if (isset($_POST['mco_save_settings_nonce']) && wp_verify_nonce($_POST['mco_save_settings_nonce'], 'mco_save_settings')) {
        update_option('mco_exam_app_url', sanitize_textarea_field($_POST['mco_exam_app_url']));
        update_option('mco_logo_url', esc_url_raw($_POST['mco_logo_url']));
        update_option('mco_is_spin_wheel_enabled', isset($_POST['mco_is_spin_wheel_enabled']) ? 1 : 0);
        
        // Clear config cache on save
        delete_transient('mco_app_config_data');
        update_option('mco_config_version', current_time('YmdHis')); // Bust client cache
        echo '<div class="notice notice-success is-dismissible"><p>Settings saved and cache cleared.</p></div>';
    }
    ?>
    <form method="post" action="">
        <?php wp_nonce_field('mco_save_settings', 'mco_save_settings_nonce'); ?>
        <table class="form-table">
            <tr valign="top">
                <th scope="row">Exam Application URL(s)</th>
                <td>
                    <textarea name="mco_exam_app_url"><?php echo esc_textarea(get_option('mco_exam_app_url')); ?></textarea>
                    <p class="description">Enter the full URL of your React exam app. Add multiple URLs on new lines if needed (e.g., for different environments like Vercel previews).</p>
                </td>
            </tr>
             <tr valign="top">
                <th scope="row">Custom Logo URL</th>
                <td>
                    <input type="text" name="mco_logo_url" value="<?php echo esc_attr(get_option('mco_logo_url')); ?>" />
                    <p class="description">Optional. Enter the full URL to a custom logo. If empty, it will use the Site Icon from Customizer.</p>
                </td>
            </tr>
            <tr valign="top">
                <th scope="row">Enable "Spin & Win"</th>
                <td>
                    <input type="checkbox" name="mco_is_spin_wheel_enabled" value="1" <?php checked(1, get_option('mco_is_spin_wheel_enabled', 0)); ?> />
                    <label for="mco_is_spin_wheel_enabled">Enable the gamified prize wheel for users.</label>
                </td>
            </tr>
            <tr valign="top">
                <th scope="row">JWT Secret Key</th>
                <td>
                    <code><?php echo defined('MCO_JWT_SECRET') ? 'Defined in wp-config.php' : '<strong>Not Defined!</strong>'; ?></code>
                    <p class="description">For security, you must define <code>MCO_JWT_SECRET</code> in your <code>wp-config.php</code> file. e.g., <code>define('MCO_JWT_SECRET', 'your-long-random-secret-key');</code></p>
                </td>
            </tr>
        </table>
        <?php submit_button(); ?>
    </form>
    <?php
}

function mco_render_bulk_import_tab() {
    ?>
    <h2>Bulk Import via CSV</h2>
    <p>Upload a CSV file to create or update multiple Exam Programs or Recommended Books at once. Ensure your file matches the required format.</p>
    
    <?php
    if (isset($_GET['import_status'])) {
        $status = sanitize_text_field($_GET['import_status']);
        $feedback_html = get_transient('mco_import_feedback');
        delete_transient('mco_import_feedback');

        if ($status === 'success' && $feedback_html) {
            echo '<div class="notice notice-success is-dismissible"><p>CSV import processed.</p></div>';
            echo '<div class="mco-feedback-box full-height">' . wp_kses_post($feedback_html) . '</div>';
        } elseif ($status === 'error' && $feedback_html) {
            echo '<div class="notice notice-error is-dismissible"><p>CSV import failed.</p></div>';
            echo '<div class="mco-feedback-box full-height">' . wp_kses_post($feedback_html) . '</div>';
        }
    }
    ?>

    <h3>Import Exam Programs</h3>
    <p>Required columns: <code>program_title, program_description, question_source_url, certification_exam_sku, is_proctored, recommended_book_id, practice_questions, practice_duration, cert_questions, cert_duration, pass_score, status</code></p>
    <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>" enctype="multipart/form-data">
        <input type="hidden" name="action" value="mco_bulk_import_csv">
        <input type="hidden" name="import_type" value="exam_programs">
        <?php wp_nonce_field('mco_bulk_import_csv_nonce', 'mco_bulk_import_csv_nonce'); ?>
        <table class="form-table">
            <tr valign="top">
                <th scope="row">Exam Programs CSV File</th>
                <td><input type="file" name="csv_file" accept=".csv" required></td>
            </tr>
        </table>
        <?php submit_button('Import Exam Programs'); ?>
    </form>

    <hr>

    <h3>Import Recommended Books</h3>
    <p>Required columns: <code>book_id, title, description, thumbnail_url, link_com, link_in, link_ae, status</code></p>
    <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>" enctype="multipart/form-data">
        <input type="hidden" name="action" value="mco_bulk_import_csv">
        <input type="hidden" name="import_type" value="recommended_books">
        <?php wp_nonce_field('mco_bulk_import_csv_nonce', 'mco_bulk_import_csv_nonce'); ?>
        <table class="form-table">
            <tr valign="top">
                <th scope="row">Recommended Books CSV File</th>
                <td><input type="file" name="csv_file" accept=".csv" required></td>
            </tr>
        </table>
        <?php submit_button('Import Recommended Books'); ?>
    </form>
    <?php
}

function mco_handle_csv_upload() {
    if (!isset($_POST['mco_bulk_import_csv_nonce']) || !wp_verify_nonce($_POST['mco_bulk_import_csv_nonce'], 'mco_bulk_import_csv_nonce')) {
        wp_die('Security check failed');
    }
    if (empty($_FILES['csv_file']['tmp_name'])) {
        set_transient('mco_import_feedback', '<p class="error">No file uploaded.</p>', 60);
        wp_redirect(admin_url('admin.php?page=mco-exam-engine&tab=bulk_import&import_status=error'));
        exit;
    }

    $import_type = sanitize_text_field($_POST['import_type']);
    $file_path = $_FILES['csv_file']['tmp_name'];

    if ($import_type === 'exam_programs') {
        $feedback = mco_process_csv_import($file_path);
    } elseif ($import_type === 'recommended_books') {
        $feedback = mco_process_books_csv_import($file_path);
    } else {
        $feedback = '<p class="error">Invalid import type specified.</p>';
    }

    set_transient('mco_import_feedback', $feedback, 60);
    wp_redirect(admin_url('admin.php?page=mco-exam-engine&tab=bulk_import&import_status=success'));
    exit;
}

function mco_process_csv_import($file_path) {
    if (!is_file($file_path)) { return '<p class="error">File not found.</p>'; }
    $handle = fopen($file_path, "r");
    if ($handle === FALSE) { return '<p class="error">Could not open file.</p>'; }

    $headers = array_map('trim', fgetcsv($handle, 1000, ","));
    $required_headers = ['program_title', 'program_description', 'question_source_url', 'certification_exam_sku', 'is_proctored', 'recommended_book_id', 'practice_questions', 'practice_duration', 'cert_questions', 'cert_duration', 'pass_score', 'status'];
    
    if (count(array_intersect($required_headers, $headers)) !== count($required_headers)) {
        return '<p class="error">CSV headers do not match the required format. Missing: ' . implode(', ', array_diff($required_headers, $headers)) . '</p>';
    }

    $created_count = 0; $updated_count = 0; $skipped_count = 0;
    $errors = []; $row_num = 1;

    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $row_num++;
        $row = array_combine($headers, $data);
        
        $program_title = sanitize_text_field($row['program_title']);
        if (empty($program_title)) { $skipped_count++; continue; }

        $post_data = [
            'post_title' => $program_title,
            'post_content' => wp_kses_post($row['program_description']),
            'post_type' => 'mco_exam_program',
            'post_status' => sanitize_text_field($row['status']),
        ];

        $existing_post = get_page_by_title($program_title, OBJECT, 'mco_exam_program');
        $post_id = 0;

        if ($existing_post) {
            $post_id = $existing_post->ID;
            $post_data['ID'] = $post_id;
            $result = wp_update_post($post_data, true);
            
            if (is_wp_error($result)) {
                $errors[] = "Failed to process '{$program_title}': " . $result->get_error_message();
            } else {
                $updated_count++;
            }
        } else {
            $result = wp_insert_post($post_data, true);
            if (is_wp_error($result)) {
                $errors[] = "Failed to create '{$program_title}': " . $result->get_error_message();
            } else {
                $post_id = $result;
                $created_count++;
            }
        }

        if ($post_id > 0 && !is_wp_error($result)) {
            $taxonomies = [
                'exam_practice_questions' => 'practice_questions',
                'exam_practice_duration'  => 'practice_duration',
                'exam_cert_questions'     => 'cert_questions',
                'exam_cert_duration'      => 'cert_duration',
                'exam_pass_score'         => 'pass_score',
            ];
            foreach($taxonomies as $tax_slug => $csv_key) {
                wp_set_post_terms($post_id, sanitize_text_field($row[$csv_key]), $tax_slug, false);
            }

            update_post_meta($post_id, '_mco_certification_exam_sku', sanitize_text_field($row['certification_exam_sku']));
            update_post_meta($post_id, '_mco_question_source_url', esc_url_raw($row['question_source_url']));
            update_post_meta($post_id, '_mco_is_proctored', intval($row['is_proctored']));
            
            $book_slugs = array_map('trim', explode(',', $row['recommended_book_id']));
            $book_post_ids = [];
            foreach($book_slugs as $slug) {
                if (empty($slug)) continue;
                $book_query = new WP_Query([
                    'post_type' => 'mco_recommended_book',
                    'meta_key' => '_mco_book_id',
                    'meta_value' => $slug,
                    'posts_per_page' => 1,
                    'fields' => 'ids'
                ]);
                if ($book_query->have_posts()) {
                    $book_post_ids[] = $book_query->posts[0];
                }
            }
            update_post_meta($post_id, '_mco_recommended_book_ids', $book_post_ids);
        }
    }
    fclose($handle);
    
    delete_transient('mco_app_config_data');
    update_option('mco_config_version', current_time('YmdHis'));

    $feedback = '<ul>';
    $feedback .= '<li class="success">Import complete.</li>';
    $feedback .= '<li class="success">Created: ' . $created_count . '</li>';
    $feedback .= '<li class="success">Updated: ' . $updated_count . '</li>';
    $feedback .= '<li class="success">Skipped: ' . $skipped_count . '</li>';
    $feedback .= '<li class="error">Failed: ' . count($errors) . '</li>';
    foreach($errors as $error) { $feedback .= '<li class="error">' . esc_html($error) . '</li>'; }
    $feedback .= '</ul>';

    return $feedback;
}

function mco_process_books_csv_import($file_path) {
    if (!is_file($file_path)) { return '<p class="error">File not found.</p>'; }
    $handle = fopen($file_path, "r");
    if ($handle === FALSE) { return '<p class="error">Could not open file.</p>'; }

    $headers = array_map('trim', fgetcsv($handle, 1000, ","));
    $required_headers = ['book_id', 'title', 'description', 'thumbnail_url', 'link_com', 'link_in', 'link_ae', 'status'];

    if (count(array_intersect($required_headers, $headers)) !== count($required_headers)) {
        return '<p class="error">CSV headers do not match the required format for books.</p>';
    }

    $created_count = 0; $updated_count = 0; $skipped_count = 0;
    $errors = []; $row_num = 1;

    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $row_num++;
        $row = array_combine($headers, $data);
        
        $book_id_slug = sanitize_text_field($row['book_id']);
        if (empty($book_id_slug)) { $skipped_count++; continue; }

        $post_data = [
            'post_title' => sanitize_text_field($row['title']),
            'post_content' => wp_kses_post($row['description']),
            'post_type' => 'mco_recommended_book',
            'post_status' => sanitize_text_field($row['status']),
        ];
        
        $existing_post_query = new WP_Query([
            'post_type' => 'mco_recommended_book',
            'meta_key' => '_mco_book_id',
            'meta_value' => $book_id_slug,
            'posts_per_page' => 1,
            'fields' => 'ids'
        ]);
        $existing_post_id = !empty($existing_post_query->posts) ? $existing_post_query->posts[0] : null;

        $post_id = 0;
        if ($existing_post_id) {
            $post_id = $existing_post_id;
            $post_data['ID'] = $post_id;
            $result = wp_update_post($post_data, true);
            if (is_wp_error($result)) {
                $errors[] = "Failed to update book '{$post_data['post_title']}': " . $result->get_error_message();
            } else {
                $updated_count++;
            }
        } else {
            $result = wp_insert_post($post_data, true);
            if (is_wp_error($result)) {
                $errors[] = "Failed to create book '{$post_data['post_title']}': " . $result->get_error_message();
            } else {
                $post_id = $result;
                $created_count++;
            }
        }

        if ($post_id > 0 && !is_wp_error($result)) {
            update_post_meta($post_id, '_mco_book_id', $book_id_slug);
            update_post_meta($post_id, '_mco_thumbnail_url', esc_url_raw($row['thumbnail_url']));
            update_post_meta($post_id, '_mco_link_com', esc_url_raw($row['link_com']));
            update_post_meta($post_id, '_mco_link_in', esc_url_raw($row['link_in']));
            update_post_meta($post_id, '_mco_link_ae', esc_url_raw($row['link_ae']));
        }
    }
    fclose($handle);
    
    delete_transient('mco_app_config_data');
    update_option('mco_config_version', current_time('YmdHis'));

    $feedback = '<ul>';
    $feedback .= '<li class="success">Book import complete.</li>';
    $feedback .= '<li class="success">Created: ' . $created_count . '</li>';
    $feedback .= '<li class="success">Updated: ' . $updated_count . '</li>';
    $feedback .= '<li class="success">Skipped: ' . $skipped_count . '</li>';
    $feedback .= '<li class="error">Failed: ' . count($errors) . '</li>';
    foreach($errors as $error) { $feedback .= '<li class="error">' . esc_html($error) . '</li>'; }
    $feedback .= '</ul>';

    return $feedback;
}

function mco_get_default_certificate_templates() {
    return [
        'cert-practice' => [
            'id' => 'cert-practice',
            'name' => 'Default Practice Certificate',
            'title' => 'Certificate of Proficiency',
            'body' => "For successfully completing the {examName} with a final score of <strong>{finalScore}%</strong>.",
            'signature1Name' => 'Manoj Balakrishnan',
            'signature1Title' => 'CEO, Annapoorna Infotech',
            'signature1ImageUrl' => '',
            'signature2Name' => '',
            'signature2Title' => ''
        ],
        'cert-completion' => [
            'id' => 'cert-completion',
            'name' => 'Default Completion Certificate',
            'title' => 'Certificate of Achievement',
            'body' => "This is to certify that <strong>{candidateName}</strong> has successfully completed the rigorous requirements of the <strong>{examName}</strong> and is hereby awarded this certificate upon achieving a passing score of <strong>{finalScore}%</strong>.",
            'signature1Name' => 'Manoj Balakrishnan',
            'signature1Title' => 'CEO, Annapoorna Infotech',
            'signature1ImageUrl' => '',
            'signature2Name' => 'Lead Instructor',
            'signature2Title' => 'Education Department'
        ]
    ];
}


function mco_render_certificate_templates_tab() {
    if (isset($_POST['mco_save_templates_nonce']) && wp_verify_nonce($_POST['mco_save_templates_nonce'], 'mco_save_templates')) {
        $templates_input = $_POST['certificate_templates'];
        $sanitized_templates = [];
        if (is_array($templates_input)) {
            foreach ($templates_input as $template) {
                $id = sanitize_text_field($template['id']);
                if (empty($id)) continue;
                $sanitized_templates[$id] = [
                    'id' => $id,
                    'name' => sanitize_text_field($template['name']),
                    'title' => sanitize_text_field($template['title']),
                    'body' => wp_kses_post($template['body']),
                    'signature1Name' => sanitize_text_field($template['signature1Name']),
                    'signature1Title' => sanitize_text_field($template['signature1Title']),
                    'signature1ImageUrl' => esc_url_raw($template['signature1ImageUrl']),
                    'signature2Name' => sanitize_text_field($template['signature2Name']),
                    'signature2Title' => sanitize_text_field($template['signature2Title']),
                    'signature2ImageUrl' => esc_url_raw($template['signature2ImageUrl']),
                ];
            }
        }
        update_option('mco_certificate_templates', $sanitized_templates);
        delete_transient('mco_app_config_data');
        update_option('mco_config_version', current_time('YmdHis'));
        echo '<div class="notice notice-success is-dismissible"><p>Certificate templates saved.</p></div>';
    }
    $templates = get_option('mco_certificate_templates', mco_get_default_certificate_templates());
    ?>
    <h2>Certificate Templates</h2>
    <p>Manage the templates used for generating certificates. Use placeholders like <code>{candidateName}</code>, <code>{examName}</code>, and <code>{finalScore}</code>.</p>
    <form method="post">
        <?php wp_nonce_field('mco_save_templates', 'mco_save_templates_nonce'); ?>
        <div id="mco-templates-container">
            <?php foreach ($templates as $template) : ?>
            <div class="template-item" style="border: 1px solid #ccc; padding: 15px; margin-bottom: 15px; border-radius: 4px;">
                <table class="form-table">
                    <tr><th>Template ID</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][id]" value="<?php echo esc_attr($template['id']); ?>" readonly style="background:#eee;"></td></tr>
                    <tr><th>Template Name</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][name]" value="<?php echo esc_attr($template['name']); ?>"></td></tr>
                    <tr><th>Title</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][title]" value="<?php echo esc_attr($template['title']); ?>"></td></tr>
                    <tr><th>Body</th><td><textarea name="certificate_templates[<?php echo esc_attr($template['id']); ?>][body]"><?php echo esc_textarea($template['body']); ?></textarea></td></tr>
                    <tr><th>Signature 1 Name</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature1Name]" value="<?php echo esc_attr($template['signature1Name']); ?>"></td></tr>
                    <tr><th>Signature 1 Title</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature1Title]" value="<?php echo esc_attr($template['signature1Title']); ?>"></td></tr>
                    <tr><th>Signature 1 Image URL</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature1ImageUrl]" value="<?php echo esc_attr($template['signature1ImageUrl']); ?>"></td></tr>
                    <tr><th>Signature 2 Name</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature2Name]" value="<?php echo esc_attr($template['signature2Name']); ?>"></td></tr>
                    <tr><th>Signature 2 Title</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature2Title]" value="<?php echo esc_attr($template['signature2Title']); ?>"></td></tr>
                    <tr><th>Signature 2 Image URL</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature2ImageUrl]" value="<?php echo esc_attr($template['signature2ImageUrl']); ?>"></td></tr>
                </table>
            </div>
            <?php endforeach; ?>
        </div>
        <?php submit_button('Save Templates'); ?>
    </form>
    <?php
}

?>