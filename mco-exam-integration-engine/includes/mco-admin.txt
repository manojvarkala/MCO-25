<?php
if (!defined('ABSPATH')) exit;

// --- ADMIN MENU & PAGE ---

if (!function_exists('mco_add_admin_menu')) {
    function mco_add_admin_menu() {
        add_menu_page(
            'Exam App Engine', // Page Title
            'Exam App Engine', // Menu Title
            'manage_options', // Capability
            'mco-exam-engine', // Menu Slug
            'mco_exam_engine_admin_page', // Callback function to render the page
            'dashicons-welcome-learn-more', // Icon
            25 // Position
        );
    }
}


if (!function_exists('mco_register_admin_hooks')) {
    function mco_register_admin_hooks() {
        add_action('admin_menu', 'mco_add_admin_menu');
        add_action('admin_enqueue_scripts', 'mco_admin_enqueue_scripts');
        add_action('admin_post_mco_bulk_import_csv', 'mco_handle_csv_upload');
        // Rename the action for the new bulk scheduler
        add_action('admin_post_mco_schedule_bulk_posts', 'mco_handle_schedule_bulk_posts');
        add_action('add_meta_boxes', 'mco_add_exam_program_meta_boxes');
        add_action('save_post_mco_exam_program', 'mco_save_exam_program_meta_data');
        
        // Actions for custom admin columns
        add_filter('manage_mco_exam_program_posts_columns', 'mco_add_exam_program_columns');
        add_action('manage_mco_exam_program_posts_custom_column', 'mco_display_exam_program_columns', 10, 2);
        // Filter to clean up the title in the admin list view
        add_filter('the_title', 'mco_strip_tags_from_admin_title', 10, 2);
    }
}

// New function to strip tags from the title on the exam program admin list page
if (!function_exists('mco_strip_tags_from_admin_title')) {
    function mco_strip_tags_from_admin_title($title, $id = null) {
        // Only run on the admin edit list page for our specific post type.
        if (is_admin() && function_exists('get_current_screen')) {
            $screen = get_current_screen();
            if ($screen && $screen->id === 'edit-mco_exam_program' && $screen->post_type === 'mco_exam_program') {
                return wp_strip_all_tags($title);
            }
        }
        return $title;
    }
}


// --- EXAM PROGRAM CPT META BOX ---

if (!function_exists('mco_add_exam_program_meta_boxes')) {
    function mco_add_exam_program_meta_boxes() {
        add_meta_box(
            'mco_exam_program_settings',
            'Exam Program Settings',
            'mco_render_exam_program_meta_box',
            'mco_exam_program',
            'normal',
            'high'
        );
    }
}

if (!function_exists('mco_render_exam_program_meta_box')) {
    function mco_render_exam_program_meta_box($post) {
        wp_nonce_field('mco_save_exam_program_meta_data', 'mco_exam_program_meta_nonce');
        
        $certificate_enabled = get_post_meta($post->ID, '_mco_certificate_enabled', true);
        if ($certificate_enabled === '') $certificate_enabled = '1';

        $practice_title_override = get_post_meta($post->ID, '_mco_practice_exam_title_override', true);
        $cert_title_override = get_post_meta($post->ID, '_mco_cert_exam_title_override', true);
        ?>
        <table class="form-table">
            <tbody>
                <tr>
                    <th scope="row"><label for="mco_practice_exam_title_override">Practice Exam Title Override</label></th>
                    <td><input type="text" id="mco_practice_exam_title_override" name="mco_practice_exam_title_override" value="<?php echo esc_attr($practice_title_override); ?>" class="widefat" />
                    <p class="description">Optional. If empty, defaults to "[Program Title] Practice".</p></td>
                </tr>
                 <tr>
                    <th scope="row"><label for="mco_cert_exam_title_override">Certification Exam Title Override</label></th>
                    <td><input type="text" id="mco_cert_exam_title_override" name="mco_cert_exam_title_override" value="<?php echo esc_attr($cert_title_override); ?>" class="widefat" />
                     <p class="description">Optional. If empty, defaults to the main program title.</p></td>
                </tr>
                <tr>
                    <th scope="row">Certificate</th>
                    <td>
                        <label for="mco_certificate_enabled">
                            <input type="checkbox" name="mco_certificate_enabled" id="mco_certificate_enabled" value="1" <?php checked($certificate_enabled, '1'); ?> />
                            <strong>Enable Certificate on Pass</strong>
                        </label>
                        <p class="description">
                            If checked, a certificate will be issued for the main "Certification Exam". If unchecked, it will be treated as a "Proficiency Exam" with no certificate.
                        </p>
                    </td>
                </tr>
            </tbody>
        </table>
        <?php
    }
}

if (!function_exists('mco_save_exam_program_meta_data')) {
    function mco_save_exam_program_meta_data($post_id) {
        if (!isset($_POST['mco_exam_program_meta_nonce']) || !wp_verify_nonce($_POST['mco_exam_program_meta_nonce'], 'mco_save_exam_program_meta_data')) {
            return;
        }
        if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
            return;
        }
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }

        $cert_enabled_value = isset($_POST['mco_certificate_enabled']) && $_POST['mco_certificate_enabled'] === '1' ? '1' : '0';
        update_post_meta($post_id, '_mco_certificate_enabled', $cert_enabled_value);

        if (isset($_POST['mco_practice_exam_title_override'])) {
            update_post_meta($post_id, '_mco_practice_exam_title_override', sanitize_text_field($_POST['mco_practice_exam_title_override']));
        }
        if (isset($_POST['mco_cert_exam_title_override'])) {
            update_post_meta($post_id, '_mco_cert_exam_title_override', sanitize_text_field($_POST['mco_cert_exam_title_override']));
        }
    }
}


if (!function_exists('mco_admin_enqueue_scripts')) {
    function mco_admin_enqueue_scripts($hook) {
        if (strpos($hook, 'mco-exam-engine') === false) {
            return;
        }
        
        wp_enqueue_media();
        ?>
        <style>
            .mco-admin-wrap { max-width: 960px; } .mco-admin-wrap h1 { margin-bottom: 20px; } .mco-admin-wrap .nav-tab { font-size: 14px; } .mco-admin-wrap .tab-content { margin-top: 20px; } .mco-admin-wrap .form-table th { width: 200px; } .mco-admin-wrap .form-table td input[type="text"], .mco-admin-wrap .form-table td textarea { width: 100%; max-width: 500px; } .mco-admin-wrap .form-table td .image-upload-wrapper { display: flex; align-items: center; gap: 10px; } .mco-admin-wrap .form-table td .image-upload-wrapper textarea { flex-grow: 1; } .mco-admin-wrap .form-table td textarea { height: 100px; } .mco-admin-wrap .notice-success { border-left-color: #4CAF50; } .mco-admin-wrap .notice-error { border-left-color: #F44336; } .mco-admin-wrap .notice-warning { border-left-color: #FFC107; } .mco-admin-wrap .mco-feedback-box { background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 4px; padding: 15px; margin-top: 20px; max-height: 400px; overflow-y: auto; font-family: monospace; font-size: 13px; } .mco-feedback-box.full-height { max-height: none; } .mco-feedback-box ul { margin: 0; padding-left: 20px; } .mco-feedback-box li.error { color: #dc3545; } .mco-feedback-box li.success { color: #28a745; }
        </style>
        <script>
        jQuery(document).ready(function($){
            $('body').on('click', '.mco-upload-image-button', function(e) {
                e.preventDefault();
                var button = $(this);
                var targetInput = button.siblings('textarea');
                var mediaUploader = wp.media({ title: 'Select or Upload Signature Image', button: { text: 'Use this image URL' }, multiple: false });
                mediaUploader.on('select', function() {
                    var attachment = mediaUploader.state().get('selection').first().toJSON();
                    targetInput.val(attachment.url);
                });
                mediaUploader.open();
            });
        });
        </script>
        <?php
    }
}

if (!function_exists('mco_exam_engine_admin_page')) {
    function mco_exam_engine_admin_page() {
        if (isset($_POST['mco_save_settings_nonce']) && wp_verify_nonce($_POST['mco_save_settings_nonce'], 'mco_save_settings')) {
            $form_action = isset($_POST['mco_form_action']) ? sanitize_text_field($_POST['mco_form_action']) : '';

            if ($form_action === 'save_main_settings') {
                update_option('mco_exam_app_url', sanitize_textarea_field($_POST['mco_exam_app_url']));
                update_option('mco_exam_programs_page_url', esc_url_raw($_POST['mco_exam_programs_page_url']));
                update_option('mco_is_spin_wheel_enabled', isset($_POST['mco_is_spin_wheel_enabled']) ? 1 : 0);
                $logo_url_input = isset($_POST['mco_logo_url']) ? trim(wp_unslash($_POST['mco_logo_url'])) : '';
                $url_to_save = (strpos($logo_url_input, 'data:image') === 0) ? $logo_url_input : esc_url_raw($logo_url_input);
                update_option('mco_logo_url', $url_to_save);
                if (!empty($logo_url_input) && empty(get_option('mco_logo_url'))) {
                    add_settings_error('mco_settings', 'logo_save_failed', 'The provided logo data URI could not be saved. This often happens if the base64 code is too long for your server\'s database configuration. <strong>Recommended solution:</strong> Upload the logo to your WordPress Media Library and paste the file URL here instead.', 'error');
                }
                delete_transient('mco_app_config_data');
                update_option('mco_config_version', current_time('YmdHis'));
                echo '<div class="notice notice-success is-dismissible"><p>Settings saved and cache cleared.</p></div>';

            } elseif ($form_action === 'save_theme_settings') {
                update_option('mco_active_theme', sanitize_text_field($_POST['mco_active_theme']));
                delete_transient('mco_app_config_data');
                update_option('mco_config_version', current_time('YmdHis'));
                echo '<div class="notice notice-success is-dismissible"><p>Theme settings saved.</p></div>';
            }
        }

        $active_tab = isset($_GET['tab']) ? $_GET['tab'] : 'main_settings';
        ?>
        <div class="wrap mco-admin-wrap">
            <h1>Exam App Engine - Settings & Tools</h1>
            <?php settings_errors('mco_settings'); ?>
            <nav class="nav-tab-wrapper">
                <a href="?page=mco-exam-engine&tab=main_settings" class="nav-tab <?php echo $active_tab == 'main_settings' ? 'nav-tab-active' : ''; ?>">Main Settings</a>
                <a href="?page=mco-exam-engine&tab=theme_selector" class="nav-tab <?php echo $active_tab == 'theme_selector' ? 'nav-tab-active' : ''; ?>">Theme Selector</a>
                <a href="?page=mco-exam-engine&tab=content_engine" class="nav-tab <?php echo $active_tab == 'content_engine' ? 'nav-tab-active' : ''; ?>">Content Engine</a>
                <a href="?page=mco-exam-engine&tab=bulk_import" class="nav-tab <?php echo $active_tab == 'bulk_import' ? 'nav-tab-active' : ''; ?>">Bulk Import</a>
                <a href="?page=mco-exam-engine&tab=certificate_templates" class="nav-tab <?php echo $active_tab == 'certificate_templates' ? 'nav-tab-active' : ''; ?>">Certificate Templates</a>
                <a href="?page=mco-exam-engine&tab=tools" class="nav-tab <?php echo $active_tab == 'tools' ? 'nav-tab-active' : ''; ?>">Tools</a>
            </nav>
            <div class="tab-content">
                <?php
                if ($active_tab == 'main_settings') mco_render_main_settings_tab();
                elseif ($active_tab == 'theme_selector') mco_render_theme_selector_tab();
                elseif ($active_tab == 'content_engine') mco_render_content_engine_tab();
                elseif ($active_tab == 'bulk_import') mco_render_bulk_import_tab();
                elseif ($active_tab == 'certificate_templates') mco_render_certificate_templates_tab();
                elseif ($active_tab == 'tools') mco_render_tools_tab();
                ?>
            </div>
        </div>
        <?php
    }
}

function mco_render_main_settings_tab() { ?>
    <form method="post" action="?page=mco-exam-engine&tab=main_settings">
        <?php wp_nonce_field('mco_save_settings', 'mco_save_settings_nonce'); ?>
        <input type="hidden" name="mco_form_action" value="save_main_settings">
        <table class="form-table">
            <tr valign="top">
                <th scope="row">Exam Application URL(s)</th>
                <td><textarea name="mco_exam_app_url"><?php echo esc_textarea(get_option('mco_exam_app_url')); ?></textarea><p class="description">Enter the full URL of your React exam app. Add multiple URLs on new lines if needed (e.g., for different environments like Vercel previews).</p></td>
            </tr>
             <tr valign="top">
                <th scope="row">Exam Programs Page URL</th>
                <td><input type="text" name="mco_exam_programs_page_url" value="<?php echo esc_url(get_option('mco_exam_programs_page_url')); ?>" class="widefat" /><p class="description">Enter the full URL of the page where your [mco_exam_showcase] shortcode is displayed. This is used for internal linking in generated blog posts.</p></td>
            </tr>
             <tr valign="top">
                <th scope="row">Custom Logo URL</th>
                <td><textarea name="mco_logo_url" rows="4"><?php echo esc_textarea(get_option('mco_logo_url')); ?></textarea><p class="description">Optional. Enter the full URL to a custom logo (e.g., https://...) or paste a base64 data URI (e.g., data:image/png;base64,...). If empty, it will use the Site Icon from Customizer.</p></td>
            </tr>
            <tr valign="top">
                <th scope="row">Enable "Spin & Win"</th>
                <td><input type="checkbox" name="mco_is_spin_wheel_enabled" value="1" <?php checked(1, get_option('mco_is_spin_wheel_enabled', 0)); ?> /><label for="mco_is_spin_wheel_enabled">Enable the gamified prize wheel for users.</label></td>
            </tr>
            <tr valign="top">
                <th scope="row">JWT Secret Key</th>
                <td><code><?php echo defined('MCO_JWT_SECRET') ? 'Defined in wp-config.php' : '<strong>Not Defined!</strong>'; ?></code><p class="description">For security, you must define <code>MCO_JWT_SECRET</code> in your <code>wp-config.php</code> file. e.g., <code>define('MCO_JWT_SECRET', 'your-long-random-secret-key');</code></p></td>
            </tr>
        </table>
        <?php submit_button(); ?>
    </form>
<?php }

function mco_render_theme_selector_tab() { ?>
    <form method="post" action="?page=mco-exam-engine&tab=theme_selector">
        <?php wp_nonce_field('mco_save_settings', 'mco_save_settings_nonce'); ?>
        <input type="hidden" name="mco_form_action" value="save_theme_settings">
        <h2>Application Theme</h2><p>Select the default visual theme for the exam application. Users can override this choice in their own profile.</p>
        <table class="form-table">
            <tr valign="top">
                <th scope="row">Default Theme</th>
                <td>
                    <select name="mco_active_theme" style="min-width: 200px;">
                        <option value="default" <?php selected(get_option('mco_active_theme', 'default'), 'default'); ?>>Cyberpunk (Default)</option>
                        <option value="professional" <?php selected(get_option('mco_active_theme'), 'professional'); ?>>Professional (Blue)</option>
                        <option value="serene" <?php selected(get_option('mco_active_theme'), 'serene'); ?>>Serene (Green)</option>
                        <option value="academic" <?php selected(get_option('mco_active_theme'), 'academic'); ?>>Academic (Crimson)</option>
                        <option value="noir" <?php selected(get_option('mco_active_theme'), 'noir'); ?>>Noir (Dark)</option>
                    </select>
                </td>
            </tr>
        </table>
        <?php submit_button(); ?>
    </form>
<?php }

function mco_render_content_engine_tab() {
    $programs_page_url = get_option('mco_exam_programs_page_url');

    if (isset($_GET['mco_post_status'])) {
        $status = sanitize_text_field($_GET['mco_post_status']);
        $message = get_transient('mco_post_generator_message');
        delete_transient('mco_post_generator_message');

        if ($message) {
            $notice_class = ($status === 'success') ? 'notice-success' : 'notice-warning';
            echo '<div class="notice ' . $notice_class . ' is-dismissible"><p>' . wp_kses_post($message) . '</p></div>';
        }
    }
    ?>
    <h2>Content Engine & Post Scheduler</h2>
    <p>Automatically generate and schedule SEO-friendly blog posts from your existing exam programs. This helps build internal links and target relevant keywords over time.</p>

    <?php if (empty($programs_page_url)) : ?>
        <div class="notice notice-error"><p><strong>Warning:</strong> The "Exam Programs Page URL" is not set in the Main Settings. Generated posts will not have a call-to-action link. Please <a href="?page=mco-exam-engine&tab=main_settings">set it now</a>.</p></div>
    <?php endif; ?>

    <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>">
        <input type="hidden" name="action" value="mco_schedule_bulk_posts">
        <?php wp_nonce_field('mco_schedule_bulk_posts_nonce'); ?>
        <h3>Bulk Post Scheduler</h3>
        <table class="form-table">
            <tr valign="top">
                <th scope="row"><label for="num_posts">Number of Posts</label></th>
                <td><input type="number" id="num_posts" name="num_posts" min="1" max="10" value="5" class="small-text">
                <p class="description">How many posts to generate and schedule (max 10 at a time).</p></td>
            </tr>
            <tr valign="top">
                <th scope="row"><label for="start_date">Start Date</label></th>
                <td><input type="date" id="start_date" name="start_date" value="<?php echo date('Y-m-d'); ?>">
                <p class="description">The publication date for the first post.</p></td>
            </tr>
            <tr valign="top">
                <th scope="row"><label for="post_interval">Posting Interval</label></th>
                <td>
                    <select id="post_interval" name="post_interval">
                        <option value="1 day">Every Day</option>
                        <option value="2 days">Every 2 Days</option>
                        <option value="3 days">Every 3 Days</option>
                        <option value="1 week">Every Week</option>
                    </select>
                    <p class="description">The time between each scheduled post.</p>
                </td>
            </tr>
            <tr valign="top">
                <th scope="row"><label for="post_author">Post Author</label></th>
                <td>
                    <?php wp_dropdown_users(['name' => 'post_author', 'who' => 'authors', 'show_option_none' => 'Default (Current User)']); ?>
                </td>
            </tr>
            <tr valign="top">
                <th scope="row"><label for="post_category">Post Category</label></th>
                <td>
                    <?php wp_dropdown_categories(['name' => 'post_category', 'show_option_none' => 'Uncategorized', 'hide_empty' => 0, 'hierarchical' => 1]); ?>
                </td>
            </tr>
        </table>
        <?php submit_button('Schedule Posts'); ?>
    </form>
    <hr>
    <h3>Recently Generated & Scheduled Posts</h3>
    <?php
    $recent_posts_query = new WP_Query([
        'post_type' => 'post',
        'posts_per_page' => 10,
        'post_status' => ['publish', 'future'],
        'meta_key' => '_mco_source_program_id',
        'orderby' => 'date',
        'order' => 'DESC'
    ]);
    if ($recent_posts_query->have_posts()) {
        echo '<ul>';
        while ($recent_posts_query->have_posts()) {
            $recent_posts_query->the_post();
            $source_program_id = get_post_meta(get_the_ID(), '_mco_source_program_id', true);
            $post_status = get_post_status() == 'future' ? ' (Scheduled: ' . get_the_date('Y-m-d H:i') . ')' : '';
            echo '<li>' . get_the_date() . ': <a href="' . get_edit_post_link() . '">' . get_the_title() . '</a><strong>' . esc_html($post_status) . '</strong> (from <a href="' . get_edit_post_link($source_program_id) . '">' . wp_strip_all_tags(get_the_title($source_program_id)) . '</a>)</li>';
        }
        echo '</ul>';
    } else {
        echo '<p>No posts have been generated yet.</p>';
    }
    wp_reset_postdata();
    ?>
<?php }

function mco_render_bulk_import_tab() { ?>
    <h2>Bulk Import via CSV</h2><p>Upload a CSV file to create or update multiple Exam Programs or Recommended Books at once. Ensure your file matches the required format.</p>
    <?php
    if (isset($_GET['import_status'])) {
        $status = sanitize_text_field($_GET['import_status']);
        $feedback_html = get_transient('mco_import_feedback');
        delete_transient('mco_import_feedback');
        if ($status === 'success' && $feedback_html) {
            echo '<div class="notice notice-success is-dismissible"><p>CSV import processed.</p></div><div class="mco-feedback-box full-height">' . wp_kses_post($feedback_html) . '</div>';
        } elseif ($status === 'error' && $feedback_html) {
            echo '<div class="notice notice-error is-dismissible"><p>CSV import failed.</p></div><div class="mco-feedback-box full-height">' . wp_kses_post($feedback_html) . '</div>';
        }
    } ?>
    <h3>Import Exam Programs</h3><p>Required columns: <code>program_title, program_description, question_source_url, certification_exam_sku, is_proctored, certificate_enabled, recommended_book_id, practice_questions, practice_duration, cert_questions, cert_duration, pass_score, status</code></p>
    <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>" enctype="multipart/form-data">
        <input type="hidden" name="action" value="mco_bulk_import_csv"><input type="hidden" name="import_type" value="exam_programs"><?php wp_nonce_field('mco_bulk_import_csv_nonce', 'mco_bulk_import_csv_nonce'); ?>
        <table class="form-table"><tr valign="top"><th scope="row">Exam Programs CSV File</th><td><input type="file" name="csv_file" accept=".csv" required></td></tr></table>
        <?php submit_button('Import Exam Programs'); ?>
    </form>
    <hr>
    <h3>Import Recommended Books</h3><p>Required columns: <code>book_id, title, description, thumbnail_url, link_com, link_in, link_ae, status</code></p>
    <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>" enctype="multipart/form-data">
        <input type="hidden" name="action" value="mco_bulk_import_csv"><input type="hidden" name="import_type" value="recommended_books"><?php wp_nonce_field('mco_bulk_import_csv_nonce', 'mco_bulk_import_csv_nonce'); ?>
        <table class="form-table"><tr valign="top"><th scope="row">Recommended Books CSV File</th><td><input type="file" name="csv_file" accept=".csv" required></td></tr></table>
        <?php submit_button('Import Recommended Books'); ?>
    </form>
<?php }

function mco_handle_csv_upload() {
    if (!isset($_POST['mco_bulk_import_csv_nonce']) || !wp_verify_nonce($_POST['mco_bulk_import_csv_nonce'], 'mco_bulk_import_csv_nonce')) wp_die('Security check failed');
    if (empty($_FILES['csv_file']['tmp_name'])) { set_transient('mco_import_feedback', '<p class="error">No file uploaded.</p>', 60); wp_redirect(admin_url('admin.php?page=mco-exam-engine&tab=bulk_import&import_status=error')); exit; }
    $import_type = sanitize_text_field($_POST['import_type']);
    $file_path = $_FILES['csv_file']['tmp_name'];
    $feedback = ($import_type === 'exam_programs') ? mco_process_csv_import($file_path) : (($import_type === 'recommended_books') ? mco_process_books_csv_import($file_path) : '<p class="error">Invalid import type specified.</p>');
    set_transient('mco_import_feedback', $feedback, 60);
    wp_redirect(admin_url('admin.php?page=mco-exam-engine&tab=bulk_import&import_status=success'));
    exit;
}

function mco_process_csv_import($file_path) {
    if (!is_file($file_path)) return '<p class="error">File not found.</p>';
    $handle = fopen($file_path, "r");
    if ($handle === FALSE) return '<p class="error">Could not open file.</p>';
    $headers = array_map('trim', fgetcsv($handle, 1000, ","));
    $required_headers = ['program_title', 'program_description', 'question_source_url', 'certification_exam_sku', 'is_proctored', 'certificate_enabled', 'recommended_book_id', 'practice_questions', 'practice_duration', 'cert_questions', 'cert_duration', 'pass_score', 'status'];
    if (count(array_intersect($required_headers, $headers)) !== count($required_headers)) return '<p class="error">CSV headers do not match the required format. Missing: ' . implode(', ', array_diff($required_headers, $headers)) . '</p>';
    $created_count = 0; $updated_count = 0; $skipped_count = 0; $errors = [];
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $row = array_combine($headers, $data);
        $program_title = sanitize_text_field($row['program_title']);
        if (empty($program_title)) { $skipped_count++; continue; }
        $post_data = ['post_title' => $program_title, 'post_content' => wp_kses_post($row['program_description']), 'post_type' => 'mco_exam_program', 'post_status' => sanitize_text_field($row['status'])];
        $existing_post = get_page_by_title($program_title, OBJECT, 'mco_exam_program');
        if ($existing_post) {
            $post_id = $existing_post->ID; $post_data['ID'] = $post_id;
            $result = wp_update_post($post_data, true);
            if (is_wp_error($result)) $errors[] = "Failed to process '{$program_title}': " . $result->get_error_message(); else $updated_count++;
        } else {
            $result = wp_insert_post($post_data, true);
            if (is_wp_error($result)) $errors[] = "Failed to create '{$program_title}': " . $result->get_error_message(); else { $post_id = $result; $created_count++; }
        }
        if ($post_id > 0 && !is_wp_error($result)) {
            $taxonomies = ['exam_practice_questions' => 'practice_questions', 'exam_practice_duration'  => 'practice_duration', 'exam_cert_questions' => 'cert_questions', 'exam_cert_duration' => 'cert_duration', 'exam_pass_score' => 'pass_score'];
            foreach($taxonomies as $tax_slug => $csv_key) wp_set_post_terms($post_id, sanitize_text_field($row[$csv_key]), $tax_slug, false);
            update_post_meta($post_id, '_mco_certification_exam_sku', sanitize_text_field($row['certification_exam_sku']));
            update_post_meta($post_id, '_mco_question_source_url', esc_url_raw($row['question_source_url']));
            update_post_meta($post_id, '_mco_is_proctored', intval($row['is_proctored']));
            update_post_meta($post_id, '_mco_certificate_enabled', intval($row['certificate_enabled']));
            $book_slugs = array_map('trim', explode(',', $row['recommended_book_id'])); $book_post_ids = [];
            foreach($book_slugs as $slug) { if (empty($slug)) continue; $book_query = new WP_Query(['post_type' => 'mco_recommended_book', 'meta_key' => '_mco_book_id', 'meta_value' => $slug, 'posts_per_page' => 1, 'fields' => 'ids']); if ($book_query->have_posts()) $book_post_ids[] = $book_query->posts[0]; }
            update_post_meta($post_id, '_mco_recommended_book_ids', $book_post_ids);
        }
    }
    fclose($handle);
    delete_transient('mco_app_config_data'); update_option('mco_config_version', current_time('YmdHis'));
    $feedback = '<ul><li class="success">Import complete.</li><li class="success">Created: ' . $created_count . '</li><li class="success">Updated: ' . $updated_count . '</li><li class="success">Skipped: ' . $skipped_count . '</li><li class="error">Failed: ' . count($errors) . '</li>';
    foreach($errors as $error) $feedback .= '<li class="error">' . esc_html($error) . '</li>';
    return $feedback . '</ul>';
}

function mco_process_books_csv_import($file_path) {
    if (!is_file($file_path)) return '<p class="error">File not found.</p>';
    $handle = fopen($file_path, "r");
    if ($handle === FALSE) return '<p class="error">Could not open file.</p>';
    $headers = array_map('trim', fgetcsv($handle, 1000, ","));
    $required_headers = ['book_id', 'title', 'description', 'thumbnail_url', 'link_com', 'link_in', 'link_ae', 'status'];
    if (count(array_intersect($required_headers, $headers)) !== count($required_headers)) return '<p class="error">CSV headers do not match the required format for books.</p>';
    $created_count = 0; $updated_count = 0; $skipped_count = 0; $errors = [];
    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $row = array_combine($headers, $data);
        $book_id_slug = sanitize_text_field($row['book_id']);
        if (empty($book_id_slug)) { $skipped_count++; continue; }
        $post_data = ['post_title' => sanitize_text_field($row['title']), 'post_content' => wp_kses_post($row['description']), 'post_type' => 'mco_recommended_book', 'post_status' => sanitize_text_field($row['status'])];
        $existing_post_query = new WP_Query(['post_type' => 'mco_recommended_book', 'meta_key' => '_mco_book_id', 'meta_value' => $book_id_slug, 'posts_per_page' => 1, 'fields' => 'ids']);
        $existing_post_id = !empty($existing_post_query->posts) ? $existing_post_query->posts[0] : null;
        if ($existing_post_id) {
            $post_id = $existing_post_id; $post_data['ID'] = $post_id;
            $result = wp_update_post($post_data, true);
            if (is_wp_error($result)) $errors[] = "Failed to update book '{$post_data['post_title']}': " . $result->get_error_message(); else $updated_count++;
        } else {
            $result = wp_insert_post($post_data, true);
            if (is_wp_error($result)) $errors[] = "Failed to create book '{$post_data['post_title']}': " . $result->get_error_message(); else { $post_id = $result; $created_count++; }
        }
        if ($post_id > 0 && !is_wp_error($result)) {
            update_post_meta($post_id, '_mco_book_id', $book_id_slug); update_post_meta($post_id, '_mco_thumbnail_url', esc_url_raw($row['thumbnail_url'])); update_post_meta($post_id, '_mco_link_com', esc_url_raw($row['link_com'])); update_post_meta($post_id, '_mco_link_in', esc_url_raw($row['link_in'])); update_post_meta($post_id, '_mco_link_ae', esc_url_raw($row['link_ae']));
        }
    }
    fclose($handle);
    delete_transient('mco_app_config_data'); update_option('mco_config_version', current_time('YmdHis'));
    $feedback = '<ul><li class="success">Book import complete.</li><li class="success">Created: ' . $created_count . '</li><li class="success">Updated: ' . $updated_count . '</li><li class="success">Skipped: ' . $skipped_count . '</li><li class="error">Failed: ' . count($errors) . '</li>';
    foreach($errors as $error) $feedback .= '<li class="error">' . esc_html($error) . '</li>';
    return $feedback . '</ul>';
}

function mco_get_default_certificate_templates() { return ['cert-practice' => ['id' => 'cert-practice', 'name' => 'Default Practice Certificate', 'title' => 'Certificate of Proficiency', 'body' => "For successfully completing the {examName} with a final score of <strong>{finalScore}%</strong>.", 'signature1Name' => 'Manoj Balakrishnan', 'signature1Title' => 'CEO, Annapoorna Infotech', 'signature1ImageUrl' => '', 'signature2Name' => '', 'signature2Title' => ''], 'cert-completion' => ['id' => 'cert-completion', 'name' => 'Default Completion Certificate', 'title' => 'Certificate of Achievement', 'body' => "This is to certify that <strong>{candidateName}</strong> has successfully completed the rigorous requirements of the <strong>{examName}</strong> and is hereby awarded this certificate upon achieving a passing score of <strong>{finalScore}%</strong>.", 'signature1Name' => 'Manoj Balakrishnan', 'signature1Title' => 'CEO, Annapoorna Infotech', 'signature1ImageUrl' => '', 'signature2Name' => 'Lead Instructor', 'signature2Title' => 'Education Department']]; }

function mco_render_certificate_templates_tab() {
    if (isset($_POST['mco_save_templates_nonce']) && wp_verify_nonce($_POST['mco_save_templates_nonce'], 'mco_save_templates')) {
        $templates_input = $_POST['certificate_templates']; $sanitized_templates = [];
        if (is_array($templates_input)) {
            foreach ($templates_input as $template) {
                $id = sanitize_text_field($template['id']); if (empty($id)) continue;
                $sig1_url_input = isset($template['signature1ImageUrl']) ? trim(wp_unslash($template['signature1ImageUrl'])) : '';
                $sig1_url_to_save = strpos($sig1_url_input, 'data:image') === 0 ? $sig1_url_input : esc_url_raw($sig1_url_input);
                $sig2_url_input = isset($template['signature2ImageUrl']) ? trim(wp_unslash($template['signature2ImageUrl'])) : '';
                $sig2_url_to_save = strpos($sig2_url_input, 'data:image') === 0 ? $sig2_url_input : esc_url_raw($sig2_url_input);
                $sanitized_templates[$id] = ['id' => $id, 'name' => sanitize_text_field($template['name']), 'title' => sanitize_text_field($template['title']), 'body' => wp_kses_post($template['body']), 'signature1Name' => sanitize_text_field($template['signature1Name']), 'signature1Title' => sanitize_text_field($template['signature1Title']), 'signature1ImageUrl' => $sig1_url_to_save, 'signature2Name' => sanitize_text_field($template['signature2Name']), 'signature2Title' => sanitize_text_field($template['signature2Title']), 'signature2ImageUrl' => $sig2_url_to_save, ];
            }
        }
        update_option('mco_certificate_templates', $sanitized_templates);
        delete_transient('mco_app_config_data'); update_option('mco_config_version', current_time('YmdHis'));
        echo '<div class="notice notice-success is-dismissible"><p>Certificate templates saved.</p></div>';
    }
    $templates = get_option('mco_certificate_templates', mco_get_default_certificate_templates());
    ?>
    <h2>Certificate Templates</h2><p>Manage the templates used for generating certificates. Use placeholders like <code>{candidateName}</code>, <code>{examName}</code>, and <code>{finalScore}</code>.</p>
    <form method="post"><?php wp_nonce_field('mco_save_templates', 'mco_save_templates_nonce'); ?><div id="mco-templates-container">
    <?php foreach ($templates as $template) : ?><div class="template-item" style="border: 1px solid #ccc; padding: 15px; margin-bottom: 15px; border-radius: 4px;"><table class="form-table">
        <tr><th>Template ID</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][id]" value="<?php echo esc_attr($template['id']); ?>" readonly style="background:#eee;"></td></tr>
        <tr><th>Template Name</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][name]" value="<?php echo esc_attr($template['name']); ?>"></td></tr>
        <tr><th>Title</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][title]" value="<?php echo esc_attr($template['title']); ?>"></td></tr>
        <tr><th>Body</th><td><textarea name="certificate_templates[<?php echo esc_attr($template['id']); ?>][body]"><?php echo esc_textarea($template['body']); ?></textarea></td></tr>
        <tr><th>Signature 1 Name</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature1Name]" value="<?php echo esc_attr($template['signature1Name']); ?>"></td></tr>
        <tr><th>Signature 1 Title</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature1Title]" value="<?php echo esc_attr($template['signature1Title']); ?>"></td></tr>
        <tr><th>Signature 1 Image</th><td><div class="image-upload-wrapper"><textarea name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature1ImageUrl]" rows="3"><?php echo esc_textarea($template['signature1ImageUrl']); ?></textarea><button type="button" class="button mco-upload-image-button">Upload Image</button></div><p class="description"><strong>Recommended for PDF Downloads:</strong> Paste a <code>base64</code> data URI (e.g., <code>data:image/png;base64,...</code>). Use an online "Image to Base64" converter. Using a standard URL may cause CORS errors during PDF generation.</p></td></tr>
        <tr><th>Signature 2 Name</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature2Name]" value="<?php echo esc_attr($template['signature2Name']); ?>"></td></tr>
        <tr><th>Signature 2 Title</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature2Title]" value="<?php echo esc_attr($template['signature2Title']); ?>"></td></tr>
        <tr><th>Signature 2 Image</th><td><div class="image-upload-wrapper"><textarea name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature2ImageUrl]" rows="3"><?php echo esc_textarea($template['signature2ImageUrl']); ?></textarea><button type="button" class="button mco-upload-image-button">Upload Image</button></div><p class="description"><strong>Recommended for PDF Downloads:</strong> Paste a <code>base64</code> data URI (e.g., <code>data:image/png;base64,...</code>). Using a standard URL may cause CORS errors during PDF generation.</p></td></tr>
    </table></div><?php endforeach; ?></div><?php submit_button('Save Templates'); ?></form>
<?php }

function mco_render_tools_tab() {
    if (isset($_POST['mco_clear_cache_nonce']) && wp_verify_nonce($_POST['mco_clear_cache_nonce'], 'mco_clear_cache')) {
        delete_transient('mco_app_config_data'); update_option('mco_config_version', current_time('YmdHis'));
        echo '<div class="notice notice-success is-dismissible"><p>Server-side application config cache has been cleared.</p></div>';
    }
    $test_results_html = '';
    if (isset($_POST['mco_test_sheet_url_nonce']) && wp_verify_nonce($_POST['mco_test_sheet_url_nonce'], 'mco_test_sheet_url_action')) {
        $sheet_url_to_test = esc_url_raw($_POST['sheet_url_to_test']); $test_results_html = mco_run_sheet_url_test($sheet_url_to_test);
    }
    ?>
    <h2>Tools</h2><p>Use these tools for maintenance and troubleshooting.</p><table class="form-table"><tr valign="top"><th scope="row">Server Cache</th><td><form method="post" action=""><?php wp_nonce_field('mco_clear_cache', 'mco_clear_cache_nonce'); ?><p class="description" style="margin-bottom: 10px;">The plugin caches app configuration data for performance. Clear this cache if you've made changes and don't see them reflected in the app.</p><?php submit_button('Clear Server Config Cache', 'secondary', 'submit_clear_cache', false); ?></form></td></tr><tr valign="top"><th scope="row">Google Sheet URL Tester</th><td><form method="post" action=""><?php wp_nonce_field('mco_test_sheet_url_action', 'mco_test_sheet_url_nonce'); ?><p class="description" style="margin-bottom: 10px;">Test if a Google Sheet URL is accessible from your server. This helps diagnose "Question Sheet: Failure" errors.</p><input type="text" name="sheet_url_to_test" class="widefat" placeholder="Paste Google Sheet URL here..." value="<?php echo isset($_POST['sheet_url_to_test']) ? esc_attr($_POST['sheet_url_to_test']) : ''; ?>" /><?php submit_button('Test URL', 'secondary', 'submit_test_url', false); ?></form><?php if (!empty($test_results_html)) : ?><div class="mco-feedback-box" style="margin-top: 15px;"><?php echo $test_results_html; ?></div><?php endif; ?></td></tr></table>
<?php }

function mco_run_sheet_url_test($sheet_url) {
    if (empty($sheet_url)) return '<p class="error">Please provide a URL to test.</p>';
    $csv_url = '';
    if (strpos($sheet_url, '/pub?output=csv') !== false) $csv_url = $sheet_url;
    elseif (preg_match('/spreadsheets\/d\/([a-zA-Z0-9-_]+)/', $sheet_url, $matches)) $csv_url = "https://docs.google.com/spreadsheets/d/{$matches[1]}/export?format=csv&gid=0";
    if (empty($csv_url)) return '<p class="error">Invalid Google Sheet URL format.</p>';
    $response = wp_remote_get($csv_url, ['timeout' => 20, 'sslverify' => false]);
    if (is_wp_error($response)) return '<p class="error">Connection Error: ' . esc_html($response->get_error_message()) . '</p>';
    $status_code = wp_remote_retrieve_response_code($response);
    $body = wp_remote_retrieve_body($response);
    $output = '<ul>';
    if ($status_code != 200) {
        $output .= '<li class="error"><strong>Test Failed.</strong> HTTP Status: ' . esc_html($status_code) . '</li>';
        if ($status_code == 404) $output .= '<li class="error">This means the sheet was "Not Found". Please ensure its sharing setting is "Anyone with the link can view".</li>';
        else $output .= '<li class="error">Raw Response Body (first 200 chars): <br><code>' . esc_html(substr(strip_tags($body), 0, 200)) . '</code></li>';
    } else {
        $rows = preg_split('/\r\n|\r|\n/', $body);
        $output .= '<li class="success"><strong>Test Succeeded!</strong> HTTP Status: 200 OK.</li><li class="success">Found ' . (count($rows) - 1) . ' data rows.</li><li><strong>Data Preview (first 5 rows):</strong><br><pre>' . esc_html(implode("\n", array_slice($rows, 0, 5))) . '</pre></li>';
    }
    return $output . '</ul>';
}


// --- EXAM PROGRAM CPT ADMIN COLUMNS ---

if (!function_exists('mco_add_exam_program_columns')) {
    function mco_add_exam_program_columns($columns) {
        $new_columns = [];
        foreach ($columns as $key => $title) {
            $new_columns[$key] = $title;
            if ($key === 'title') {
                $new_columns['_mco_certification_exam_sku'] = 'Certification SKU';
                $new_columns['exam_practice_questions'] = 'Practice Qs';
                $new_columns['exam_cert_questions'] = 'Cert Qs';
                $new_columns['exam_pass_score'] = 'Pass Score';
                $new_columns['_mco_is_proctored'] = 'Proctored';
            }
        }
        return $new_columns;
    }
}

if (!function_exists('mco_display_exam_program_columns')) {
    function mco_display_exam_program_columns($column_name, $post_id) {
        switch ($column_name) {
            case '_mco_certification_exam_sku':
                $sku = get_post_meta($post_id, '_mco_certification_exam_sku', true);
                echo $sku ? esc_html($sku) : '—';
                break;
            case 'exam_practice_questions':
            case 'exam_cert_questions':
            case 'exam_pass_score':
                $terms = get_the_terms($post_id, $column_name);
                if (!empty($terms) && !is_wp_error($terms)) {
                    echo esc_html($terms[0]->name);
                } else {
                    echo '—';
                }
                break;
            case '_mco_is_proctored':
                $is_proctored = get_post_meta($post_id, '_mco_is_proctored', true);
                echo $is_proctored ? 'Yes' : 'No';
                break;
        }
    }
}

// --- CONTENT SEO ENGINE ---

function mco_handle_schedule_bulk_posts() {
    if (!isset($_POST['_wpnonce']) || !wp_verify_nonce($_POST['_wpnonce'], 'mco_schedule_bulk_posts_nonce')) {
        wp_die('Security check failed');
    }
    if (!current_user_can('publish_posts')) {
        wp_die('You do not have permission to publish posts.');
    }

    $num_posts = isset($_POST['num_posts']) ? intval($_POST['num_posts']) : 1;
    $start_date = isset($_POST['start_date']) ? sanitize_text_field($_POST['start_date']) : date('Y-m-d');
    $post_interval_str = isset($_POST['post_interval']) ? sanitize_text_field($_POST['post_interval']) : '1 day';
    $post_category = isset($_POST['post_category']) ? (int)$_POST['post_category'] : 0;
    $post_author = isset($_POST['post_author']) ? (int)$_POST['post_author'] : get_current_user_id();

    $programs_page_url = esc_url_raw(get_option('mco_exam_programs_page_url'));

    $interval_in_seconds = strtotime('+ ' . $post_interval_str) - time();

    $thirty_days_ago = time() - (30 * DAY_IN_SECONDS);
    $args = [
        'post_type' => 'mco_exam_program',
        'posts_per_page' => -1,
        'post_status' => 'publish',
        'meta_query' => [
            'relation' => 'OR',
            ['key' => '_mco_last_posted_timestamp', 'compare' => 'NOT EXISTS'],
            ['key' => '_mco_last_posted_timestamp', 'value' => $thirty_days_ago, 'compare' => '<', 'type' => 'NUMERIC'],
        ],
    ];
    $eligible_programs = get_posts($args);
    shuffle($eligible_programs);

    $warning_message = '';
    if (count($eligible_programs) < $num_posts) {
        $warning_message = 'Warning: Only found ' . count($eligible_programs) . ' eligible programs. Scheduled ' . count($eligible_programs) . ' posts instead of the requested ' . $num_posts . '. ';
        $num_posts = count($eligible_programs);
    }

    $scheduled_count = 0;
    $errors = [];

    for ($i = 0; $i < $num_posts; $i++) {
        $program = $eligible_programs[$i];
        $program_id = $program->ID;

        $program_title = wp_strip_all_tags(get_the_title($program_id));
        $program_desc = wp_strip_all_tags($program->post_content);

        $schedule_timestamp = strtotime($start_date) + ($i * $interval_in_seconds);
        $post_date = date('Y-m-d H:i:s', $schedule_timestamp);
        $post_date_gmt = get_gmt_from_date($post_date);

        $post_title = 'Prepare for the ' . $program_title . ' Exam';
        
        $post_content = '<!-- wp:paragraph --><p>Are you looking to advance your career and validate your expertise? The <strong>' . esc_html($program_title) . '</strong> certification is a significant step for professionals in our field. This exam is designed to test your comprehensive knowledge and practical skills.</p><!-- /wp:paragraph --><!-- wp:heading --><h2 class="wp-block-heading">About the ' . esc_html($program_title) . '</h2><!-- /wp:heading --><!-- wp:paragraph --><p>' . esc_html($program_desc) . '</p><!-- /wp:paragraph --><!-- wp:group {"style":{"spacing":{"padding":{"top":"var:preset|spacing|50","bottom":"var:preset|spacing|50","left":"var:preset|spacing|50","right":"var:preset|spacing|50"}},"border":{"radius":"8px"}},"backgroundColor":"vivid-cyan-blue","textColor":"white","layout":{"type":"constrained"}} --><div class="wp-block-group has-white-color has-vivid-cyan-blue-background-color has-text-color has-background" style="border-radius:8px;padding-top:var(--wp--preset--spacing--50);padding-right:var(--wp--preset--spacing--50);padding-bottom:var(--wp--preset--spacing--50);padding-left:var(--wp--preset--spacing--50)"><!-- wp:heading {"textAlign":"center","level":3,"textColor":"white"} --><h3 class="wp-block-heading has-text-align-center has-white-color has-text-color">Ready to Get Started?</h3><!-- /wp:heading --><!-- wp:paragraph {"align":"center"} --><p class="has-text-align-center">Our comprehensive exam showcase includes practice tests, certification exams, and valuable bundles to help you succeed.</p><!-- /wp:paragraph --><!-- wp:buttons {"layout":{"type":"flex","justifyContent":"center"}} --><div class="wp-block-buttons"><!-- wp:button {"backgroundColor":"luminous-vivid-amber","textColor":"black","className":"is-style-fill"} --><div class="wp-block-button is-style-fill"><a class="wp-block-button__link has-black-color has-luminous-vivid-amber-background-color has-text-color has-background" href="' . esc_url($programs_page_url) . '" rel="noopener">Explore All Exam Programs</a></div><!-- /wp:button --></div><!-- /wp:buttons --></div><!-- /wp:group -->';

        $new_post_args = [
            'post_title' => $post_title,
            'post_content' => $post_content,
            'post_status' => 'future',
            'post_date' => $post_date,
            'post_date_gmt' => $post_date_gmt,
            'post_author' => $post_author,
            'post_category' => $post_category > 0 ? [$post_category] : [],
        ];

        $new_post_id = wp_insert_post($new_post_args, true);

        if (is_wp_error($new_post_id)) {
            $errors[] = $new_post_id->get_error_message();
        } else {
            update_post_meta($program_id, '_mco_last_posted_timestamp', time());
            add_post_meta($new_post_id, '_mco_source_program_id', $program_id);
            $scheduled_count++;
        }
    }

    $final_message = $warning_message . 'Successfully scheduled ' . $scheduled_count . ' posts.';
    if (!empty($errors)) {
        $final_message .= ' Errors occurred for ' . count($errors) . ' posts: ' . implode(', ', $errors);
    }
    
    set_transient('mco_post_generator_message', $final_message, 60);
    wp_redirect(admin_url('admin.php?page=mco-exam-engine&tab=content_engine&mco_post_status=success'));
    exit;
}
?>