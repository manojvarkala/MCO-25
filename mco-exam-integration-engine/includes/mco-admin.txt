<?php
if (!defined('ABSPATH')) exit;

// --- ADMIN MENU & PAGE ---

if (!function_exists('mco_register_admin_hooks')) {
    function mco_register_admin_hooks() {
        add_action('admin_menu', 'mco_add_admin_menu');
        add_action('admin_enqueue_scripts', 'mco_admin_enqueue_scripts');
        add_action('admin_post_mco_bulk_import_csv', 'mco_handle_csv_upload');
        add_action('add_meta_boxes', 'mco_add_exam_program_meta_boxes');
        add_action('save_post_mco_exam_program', 'mco_save_exam_program_meta_data');
        add_filter('manage_mco_exam_program_posts_columns', 'mco_add_exam_program_columns');
        add_action('manage_mco_exam_program_posts_custom_column', 'mco_display_exam_program_columns', 10, 2);
    }
}

// --- EXAM PROGRAM CPT META BOX ---

if (!function_exists('mco_add_exam_program_meta_boxes')) {
    function mco_add_exam_program_meta_boxes() {
        add_meta_box(
            'mco_exam_program_settings',
            'Exam Program Settings',
            'mco_render_exam_program_meta_box',
            'mco_exam_program',
            'normal', // Changed to 'normal' to accommodate more fields
            'high'
        );
    }
}

if (!function_exists('mco_render_exam_program_meta_box')) {
    function mco_render_exam_program_meta_box($post) {
        wp_nonce_field('mco_save_exam_program_meta_data', 'mco_exam_program_meta_nonce');
        
        $certificate_enabled = get_post_meta($post->ID, '_mco_certificate_enabled', true);
        if ($certificate_enabled === '') $certificate_enabled = '1';

        $practice_title_override = get_post_meta($post->ID, '_mco_practice_exam_title_override', true);
        $cert_title_override = get_post_meta($post->ID, '_mco_cert_exam_title_override', true);
        ?>
        <table class="form-table">
            <tbody>
                <tr>
                    <th scope="row"><label for="mco_practice_exam_title_override">Practice Exam Title Override</label></th>
                    <td><input type="text" id="mco_practice_exam_title_override" name="mco_practice_exam_title_override" value="<?php echo esc_attr($practice_title_override); ?>" class="widefat" />
                    <p class="description">Optional. If empty, defaults to "[Program Title] Practice".</p></td>
                </tr>
                 <tr>
                    <th scope="row"><label for="mco_cert_exam_title_override">Certification Exam Title Override</label></th>
                    <td><input type="text" id="mco_cert_exam_title_override" name="mco_cert_exam_title_override" value="<?php echo esc_attr($cert_title_override); ?>" class="widefat" />
                     <p class="description">Optional. If empty, defaults to the main program title.</p></td>
                </tr>
                <tr>
                    <th scope="row">Certificate</th>
                    <td>
                        <label for="mco_certificate_enabled">
                            <input type="checkbox" name="mco_certificate_enabled" id="mco_certificate_enabled" value="1" <?php checked($certificate_enabled, '1'); ?> />
                            <strong>Enable Certificate on Pass</strong>
                        </label>
                        <p class="description">
                            If checked, a certificate will be issued for the main "Certification Exam". If unchecked, it will be treated as a "Proficiency Exam" with no certificate.
                        </p>
                    </td>
                </tr>
            </tbody>
        </table>
        <?php
    }
}

if (!function_exists('mco_save_exam_program_meta_data')) {
    function mco_save_exam_program_meta_data($post_id) {
        if (!isset($_POST['mco_exam_program_meta_nonce']) || !wp_verify_nonce($_POST['mco_exam_program_meta_nonce'], 'mco_save_exam_program_meta_data')) {
            return;
        }
        if (defined('DOING_AUTOSAVE') && DOING_AUTOSAVE) {
            return;
        }
        if (!current_user_can('edit_post', $post_id)) {
            return;
        }

        // Save certificate enabled status
        $cert_enabled_value = isset($_POST['mco_certificate_enabled']) && $_POST['mco_certificate_enabled'] === '1' ? '1' : '0';
        update_post_meta($post_id, '_mco_certificate_enabled', $cert_enabled_value);

        // Save title overrides
        if (isset($_POST['mco_practice_exam_title_override'])) {
            update_post_meta($post_id, '_mco_practice_exam_title_override', sanitize_text_field($_POST['mco_practice_exam_title_override']));
        }
        if (isset($_POST['mco_cert_exam_title_override'])) {
            update_post_meta($post_id, '_mco_cert_exam_title_override', sanitize_text_field($_POST['mco_cert_exam_title_override']));
        }
    }
}


if (!function_exists('mco_admin_enqueue_scripts')) {
    function mco_admin_enqueue_scripts($hook) {
        // Load styles and scripts only on our plugin page
        if (strpos($hook, 'mco-exam-engine') === false) {
            return;
        }
        
        // Enqueue WordPress media scripts
        wp_enqueue_media();

        ?>
        <style>
            .mco-admin-wrap { max-width: 960px; }
            .mco-admin-wrap h1 { margin-bottom: 20px; }
            .mco-admin-wrap .nav-tab { font-size: 14px; }
            .mco-admin-wrap .tab-content { margin-top: 20px; }
            .mco-admin-wrap .form-table th { width: 200px; }
            .mco-admin-wrap .form-table td input[type="text"], .mco-admin-wrap .form-table td textarea { width: 100%; max-width: 500px; }
            .mco-admin-wrap .form-table td .image-upload-wrapper { display: flex; align-items: center; gap: 10px; }
            .mco-admin-wrap .form-table td .image-upload-wrapper textarea { flex-grow: 1; }
            .mco-admin-wrap .form-table td textarea { height: 100px; }
            .mco-admin-wrap .notice-success { border-left-color: #4CAF50; }
            .mco-admin-wrap .notice-error { border-left-color: #F44336; }
            .mco-admin-wrap .notice-warning { border-left-color: #FFC107; }
            .mco-feedback-box { background-color: #f8f9fa; border: 1px solid #dee2e6; border-radius: 4px; padding: 15px; margin-top: 20px; max-height: 400px; overflow-y: auto; font-family: monospace; font-size: 13px; }
            .mco-feedback-box.full-height { max-height: none; }
            .mco-feedback-box ul { margin: 0; padding-left: 20px; }
            .mco-feedback-box li.error { color: #dc3545; }
            .mco-feedback-box li.success { color: #28a745; }
        </style>
        <script>
        jQuery(document).ready(function($){
            $('body').on('click', '.mco-upload-image-button', function(e) {
                e.preventDefault();
                var button = $(this);
                var targetInput = button.siblings('textarea');
                
                var mediaUploader = wp.media({
                    title: 'Select or Upload Signature Image',
                    button: { text: 'Use this image URL' },
                    multiple: false
                });

                mediaUploader.on('select', function() {
                    var attachment = mediaUploader.state().get('selection').first().toJSON();
                    targetInput.val(attachment.url);
                });

                mediaUploader.open();
            });
        });
        </script>
        <?php
    }
}

if (!function_exists('mco_exam_engine_admin_page')) {
    function mco_exam_engine_admin_page() {
        if (isset($_POST['mco_save_settings_nonce']) && wp_verify_nonce($_POST['mco_save_settings_nonce'], 'mco_save_settings')) {
            $form_action = isset($_POST['mco_form_action']) ? sanitize_text_field($_POST['mco_form_action']) : '';

            if ($form_action === 'save_main_settings') {
                update_option('mco_exam_app_url', sanitize_textarea_field($_POST['mco_exam_app_url']));
                update_option('mco_is_spin_wheel_enabled', isset($_POST['mco_is_spin_wheel_enabled']) ? 1 : 0);
                
                $logo_url_input = isset($_POST['mco_logo_url']) ? trim(wp_unslash($_POST['mco_logo_url'])) : '';
                $url_to_save = '';
                
                if (strpos($logo_url_input, 'data:image') === 0) {
                    $url_to_save = $logo_url_input;
                } else {
                    $url_to_save = esc_url_raw($logo_url_input);
                }

                update_option('mco_logo_url', $url_to_save);
                
                $saved_logo_value = get_option('mco_logo_url');
                if (!empty($logo_url_input) && empty($saved_logo_value)) {
                    add_settings_error(
                        'mco_settings',
                        'logo_save_failed',
                        'The provided logo data URI could not be saved. This often happens if the base64 code is too long for your server\'s database configuration. <strong>Recommended solution:</strong> Upload the logo to your WordPress Media Library and paste the file URL here instead.',
                        'error'
                    );
                }

                delete_transient('mco_app_config_data');
                update_option('mco_config_version', current_time('YmdHis'));
                echo '<div class="notice notice-success is-dismissible"><p>Settings saved and cache cleared.</p></div>';

            } elseif ($form_action === 'save_theme_settings') {
                update_option('mco_active_theme', sanitize_text_field($_POST['mco_active_theme']));
                delete_transient('mco_app_config_data');
                update_option('mco_config_version', current_time('YmdHis'));
                echo '<div class="notice notice-success is-dismissible"><p>Theme settings saved.</p></div>';
            }
        }

        $active_tab = isset($_GET['tab']) ? $_GET['tab'] : 'main_settings';
        ?>
        <div class="wrap mco-admin-wrap">
            <h1>Exam App Engine - Settings & Tools</h1>
            <?php settings_errors('mco_settings'); ?>
            <nav class="nav-tab-wrapper">
                <a href="?page=mco-exam-engine&tab=main_settings" class="nav-tab <?php echo $active_tab == 'main_settings' ? 'nav-tab-active' : ''; ?>">Main Settings</a>
                <a href="?page=mco-exam-engine&tab=theme_selector" class="nav-tab <?php echo $active_tab == 'theme_selector' ? 'nav-tab-active' : ''; ?>">Theme Selector</a>
                <a href="?page=mco-exam-engine&tab=bulk_import" class="nav-tab <?php echo $active_tab == 'bulk_import' ? 'nav-tab-active' : ''; ?>">Bulk Import</a>
                <a href="?page=mco-exam-engine&tab=certificate_templates" class="nav-tab <?php echo $active_tab == 'certificate_templates' ? 'nav-tab-active' : ''; ?>">Certificate Templates</a>
                <a href="?page=mco-exam-engine&tab=tools" class="nav-tab <?php echo $active_tab == 'tools' ? 'nav-tab-active' : ''; ?>">Tools</a>
            </nav>
            <div class="tab-content">
                <?php
                if ($active_tab == 'main_settings') {
                    mco_render_main_settings_tab();
                } elseif ($active_tab == 'theme_selector') {
                    mco_render_theme_selector_tab();
                } elseif ($active_tab == 'bulk_import') {
                    mco_render_bulk_import_tab();
                } elseif ($active_tab == 'certificate_templates') {
                    mco_render_certificate_templates_tab();
                } elseif ($active_tab == 'tools') {
                    mco_render_tools_tab();
                }
                ?>
            </div>
        </div>
        <?php
    }
}

function mco_render_main_settings_tab() {
    ?>
    <form method="post" action="?page=mco-exam-engine&tab=main_settings">
        <?php wp_nonce_field('mco_save_settings', 'mco_save_settings_nonce'); ?>
        <input type="hidden" name="mco_form_action" value="save_main_settings">
        <table class="form-table">
            <tr valign="top">
                <th scope="row">Exam Application URL(s)</th>
                <td>
                    <textarea name="mco_exam_app_url"><?php echo esc_textarea(get_option('mco_exam_app_url')); ?></textarea>
                    <p class="description">Enter the full URL of your React exam app. Add multiple URLs on new lines if needed (e.g., for different environments like Vercel previews).</p>
                </td>
            </tr>
             <tr valign="top">
                <th scope="row">Custom Logo URL</th>
                <td>
                    <textarea name="mco_logo_url" rows="4"><?php echo esc_textarea(get_option('mco_logo_url')); ?></textarea>
                    <p class="description">Optional. Enter the full URL to a custom logo (e.g., https://...) or paste a base64 data URI (e.g., data:image/png;base64,...). If empty, it will use the Site Icon from Customizer.</p>
                </td>
            </tr>
            <tr valign="top">
                <th scope="row">Enable "Spin & Win"</th>
                <td>
                    <input type="checkbox" name="mco_is_spin_wheel_enabled" value="1" <?php checked(1, get_option('mco_is_spin_wheel_enabled', 0)); ?> />
                    <label for="mco_is_spin_wheel_enabled">Enable the gamified prize wheel for users.</label>
                </td>
            </tr>
            <tr valign="top">
                <th scope="row">JWT Secret Key</th>
                <td>
                    <code><?php echo defined('MCO_JWT_SECRET') ? 'Defined in wp-config.php' : '<strong>Not Defined!</strong>'; ?></code>
                    <p class="description">For security, you must define <code>MCO_JWT_SECRET</code> in your <code>wp-config.php</code> file. e.g., <code>define('MCO_JWT_SECRET', 'your-long-random-secret-key');</code></p>
                </td>
            </tr>
        </table>
        <?php submit_button(); ?>
    </form>
    <?php
}

function mco_render_theme_selector_tab() {
    ?>
    <form method="post" action="?page=mco-exam-engine&tab=theme_selector">
        <?php wp_nonce_field('mco_save_settings', 'mco_save_settings_nonce'); ?>
        <input type="hidden" name="mco_form_action" value="save_theme_settings">
        <h2>Application Theme</h2>
        <p>Select the default visual theme for the exam application. Users can override this choice in their own profile.</p>
        <table class="form-table">
            <tr valign="top">
                <th scope="row">Default Theme</th>
                <td>
                    <select name="mco_active_theme" style="min-width: 200px;">
                        <option value="default" <?php selected(get_option('mco_active_theme', 'default'), 'default'); ?>>Cyberpunk (Default)</option>
                        <option value="professional" <?php selected(get_option('mco_active_theme'), 'professional'); ?>>Professional (Blue)</option>
                        <option value="serene" <?php selected(get_option('mco_active_theme'), 'serene'); ?>>Serene (Green)</option>
                        <option value="academic" <?php selected(get_option('mco_active_theme'), 'academic'); ?>>Academic (Crimson)</option>
                        <option value="noir" <?php selected(get_option('mco_active_theme'), 'noir'); ?>>Noir (Dark)</option>
                    </select>
                </td>
            </tr>
        </table>
        <?php submit_button(); ?>
    </form>
    <?php
}


function mco_render_bulk_import_tab() {
    ?>
    <h2>Bulk Import via CSV</h2>
    <p>Upload a CSV file to create or update multiple Exam Programs or Recommended Books at once. Ensure your file matches the required format.</p>
    
    <?php
    if (isset($_GET['import_status'])) {
        $status = sanitize_text_field($_GET['import_status']);
        $feedback_html = get_transient('mco_import_feedback');
        delete_transient('mco_import_feedback');

        if ($status === 'success' && $feedback_html) {
            echo '<div class="notice notice-success is-dismissible"><p>CSV import processed.</p></div>';
            echo '<div class="mco-feedback-box full-height">' . wp_kses_post($feedback_html) . '</div>';
        } elseif ($status === 'error' && $feedback_html) {
            echo '<div class="notice notice-error is-dismissible"><p>CSV import failed.</p></div>';
            echo '<div class="mco-feedback-box full-height">' . wp_kses_post($feedback_html) . '</div>';
        }
    }
    ?>

    <h3>Import Exam Programs</h3>
    <p>Required columns: <code>program_title, program_description, question_source_url, certification_exam_sku, is_proctored, certificate_enabled, recommended_book_id, practice_questions, practice_duration, cert_questions, cert_duration, pass_score, status</code></p>
    <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>" enctype="multipart/form-data">
        <input type="hidden" name="action" value="mco_bulk_import_csv">
        <input type="hidden" name="import_type" value="exam_programs">
        <?php wp_nonce_field('mco_bulk_import_csv_nonce', 'mco_bulk_import_csv_nonce'); ?>
        <table class="form-table">
            <tr valign="top">
                <th scope="row">Exam Programs CSV File</th>
                <td><input type="file" name="csv_file" accept=".csv" required></td>
            </tr>
        </table>
        <?php submit_button('Import Exam Programs'); ?>
    </form>

    <hr>

    <h3>Import Recommended Books</h3>
    <p>Required columns: <code>book_id, title, description, thumbnail_url, link_com, link_in, link_ae, status</code></p>
    <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>" enctype="multipart/form-data">
        <input type="hidden" name="action" value="mco_bulk_import_csv">
        <input type="hidden" name="import_type" value="recommended_books">
        <?php wp_nonce_field('mco_bulk_import_csv_nonce', 'mco_bulk_import_csv_nonce'); ?>
        <table class="form-table">
            <tr valign="top">
                <th scope="row">Recommended Books CSV File</th>
                <td><input type="file" name="csv_file" accept=".csv" required></td>
            </tr>
        </table>
        <?php submit_button('Import Recommended Books'); ?>
    </form>
    <?php
}

function mco_handle_csv_upload() {
    if (!isset($_POST['mco_bulk_import_csv_nonce']) || !wp_verify_nonce($_POST['mco_bulk_import_csv_nonce'], 'mco_bulk_import_csv_nonce')) {
        wp_die('Security check failed');
    }
    if (empty($_FILES['csv_file']['tmp_name'])) {
        set_transient('mco_import_feedback', '<p class="error">No file uploaded.</p>', 60);
        wp_redirect(admin_url('admin.php?page=mco-exam-engine&tab=bulk_import&import_status=error'));
        exit;
    }

    $import_type = sanitize_text_field($_POST['import_type']);
    $file_path = $_FILES['csv_file']['tmp_name'];

    if ($import_type === 'exam_programs') {
        $feedback = mco_process_csv_import($file_path);
    } elseif ($import_type === 'recommended_books') {
        $feedback = mco_process_books_csv_import($file_path);
    } else {
        $feedback = '<p class="error">Invalid import type specified.</p>';
    }

    set_transient('mco_import_feedback', $feedback, 60);
    wp_redirect(admin_url('admin.php?page=mco-exam-engine&tab=bulk_import&import_status=success'));
    exit;
}

function mco_process_csv_import($file_path) {
    if (!is_file($file_path)) { return '<p class="error">File not found.</p>'; }
    $handle = fopen($file_path, "r");
    if ($handle === FALSE) { return '<p class="error">Could not open file.</p>'; }

    $headers = array_map('trim', fgetcsv($handle, 1000, ","));
    $required_headers = ['program_title', 'program_description', 'question_source_url', 'certification_exam_sku', 'is_proctored', 'certificate_enabled', 'recommended_book_id', 'practice_questions', 'practice_duration', 'cert_questions', 'cert_duration', 'pass_score', 'status'];
    
    if (count(array_intersect($required_headers, $headers)) !== count($required_headers)) {
        return '<p class="error">CSV headers do not match the required format. Missing: ' . implode(', ', array_diff($required_headers, $headers)) . '</p>';
    }

    $created_count = 0; $updated_count = 0; $skipped_count = 0;
    $errors = []; $row_num = 1;

    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $row_num++;
        $row = array_combine($headers, $data);
        
        $program_title = sanitize_text_field($row['program_title']);
        if (empty($program_title)) { $skipped_count++; continue; }

        $post_data = [
            'post_title' => $program_title,
            'post_content' => wp_kses_post($row['program_description']),
            'post_type' => 'mco_exam_program',
            'post_status' => sanitize_text_field($row['status']),
        ];

        $existing_post = get_page_by_title($program_title, OBJECT, 'mco_exam_program');
        $post_id = 0;

        if ($existing_post) {
            $post_id = $existing_post->ID;
            $post_data['ID'] = $post_id;
            $result = wp_update_post($post_data, true);
            
            if (is_wp_error($result)) {
                $errors[] = "Failed to process '{$program_title}': " . $result->get_error_message();
            } else {
                $updated_count++;
            }
        } else {
            $result = wp_insert_post($post_data, true);
            if (is_wp_error($result)) {
                $errors[] = "Failed to create '{$program_title}': " . $result->get_error_message();
            } else {
                $post_id = $result;
                $created_count++;
            }
        }

        if ($post_id > 0 && !is_wp_error($result)) {
            $taxonomies = [
                'exam_practice_questions' => 'practice_questions',
                'exam_practice_duration'  => 'practice_duration',
                'exam_cert_questions'     => 'cert_questions',
                'exam_cert_duration'      => 'cert_duration',
                'exam_pass_score'         => 'pass_score',
            ];
            foreach($taxonomies as $tax_slug => $csv_key) {
                wp_set_post_terms($post_id, sanitize_text_field($row[$csv_key]), $tax_slug, false);
            }

            update_post_meta($post_id, '_mco_certification_exam_sku', sanitize_text_field($row['certification_exam_sku']));
            update_post_meta($post_id, '_mco_question_source_url', esc_url_raw($row['question_source_url']));
            update_post_meta($post_id, '_mco_is_proctored', intval($row['is_proctored']));
            update_post_meta($post_id, '_mco_certificate_enabled', intval($row['certificate_enabled']));
            
            $book_slugs = array_map('trim', explode(',', $row['recommended_book_id']));
            $book_post_ids = [];
            foreach($book_slugs as $slug) {
                if (empty($slug)) continue;
                $book_query = new WP_Query([
                    'post_type' => 'mco_recommended_book',
                    'meta_key' => '_mco_book_id',
                    'meta_value' => $slug,
                    'posts_per_page' => 1,
                    'fields' => 'ids'
                ]);
                if ($book_query->have_posts()) {
                    $book_post_ids[] = $book_query->posts[0];
                }
            }
            update_post_meta($post_id, '_mco_recommended_book_ids', $book_post_ids);
        }
    }
    fclose($handle);
    
    delete_transient('mco_app_config_data');
    update_option('mco_config_version', current_time('YmdHis'));

    $feedback = '<ul>';
    $feedback .= '<li class="success">Import complete.</li>';
    $feedback .= '<li class="success">Created: ' . $created_count . '</li>';
    $feedback .= '<li class="success">Updated: ' . $updated_count . '</li>';
    $feedback .= '<li class="success">Skipped: ' . $skipped_count . '</li>';
    $feedback .= '<li class="error">Failed: ' . count($errors) . '</li>';
    foreach($errors as $error) { $feedback .= '<li class="error">' . esc_html($error) . '</li>'; }
    $feedback .= '</ul>';

    return $feedback;
}

function mco_process_books_csv_import($file_path) {
    if (!is_file($file_path)) { return '<p class="error">File not found.</p>'; }
    $handle = fopen($file_path, "r");
    if ($handle === FALSE) { return '<p class="error">Could not open file.</p>'; }

    $headers = array_map('trim', fgetcsv($handle, 1000, ","));
    $required_headers = ['book_id', 'title', 'description', 'thumbnail_url', 'link_com', 'link_in', 'link_ae', 'status'];

    if (count(array_intersect($required_headers, $headers)) !== count($required_headers)) {
        return '<p class="error">CSV headers do not match the required format for books.</p>';
    }

    $created_count = 0; $updated_count = 0; $skipped_count = 0;
    $errors = []; $row_num = 1;

    while (($data = fgetcsv($handle, 1000, ",")) !== FALSE) {
        $row_num++;
        $row = array_combine($headers, $data);
        
        $book_id_slug = sanitize_text_field($row['book_id']);
        if (empty($book_id_slug)) { $skipped_count++; continue; }

        $post_data = [
            'post_title' => sanitize_text_field($row['title']),
            'post_content' => wp_kses_post($row['description']),
            'post_type' => 'mco_recommended_book',
            'post_status' => sanitize_text_field($row['status']),
        ];
        
        $existing_post_query = new WP_Query([
            'post_type' => 'mco_recommended_book',
            'meta_key' => '_mco_book_id',
            'meta_value' => $book_id_slug,
            'posts_per_page' => 1,
            'fields' => 'ids'
        ]);
        $existing_post_id = !empty($existing_post_query->posts) ? $existing_post_query->posts[0] : null;

        $post_id = 0;
        if ($existing_post_id) {
            $post_id = $existing_post_id;
            $post_data['ID'] = $post_id;
            $result = wp_update_post($post_data, true);
            if (is_wp_error($result)) {
                $errors[] = "Failed to update book '{$post_data['post_title']}': " . $result->get_error_message();
            } else {
                $updated_count++;
            }
        } else {
            $result = wp_insert_post($post_data, true);
            if (is_wp_error($result)) {
                $errors[] = "Failed to create book '{$post_data['post_title']}': " . $result->get_error_message();
            } else {
                $post_id = $result;
                $created_count++;
            }
        }

        if ($post_id > 0 && !is_wp_error($result)) {
            update_post_meta($post_id, '_mco_book_id', $book_id_slug);
            update_post_meta($post_id, '_mco_thumbnail_url', esc_url_raw($row['thumbnail_url']));
            update_post_meta($post_id, '_mco_link_com', esc_url_raw($row['link_com']));
            update_post_meta($post_id, '_mco_link_in', esc_url_raw($row['link_in']));
            update_post_meta($post_id, '_mco_link_ae', esc_url_raw($row['link_ae']));
        }
    }
    fclose($handle);
    
    delete_transient('mco_app_config_data');
    update_option('mco_config_version', current_time('YmdHis'));

    $feedback = '<ul>';
    $feedback .= '<li class="success">Book import complete.</li>';
    $feedback .= '<li class="success">Created: ' . $created_count . '</li>';
    $feedback .= '<li class="success">Updated: ' . $updated_count . '</li>';
    $feedback .= '<li class="success">Skipped: ' . $skipped_count . '</li>';
    $feedback .= '<li class="error">Failed: ' . count($errors) . '</li>';
    foreach($errors as $error) { $feedback .= '<li class="error">' . esc_html($error) . '</li>'; }
    $feedback .= '</ul>';

    return $feedback;
}

function mco_get_default_certificate_templates() {
    return [
        'cert-practice' => [
            'id' => 'cert-practice',
            'name' => 'Default Practice Certificate',
            'title' => 'Certificate of Proficiency',
            'body' => "For successfully completing the {examName} with a final score of <strong>{finalScore}%</strong>.",
            'signature1Name' => 'Manoj Balakrishnan',
            'signature1Title' => 'CEO, Annapoorna Infotech',
            'signature1ImageUrl' => '',
            'signature2Name' => '',
            'signature2Title' => ''
        ],
        'cert-completion' => [
            'id' => 'cert-completion',
            'name' => 'Default Completion Certificate',
            'title' => 'Certificate of Achievement',
            'body' => "This is to certify that <strong>{candidateName}</strong> has successfully completed the rigorous requirements of the <strong>{examName}</strong> and is hereby awarded this certificate upon achieving a passing score of <strong>{finalScore}%</strong>.",
            'signature1Name' => 'Manoj Balakrishnan',
            'signature1Title' => 'CEO, Annapoorna Infotech',
            'signature1ImageUrl' => '',
            'signature2Name' => 'Lead Instructor',
            'signature2Title' => 'Education Department'
        ]
    ];
}


function mco_render_certificate_templates_tab() {
    if (isset($_POST['mco_save_templates_nonce']) && wp_verify_nonce($_POST['mco_save_templates_nonce'], 'mco_save_templates')) {
        $templates_input = $_POST['certificate_templates'];
        $sanitized_templates = [];
        if (is_array($templates_input)) {
            foreach ($templates_input as $template) {
                $id = sanitize_text_field($template['id']);
                if (empty($id)) continue;

                // Custom sanitization for signature image URLs to allow base64
                $sig1_url_input = isset($template['signature1ImageUrl']) ? trim(wp_unslash($template['signature1ImageUrl'])) : '';
                $sig1_url_to_save = strpos($sig1_url_input, 'data:image') === 0 ? $sig1_url_input : esc_url_raw($sig1_url_input);
                
                $sig2_url_input = isset($template['signature2ImageUrl']) ? trim(wp_unslash($template['signature2ImageUrl'])) : '';
                $sig2_url_to_save = strpos($sig2_url_input, 'data:image') === 0 ? $sig2_url_input : esc_url_raw($sig2_url_input);

                $sanitized_templates[$id] = [
                    'id' => $id,
                    'name' => sanitize_text_field($template['name']),
                    'title' => sanitize_text_field($template['title']),
                    'body' => wp_kses_post($template['body']),
                    'signature1Name' => sanitize_text_field($template['signature1Name']),
                    'signature1Title' => sanitize_text_field($template['signature1Title']),
                    'signature1ImageUrl' => $sig1_url_to_save,
                    'signature2Name' => sanitize_text_field($template['signature2Name']),
                    'signature2Title' => sanitize_text_field($template['signature2Title']),
                    'signature2ImageUrl' => $sig2_url_to_save,
                ];
            }
        }
        update_option('mco_certificate_templates', $sanitized_templates);
        delete_transient('mco_app_config_data');
        update_option('mco_config_version', current_time('YmdHis'));
        echo '<div class="notice notice-success is-dismissible"><p>Certificate templates saved.</p></div>';
    }
    $templates = get_option('mco_certificate_templates', mco_get_default_certificate_templates());
    ?>
    <h2>Certificate Templates</h2>
    <p>Manage the templates used for generating certificates. Use placeholders like <code>{candidateName}</code>, <code>{examName}</code>, and <code>{finalScore}</code>.</p>
    <form method="post">
        <?php wp_nonce_field('mco_save_templates', 'mco_save_templates_nonce'); ?>
        <div id="mco-templates-container">
            <?php foreach ($templates as $template) : ?>
            <div class="template-item" style="border: 1px solid #ccc; padding: 15px; margin-bottom: 15px; border-radius: 4px;">
                <table class="form-table">
                    <tr><th>Template ID</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][id]" value="<?php echo esc_attr($template['id']); ?>" readonly style="background:#eee;"></td></tr>
                    <tr><th>Template Name</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][name]" value="<?php echo esc_attr($template['name']); ?>"></td></tr>
                    <tr><th>Title</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][title]" value="<?php echo esc_attr($template['title']); ?>"></td></tr>
                    <tr><th>Body</th><td><textarea name="certificate_templates[<?php echo esc_attr($template['id']); ?>][body]"><?php echo esc_textarea($template['body']); ?></textarea></td></tr>
                    <tr><th>Signature 1 Name</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature1Name]" value="<?php echo esc_attr($template['signature1Name']); ?>"></td></tr>
                    <tr><th>Signature 1 Title</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature1Title]" value="<?php echo esc_attr($template['signature1Title']); ?>"></td></tr>
                    <tr><th>Signature 1 Image</th><td>
                        <div class="image-upload-wrapper">
                            <textarea name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature1ImageUrl]" rows="3"><?php echo esc_textarea($template['signature1ImageUrl']); ?></textarea>
                            <button type="button" class="button mco-upload-image-button">Upload Image</button>
                        </div>
                        <p class="description"><strong>Recommended for PDF Downloads:</strong> Paste a <code>base64</code> data URI (e.g., <code>data:image/png;base64,...</code>). Use an online "Image to Base64" converter. Using a standard URL may cause CORS errors during PDF generation.</p>
                    </td></tr>
                    <tr><th>Signature 2 Name</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature2Name]" value="<?php echo esc_attr($template['signature2Name']); ?>"></td></tr>
                    <tr><th>Signature 2 Title</th><td><input type="text" name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature2Title]" value="<?php echo esc_attr($template['signature2Title']); ?>"></td></tr>
                    <tr><th>Signature 2 Image</th><td>
                        <div class="image-upload-wrapper">
                            <textarea name="certificate_templates[<?php echo esc_attr($template['id']); ?>][signature2ImageUrl]" rows="3"><?php echo esc_textarea($template['signature2ImageUrl']); ?></textarea>
                            <button type="button" class="button mco-upload-image-button">Upload Image</button>
                        </div>
                        <p class="description"><strong>Recommended for PDF Downloads:</strong> Paste a <code>base64</code> data URI (e.g., <code>data:image/png;base64,...</code>). Using a standard URL may cause CORS errors during PDF generation.</p>
                    </td></tr>
                </table>
            </div>
            <?php endforeach; ?>
        </div>
        <?php submit_button('Save Templates'); ?>
    </form>
    <?php
}

function mco_render_tools_tab() {
    // Handle cache clearing
    if (isset($_POST['mco_clear_cache_nonce']) && wp_verify_nonce($_POST['mco_clear_cache_nonce'], 'mco_clear_cache')) {
        delete_transient('mco_app_config_data');
        update_option('mco_config_version', current_time('YmdHis'));
        echo '<div class="notice notice-success is-dismissible"><p>Server-side application config cache has been cleared.</p></div>';
    }

    // Handle Google Sheet URL Tester
    $test_results_html = '';
    if (isset($_POST['mco_test_sheet_url_nonce']) && wp_verify_nonce($_POST['mco_test_sheet_url_nonce'], 'mco_test_sheet_url_action')) {
        $sheet_url_to_test = esc_url_raw($_POST['sheet_url_to_test']);
        $test_results_html = mco_run_sheet_url_test($sheet_url_to_test);
    }

    ?>
    <h2>Tools</h2>
    <p>Use these tools for maintenance and troubleshooting.</p>
    
    <table class="form-table">
        <tr valign="top">
            <th scope="row">Server Cache</th>
            <td>
                <form method="post" action="">
                    <?php wp_nonce_field('mco_clear_cache', 'mco_clear_cache_nonce'); ?>
                    <p class="description" style="margin-bottom: 10px;">The plugin caches app configuration data for performance. Clear this cache if you've made changes and don't see them reflected in the app.</p>
                    <?php submit_button('Clear Server Config Cache', 'secondary', 'submit_clear_cache', false); ?>
                </form>
            </td>
        </tr>
        <tr valign="top">
            <th scope="row">Google Sheet URL Tester</th>
            <td>
                <form method="post" action="">
                    <?php wp_nonce_field('mco_test_sheet_url_action', 'mco_test_sheet_url_nonce'); ?>
                    <p class="description" style="margin-bottom: 10px;">Test if a Google Sheet URL is accessible from your server. This helps diagnose "Question Sheet: Failure" errors.</p>
                    <input type="text" name="sheet_url_to_test" class="widefat" placeholder="Paste Google Sheet URL here..." value="<?php echo isset($_POST['sheet_url_to_test']) ? esc_attr($_POST['sheet_url_to_test']) : ''; ?>" />
                    <?php submit_button('Test URL', 'secondary', 'submit_test_url', false); ?>
                </form>
                <?php if (!empty($test_results_html)) : ?>
                    <div class="mco-feedback-box" style="margin-top: 15px;"><?php echo $test_results_html; ?></div>
                <?php endif; ?>
            </td>
        </tr>
    </table>
    <?php
}

function mco_run_sheet_url_test($sheet_url) {
    if (empty($sheet_url)) {
        return '<p class="error">Please provide a URL to test.</p>';
    }
    
    $csv_url = '';
    if (strpos($sheet_url, '/pub?output=csv') !== false) {
        $csv_url = $sheet_url;
    } elseif (preg_match('/spreadsheets\/d\/([a-zA-Z0-9-_]+)/', $sheet_url, $matches)) {
        $sheet_id = $matches[1];
        $csv_url = "https://docs.google.com/spreadsheets/d/{$sheet_id}/export?format=csv&gid=0";
    }

    if (empty($csv_url)) {
        return '<p class="error">Invalid Google Sheet URL format.</p>';
    }

    $response = wp_remote_get($csv_url, ['timeout' => 20, 'sslverify' => false]);

    if (is_wp_error($response)) {
        return '<p class="error">Connection Error: ' . esc_html($response->get_error_message()) . '</p>';
    }

    $status_code = wp_remote_retrieve_response_code($response);
    $body = wp_remote_retrieve_body($response);

    $output = '<ul>';
    if ($status_code != 200) {
        $output .= '<li class="error"><strong>Test Failed.</strong> HTTP Status: ' . esc_html($status_code) . '</li>';
        if ($status_code == 404) {
            $output .= '<li class="error">This means the sheet was "Not Found". Please ensure its sharing setting is "Anyone with the link can view".</li>';
        } else {
            $output .= '<li class="error">Raw Response Body (first 200 chars): <br><code>' . esc_html(substr(strip_tags($body), 0, 200)) . '</code></li>';
        }
    } else {
        $rows = preg_split('/\r\n|\r|\n/', $body);
        $output .= '<li class="success"><strong>Test Succeeded!</strong> HTTP Status: 200 OK.</li>';
        $output .= '<li class="success">Found ' . (count($rows) - 1) . ' data rows.</li>';
        $output .= '<li><strong>Data Preview (first 5 rows):</strong><br><pre>' . esc_html(implode("\n", array_slice($rows, 0, 5))) . '</pre></li>';
    }
    $output .= '</ul>';

    return $output;
}


// --- EXAM PROGRAM CPT ADMIN COLUMNS ---

if (!function_exists('mco_add_exam_program_columns')) {
    function mco_add_exam_program_columns($columns) {
        // Keep checkbox, create new title column, then merge others
        $new_columns = [
            'cb' => $columns['cb'],
            'program_title' => __('Title'),
        ];

        // Remove old title and cb to prevent duplication
        unset($columns['cb']);
        unset($columns['title']);
        
        // Add our custom columns after the new title
        $custom_cols_after_title = [
            '_mco_certification_exam_sku' => 'Certification SKU',
            'exam_practice_questions' => 'Practice Qs',
            'exam_cert_questions' => 'Cert Qs',
            'exam_pass_score' => 'Pass Score',
            '_mco_is_proctored' => 'Proctored',
        ];

        return array_merge($new_columns, $custom_cols_after_title, $columns);
    }
}

if (!function_exists('mco_display_exam_program_columns')) {
    function mco_display_exam_program_columns($column_name, $post_id) {
        switch ($column_name) {
            case 'program_title':
                $post = get_post($post_id);
                $title = strip_tags(get_the_title($post_id));
                $can_edit_post = current_user_can('edit_post', $post->ID);

                echo '<strong>';
                if ($can_edit_post && $post->post_status != 'trash') {
                    echo '<a class="row-title" href="' . esc_url(get_edit_post_link($post->ID)) . '">' . esc_html($title) . '</a>';
                } else {
                    echo esc_html($title);
                }
                echo '</strong>';

                $actions = [];
                if ($can_edit_post && 'trash' != $post->post_status) {
                    $actions['edit'] = '<a href="' . get_edit_post_link($post->ID) . '">' . __('Edit') . '</a>';
                    $actions['inline hide-if-no-js'] = '<button type="button" class="button-link editinline" aria-label="' . esc_attr(sprintf(__('Quick edit &#8220;%s&#8221; inline'), $post->post_title)) . '">' . __('Quick&nbsp;Edit') . '</button>';
                }
                if (current_user_can('delete_post', $post->ID)) {
                    if ('trash' == $post->post_status) {
                        $actions['untrash'] = '<a href="' . wp_nonce_url(admin_url(sprintf('post.php?post=%d&action=untrash', $post->ID)), 'untrash-post_' . $post->ID) . '">' . __('Restore') . '</a>';
                        $actions['delete'] = '<a href="' . get_delete_post_link($post->ID, '', true) . '">' . __('Delete Permanently') . '</a>';
                    } else {
                        $actions['trash'] = '<a href="' . get_delete_post_link($post->ID) . '" class="submitdelete">' . __('Trash') . '</a>';
                    }
                }
                if ('publish' == $post->post_status && is_post_type_viewable(get_post_type_object($post->post_type))) {
                    $actions['view'] = '<a href="' . get_permalink($post->ID) . '" rel="bookmark" >' . __('View') . '</a>';
                }

                if (!empty($actions)) {
                    echo '<div class="row-actions">' . implode(' | ', $actions) . '</div>';
                }
                
                // Needed for Quick Edit functionality to work
                if (function_exists('get_inline_data')) {
                    get_inline_data($post);
                }
                break;
            case '_mco_certification_exam_sku':
                $sku = get_post_meta($post_id, '_mco_certification_exam_sku', true);
                echo $sku ? esc_html($sku) : '—';
                break;
            case 'exam_practice_questions':
            case 'exam_cert_questions':
            case 'exam_pass_score':
                $terms = get_the_terms($post_id, $column_name);
                if (!empty($terms) && !is_wp_error($terms)) {
                    echo esc_html($terms[0]->name);
                } else {
                    echo '—';
                }
                break;
            case '_mco_is_proctored':
                $is_proctored = get_post_meta($post_id, '_mco_is_proctored', true);
                echo $is_proctored ? 'Yes' : 'No';
                break;
        }
    }
}
?>