<?php
if (!defined('ABSPATH')) exit;

// --- ADMIN MENU & PAGE ---

if (!function_exists('mco_add_admin_menu')) {
    function mco_add_admin_menu() {
        // Step 1: Create the top-level menu page. This is the parent for all other items.
        add_menu_page(
            'Exam App Engine',          // Page Title
            'Exam App Engine',          // Menu Title
            'manage_options',           // Capability
            'mco-exam-engine',          // Menu Slug (this will be the slug for the first submenu item)
            'mco_exam_engine_admin_page', // Callback function for the default page
            'dashicons-welcome-learn-more', // Icon
            25                          // Position
        );

        // Step 2: Add the CPTs as submenu items under the new parent.
        add_submenu_page(
            'mco-exam-engine',                  // Parent slug
            'Exam Programs',                    // Page Title
            'Exam Programs',                    // Menu Title
            'manage_options',                   // Capability
            'edit.php?post_type=mco_exam_program' // The link to the CPT list view
        );
        add_submenu_page(
            'mco-exam-engine',                  // Parent slug
            'Recommended Books',                // Page Title
            'Recommended Books',                // Menu Title
            'manage_options',                   // Capability
            'edit.php?post_type=mco_recommended_book' // The link to the CPT list view
        );
        
        // Step 3: Add the custom Settings & Tools page as another submenu.
        // We make its slug the same as the parent to make it the default page when clicking the top-level menu.
        add_submenu_page(
            'mco-exam-engine',              // Parent slug
            'Settings & Tools',             // Page Title
            'Settings & Tools',             // Menu Title
            'manage_options',               // Capability
            'mco-exam-engine',              // Menu Slug (matches parent to become the default)
            'mco_exam_engine_admin_page'    // Callback function
        );
    }
}


if (!function_exists('mco_register_admin_hooks')) {
    function mco_register_admin_hooks() {
        add_action('admin_menu', 'mco_add_admin_menu');
        add_action('admin_enqueue_scripts', 'mco_admin_enqueue_scripts');
        add_action('admin_post_mco_bulk_import_csv', 'mco_handle_csv_upload');
        add_action('admin_post_mco_generate_tenant_blueprint', 'mco_handle_generate_tenant_blueprint');
        add_action('admin_post_mco_generate_full_snapshot', 'mco_handle_generate_full_snapshot');
        add_action('add_meta_boxes', 'mco_add_exam_program_meta_boxes');
        add_action('save_post_mco_exam_program', 'mco_save_exam_program_meta_data');
        add_action('admin_init', 'mco_register_certificate_settings'); 
        add_action('admin_init', 'mco_register_main_settings');
        add_action('admin_notices', 'mco_display_admin_notices');
    }
}

if (!function_exists('mco_register_main_settings')) {
    function mco_register_main_settings() {
        register_setting('mco_main_options_group', 'mco_exam_app_url');
        register_setting('mco_main_options_group', 'mco_logo_url');
        register_setting('mco_main_options_group', 'mco_active_theme');
        register_setting('mco_main_options_group', 'mco_config_version');
    }
}


if (!function_exists('mco_register_certificate_settings')) {
    function mco_register_certificate_settings() {
        register_setting('mco_certificate_options_group', 'mco_certificate_templates');
        register_setting('mco_certificate_options_group', 'mco_signature1_base64');
        register_setting('mco_certificate_options_group', 'mco_signature2_base64');
        register_setting('mco_certificate_options_group', 'mco_certificate_theme');
    }
}

if (!function_exists('mco_admin_enqueue_scripts')) {
    function mco_admin_enqueue_scripts($hook) {
        // Only load on our specific admin page
        if ($hook === 'exam-app-engine_page_mco-exam-engine' || $hook === 'toplevel_page_mco-exam-engine') {
            wp_enqueue_style('mco-admin-styles', MCO_PLUGIN_URL . 'assets/mco-styles.css', array(), MCO_PLUGIN_VERSION);
        }
    }
}


if (!function_exists('mco_exam_engine_admin_page')) {
    function mco_exam_engine_admin_page() {
        $active_tab = isset($_GET['tab']) ? sanitize_key($_GET['tab']) : 'main_settings';
        ?>
        <div class="wrap mco-admin-wrap">
            <h1>MCO Exam Integration Engine</h1>
            <h2 class="nav-tab-wrapper">
                <a href="?page=mco-exam-engine&tab=main_settings" class="nav-tab <?php echo $active_tab == 'main_settings' ? 'nav-tab-active' : ''; ?>">Main Settings</a>
                <a href="?page=mco-exam-engine&tab=certificate_templates" class="nav-tab <?php echo $active_tab == 'certificate_templates' ? 'nav-tab-active' : ''; ?>">Certificate Templates</a>
                <a href="?page=mco-exam-engine&tab=theme_selector" class="nav-tab <?php echo $active_tab == 'theme_selector' ? 'nav-tab-active' : ''; ?>">Theme Selector</a>
                <a href="?page=mco-exam-engine&tab=bulk_import" class="nav-tab <?php echo $active_tab == 'bulk_import' ? 'nav-tab-active' : ''; ?>">Bulk Import</a>
                <a href="?page=mco-exam-engine&tab=tools" class="nav-tab <?php echo $active_tab == 'tools' ? 'nav-tab-active' : ''; ?>">Tools</a>
            </h2>

            <?php
            if ($active_tab == 'main_settings') {
                mco_render_main_settings_tab();
            } elseif ($active_tab == 'certificate_templates') {
                mco_render_certificate_templates_tab();
            } elseif ($active_tab == 'theme_selector') {
                mco_render_theme_selector_tab();
            } elseif ($active_tab == 'bulk_import') {
                mco_render_bulk_import_tab();
            } else { // Tools tab
                mco_render_tools_tab();
            }
            ?>
        </div>
        <?php
    }
}

if (!function_exists('mco_render_main_settings_tab')) {
    function mco_render_main_settings_tab() {
        ?>
        <form method="post" action="options.php">
            <?php
            settings_fields('mco_main_options_group');
            do_settings_sections('mco_main_options_group');
            ?>
            <table class="form-table">
                <tr valign="top">
                    <th scope="row">Exam Application URL(s)</th>
                    <td>
                        <textarea name="mco_exam_app_url" rows="4" cols="50" class="large-text" placeholder="https://yourapp.com&#x0a;https://staging.yourapp.com"><?php echo esc_attr(get_option('mco_exam_app_url')); ?></textarea>
                        <p class="description">Enter the full URL of your React application. This is required for security (CORS) and for generating correct SSO links. Add one URL per line for multi-domain setups (e.g., production and Vercel previews).</p>
                    </td>
                </tr>
                 <tr valign="top">
                    <th scope="row">Custom Logo URL</th>
                    <td>
                        <input type="text" name="mco_logo_url" value="<?php echo esc_attr(get_option('mco_logo_url')); ?>" class="large-text" placeholder="https://your-site.com/path/to/logo.png" />
                        <p class="description">Optional. Provide a direct URL to a logo file (PNG or SVG). If left blank, the app will use the "Site Icon" from <strong>Appearance &rarr; Customize</strong>. Using a direct URL here is recommended for best results on PDF certificates.</p>
                    </td>
                </tr>
                 <tr valign="top">
                    <th scope="row">JWT Secret Key</th>
                    <td>
                        <?php
                        if (defined('MCO_JWT_SECRET') && !empty(MCO_JWT_SECRET)) {
                            echo '<span style="color: green; font-weight: bold;">&#10004; Defined in wp-config.php</span>';
                        } else {
                            echo '<span style="color: red; font-weight: bold;">&#10008; Not Defined.</span> <p class="description">Please add <code>define(\'MCO_JWT_SECRET\', \'your-long-random-string\');</code> to your <code>wp-config.php</code> file.</p>';
                        }
                        ?>
                    </td>
                </tr>
            </table>
            <?php submit_button(); ?>
        </form>
        <?php
    }
}

if (!function_exists('mco_render_certificate_templates_tab')) {
    function mco_render_certificate_templates_tab() {
        if (isset($_POST['mco_certificate_templates']) && check_admin_referer('mco_save_cert_templates_nonce')) {
            $updated_templates = array();
            foreach ($_POST['mco_certificate_templates'] as $id => $template_data) {
                $updated_templates[sanitize_key($id)] = array(
                    'id'    => sanitize_key($id),
                    'name'  => sanitize_text_field($template_data['name']),
                    'title' => sanitize_text_field($template_data['title']),
                    'body'  => wp_kses_post($template_data['body']),
                    'signature1Name' => sanitize_text_field($template_data['signature1Name']),
                    'signature1Title' => sanitize_text_field($template_data['signature1Title']),
                    'signature2Name' => sanitize_text_field($template_data['signature2Name']),
                    'signature2Title' => sanitize_text_field($template_data['signature2Title']),
                );
            }
            update_option('mco_certificate_templates', $updated_templates);
            echo '<div class="notice notice-success is-dismissible"><p>Certificate templates saved.</p></div>';
        }
        
        $templates = get_option('mco_certificate_templates');
        if (empty($templates) || !is_array($templates)) {
            $templates = mco_get_default_certificate_templates();
        }
        ?>
         <form method="post" action="options.php">
            <?php
            settings_fields('mco_certificate_options_group');
            do_settings_sections('mco_certificate_options_group');
            ?>
            <h3>Signature Management</h3>
            <p>Directly input the Base64 data URI for your signature images. This ensures they are embedded correctly in downloaded PDFs.</p>
            <table class="form-table">
                 <tr valign="top">
                    <th scope="row">Default Certificate Theme</th>
                    <td>
                        <select name="mco_certificate_theme">
                            <option value="classic" <?php selected(get_option('mco_certificate_theme'), 'classic'); ?>>Classic (Serif)</option>
                            <option value="modern" <?php selected(get_option('mco_certificate_theme'), 'modern'); ?>>Modern (Sans-Serif)</option>
                        </select>
                         <p class="description">Select the default visual style for all certificates.</p>
                    </td>
                </tr>
                <tr valign="top">
                    <th scope="row">Signature 1 (Base64 Data)</th>
                    <td>
                        <textarea name="mco_signature1_base64" rows="5" class="large-text" placeholder="data:image/png;base64,..."><?php echo esc_textarea(get_option('mco_signature1_base64')); ?></textarea>
                        <p class="description">Paste the full data URI for the primary signature (e.g., Program Director).</p>
                    </td>
                </tr>
                 <tr valign="top">
                    <th scope="row">Signature 2 (Base64 Data)</th>
                    <td>
                         <textarea name="mco_signature2_base64" rows="5" class="large-text" placeholder="data:image/png;base64,..."><?php echo esc_textarea(get_option('mco_signature2_base64')); ?></textarea>
                        <p class="description">Paste the full data URI for the secondary signature (e.g., Lead Instructor).</p>
                    </td>
                </tr>
            </table>
            <?php submit_button('Save Signatures'); ?>
        </form>

        <hr>

        <form method="post" action="">
            <?php wp_nonce_field('mco_save_cert_templates_nonce'); ?>
            <h3>Certificate Content</h3>
            <p>Customize the text content for your certificates. You can use these placeholders: <code>{candidateName}</code>, <code>{examName}</code>, <code>{finalScore}</code>.</p>
            <div id="mco-certificate-accordion">
                <?php foreach ($templates as $id => $template): ?>
                    <div class="mco-accordion-item">
                        <h4 class="mco-accordion-title"><?php echo esc_html($template['name']); ?></h4>
                        <div class="mco-accordion-content">
                            <table class="form-table">
                                <tr valign="top">
                                    <th scope="row">Template Name</th>
                                    <td><input type="text" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][name]" value="<?php echo esc_attr($template['name']); ?>" class="regular-text"/></td>
                                </tr>
                                <tr valign="top">
                                    <th scope="row">Certificate Title</th>
                                    <td><input type="text" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][title]" value="<?php echo esc_attr($template['title']); ?>" class="regular-text"/></td>
                                </tr>
                                <tr valign="top">
                                    <th scope="row">Certificate Body</th>
                                    <td><textarea name="mco_certificate_templates[<?php echo esc_attr($id); ?>][body]" rows="4" class="large-text"><?php echo esc_textarea($template['body']); ?></textarea></td>
                                </tr>
                                 <tr valign="top">
                                    <th scope="row">Signature 1 Name</th>
                                    <td><input type="text" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][signature1Name]" value="<?php echo esc_attr($template['signature1Name']); ?>" class="regular-text"/></td>
                                </tr>
                                <tr valign="top">
                                    <th scope="row">Signature 1 Title</th>
                                    <td><input type="text" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][signature1Title]" value="<?php echo esc_attr($template['signature1Title']); ?>" class="regular-text"/></td>
                                </tr>
                                <tr valign="top">
                                    <th scope="row">Signature 2 Name</th>
                                    <td><input type="text" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][signature2Name]" value="<?php echo esc_attr($template['signature2Name'] ?? ''); ?>" class="regular-text"/></td>
                                </tr>
                                <tr valign="top">
                                    <th scope="row">Signature 2 Title</th>
                                    <td><input type="text" name="mco_certificate_templates[<?php echo esc_attr($id); ?>][signature2Title]" value="<?php echo esc_attr($template['signature2Title'] ?? ''); ?>" class="regular-text"/></td>
                                </tr>
                            </table>
                        </div>
                    </div>
                <?php endforeach; ?>
            </div>
            <?php submit_button('Save Templates'); ?>
        </form>
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                var titles = document.querySelectorAll('.mco-accordion-title');
                titles.forEach(function(title) {
                    title.addEventListener('click', function() {
                        this.classList.toggle('active');
                        var content = this.nextElementSibling;
                        if (content.style.maxHeight) {
                            content.style.maxHeight = null;
                        } else {
                            content.style.maxHeight = content.scrollHeight + "px";
                        } 
                    });
                });
            });
        </script>
        <?php
    }
}

if (!function_exists('mco_render_theme_selector_tab')) {
    function mco_render_theme_selector_tab() {
        ?>
        <form method="post" action="options.php">
            <?php
            settings_fields('mco_main_options_group');
            do_settings_sections('mco_main_options_group');
            $active_theme = get_option('mco_active_theme', 'default');
            $themes = array(
                'default' => 'Cyberpunk',
                'professional' => 'Professional',
                'serene' => 'Serene',
                'academic' => 'Academic',
                'noir' => 'Noir',
            );
            ?>
            <h3>Default Application Theme</h3>
            <p>Select the default theme for the examination app. Individual users can override this choice in their profile.</p>
            <div class="mco-theme-selector-grid">
                <?php foreach ($themes as $id => $name): ?>
                    <label class="mco-theme-card <?php echo $active_theme === $id ? 'mco-theme-card--selected' : ''; ?>">
                        <input type="radio" name="mco_active_theme" value="<?php echo esc_attr($id); ?>" <?php checked($active_theme, $id); ?> class="mco-theme-radio">
                        <div class="mco-theme-swatches">
                            <div class="mco-theme-swatch mco-theme-swatch--<?php echo esc_attr($id); ?>-primary"></div>
                            <div class="mco-theme-swatch mco-theme-swatch--<?php echo esc_attr($id); ?>-secondary"></div>
                            <div class="mco-theme-swatch mco-theme-swatch--<?php echo esc_attr($id); ?>-accent"></div>
                            <div class="mco-theme-swatch mco-theme-swatch--<?php echo esc_attr($id); ?>-background"></div>
                        </div>
                        <p class="mco-theme-name"><?php echo esc_html($name); ?></p>
                    </label>
                <?php endforeach; ?>
            </div>
            <?php submit_button('Save Theme'); ?>
        </form>
        <?php
    }
}

if (!function_exists('mco_render_bulk_import_tab')) {
    function mco_render_bulk_import_tab() {
        ?>
        <h3>Bulk Import Content</h3>
        <p>Use a CSV file to create or update multiple Exam Programs or Recommended Books at once. This is the most efficient way to manage a large amount of content.</p>
        
        <h4>Exam Programs</h4>
        <p>Download the template, fill it with your program data, and upload it below. The system will create new programs or update existing ones based on the <code>program_title</code>.</p>
        <a href="<?php echo esc_url(MCO_PLUGIN_URL . 'public/template-exam-programs.csv'); ?>" class="button button-secondary" download>Download Exam Program Template</a>
        <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>" enctype="multipart/form-data" style="margin-top: 1rem;">
            <input type="hidden" name="action" value="mco_bulk_import_csv">
            <input type="hidden" name="import_type" value="exam_program">
            <?php wp_nonce_field('mco_bulk_import_nonce'); ?>
            <input type="file" name="csv_file" accept=".csv">
            <?php submit_button('Upload Exam Programs CSV'); ?>
        </form>

        <hr>

        <h4>Recommended Books</h4>
        <p>Download the template, fill it with your book data, and upload it. The system will create new books or update existing ones based on the <code>book_title</code>.</p>
        <a href="<?php echo esc_url(MCO_PLUGIN_URL . 'public/template-recommended-books.csv'); ?>" class="button button-secondary" download>Download Recommended Books Template</a>
        <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>" enctype="multipart/form-data" style="margin-top: 1rem;">
            <input type="hidden" name="action" value="mco_bulk_import_csv">
            <input type="hidden" name="import_type" value="recommended_book">
            <?php wp_nonce_field('mco_bulk_import_nonce'); ?>
            <input type="file" name="csv_file" accept=".csv">
            <?php submit_button('Upload Recommended Books CSV'); ?>
        </form>
        <?php
    }
}


if (!function_exists('mco_render_tools_tab')) {
    function mco_render_tools_tab() {
        ?>
        <h3>Data Tools</h3>
        <p>Use these tools to generate configuration files for the React app. This is an advanced feature for developers and administrators.</p>
        
        <h4>Tenant Blueprint Generator</h4>
        <p>Generates a minimal JSON "scaffold" for a new tenant. It includes branding and certificate templates but no content. This is the <strong>first step</strong> in setting up a new portal.</p>
        <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>">
            <input type="hidden" name="action" value="mco_generate_tenant_blueprint">
            <?php wp_nonce_field('mco_generate_tenant_blueprint_nonce'); ?>
            <?php submit_button('Generate & Download Blueprint'); ?>
        </form>

        <hr>

        <h4>Full Content Snapshot Generator</h4>
        <p>Generates a complete JSON snapshot of all your current live content (exams, books, prices, settings). Use this to create backups or to update the static fallback file in the React app for performance optimization (see handbook for the "Golden Workflow").</p>
        <form method="post" action="<?php echo esc_url(admin_url('admin-post.php')); ?>">
            <input type="hidden" name="action" value="mco_generate_full_snapshot">
            <?php wp_nonce_field('mco_generate_full_snapshot_nonce'); ?>
            <?php submit_button('Generate & Download Snapshot'); ?>
        </form>
        <?php
    }
}

// --- BULK IMPORT & EXPORT HANDLERS ---

if (!function_exists('mco_handle_generate_tenant_blueprint')) {
    function mco_handle_generate_tenant_blueprint() {
        if (!isset($_POST['_wpnonce']) || !wp_verify_nonce($_POST['_wpnonce'], 'mco_generate_tenant_blueprint_nonce')) {
            wp_die('Security check failed.');
        }
        if (!current_user_can('manage_options')) {
            wp_die('You do not have permission to perform this action.');
        }
        $blueprint_data = mco_get_full_snapshot_data(true);
        header('Content-Type: application/json');
        header('Content-Disposition: attachment; filename="tenant-blueprint.json"');
        echo wp_json_encode($blueprint_data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
        exit;
    }
}

if (!function_exists('mco_handle_generate_full_snapshot')) {
    function mco_handle_generate_full_snapshot() {
        if (!isset($_POST['_wpnonce']) || !wp_verify_nonce($_POST['_wpnonce'], 'mco_generate_full_snapshot_nonce')) {
            wp_die('Security check failed.');
        }
        if (!current_user_can('manage_options')) {
            wp_die('You do not have permission to perform this action.');
        }
        $snapshot_data = mco_get_full_snapshot_data(false);
        header('Content-Type: application/json');
        header('Content-Disposition: attachment; filename="full-content-snapshot.json"');
        echo wp_json_encode($snapshot_data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
        exit;
    }
}

if (!function_exists('mco_handle_csv_upload')) {
    function mco_handle_csv_upload() {
        if (!isset($_POST['_wpnonce']) || !wp_verify_nonce($_POST['_wpnonce'], 'mco_bulk_import_nonce')) {
            wp_die('Security check failed.');
        }
        if (!current_user_can('manage_options')) {
            wp_die('You do not have permission to perform this action.');
        }
        if (!isset($_FILES['csv_file']) || $_FILES['csv_file']['error'] !== UPLOAD_ERR_OK) {
            mco_add_admin_notice('error', 'File upload error. Please try again.');
            wp_redirect(admin_url('admin.php?page=mco-exam-engine&tab=bulk_import'));
            exit;
        }

        $import_type = sanitize_key($_POST['import_type']);
        $file_path = $_FILES['csv_file']['tmp_name'];
        $file = fopen($file_path, 'r');
        if ($file === false) {
            mco_add_admin_notice('error', 'Could not open the uploaded CSV file.');
            wp_redirect(admin_url('admin.php?page=mco-exam-engine&tab=bulk_import'));
            exit;
        }

        $headers = fgetcsv($file);
        $created_count = 0;
        $updated_count = 0;
        $skipped_count = 0;

        while (($row = fgetcsv($file)) !== false) {
            if (count($headers) !== count($row)) {
                $skipped_count++;
                continue;
            }
            $data = array_combine($headers, $row);

            if ($import_type === 'exam_program') {
                $title = sanitize_text_field($data['program_title']);
                if (empty($title)) {
                    $skipped_count++;
                    continue;
                }
                
                $post_id = post_exists($title, '', '', 'mco_exam_program');
                
                $post_data = array(
                    'post_title' => $title,
                    'post_content' => wp_kses_post($data['program_description']),
                    'post_type' => 'mco_exam_program',
                    'post_status' => 'publish'
                );
                
                if ($post_id) {
                    $post_data['ID'] = $post_id;
                    wp_update_post($post_data);
                    $updated_count++;
                } else {
                    $post_id = wp_insert_post($post_data);
                    $created_count++;
                }
                
                if ($post_id && !is_wp_error($post_id)) {
                    $tax_map = array(
                        'practice_questions' => 'exam_practice_questions',
                        'practice_duration' => 'exam_practice_duration',
                        'cert_questions' => 'exam_cert_questions',
                        'cert_duration' => 'exam_cert_duration',
                        'pass_score' => 'exam_pass_score'
                    );
                    foreach ($tax_map as $csv_key => $tax_slug) {
                        if (isset($data[$csv_key]) && is_numeric($data[$csv_key])) {
                            wp_set_post_terms($post_id, (string)$data[$csv_key], $tax_slug, false);
                        }
                    }
                    
                    update_post_meta($post_id, '_mco_question_source_url', esc_url_raw($data['question_source_url']));
                    update_post_meta($post_id, '_mco_certification_exam_sku', sanitize_text_field($data['certification_exam_sku']));
                    update_post_meta($post_id, '_mco_is_proctored', ($data['is_proctored'] == '1' || strtolower($data['is_proctored']) == 'true') ? '1' : '0');
                    update_post_meta($post_id, '_mco_certificate_enabled', ($data['certificate_enabled'] == '1' || strtolower($data['certificate_enabled']) == 'true') ? '1' : '0');
                }

            } elseif ($import_type === 'recommended_book') {
                $title = sanitize_text_field($data['book_title']);
                $book_id_slug = sanitize_title($title);
                
                if (empty($title)) {
                    $skipped_count++;
                    continue;
                }
                
                $post_id = post_exists($title, '', '', 'mco_recommended_book');

                $post_data = array(
                    'post_title' => $title,
                    'post_content' => wp_kses_post($data['book_description']),
                    'post_type' => 'mco_recommended_book',
                    'post_status' => 'publish'
                );

                if ($post_id) {
                    $post_data['ID'] = $post_id;
                    wp_update_post($post_data);
                    $updated_count++;
                } else {
                    $post_id = wp_insert_post($post_data);
                    $created_count++;
                }
                
                if ($post_id && !is_wp_error($post_id)) {
                    update_post_meta($post_id, '_mco_book_id', $book_id_slug);
                    update_post_meta($post_id, '_mco_thumbnail_url', esc_url_raw($data['thumbnail_url']));
                    update_post_meta($post_id, '_mco_link_com', esc_url_raw($data['affiliate_link_com']));
                    update_post_meta($post_id, '_mco_link_in', esc_url_raw($data['affiliate_link_in']));
                    update_post_meta($post_id, '_mco_link_ae', esc_url_raw($data['affiliate_link_ae']));
                }
            }
        }
        fclose($file);

        delete_transient('mco_app_config_data');
        update_option('mco_config_version', current_time('YmdHis'));

        mco_add_admin_notice('success', "Import complete. Created: {$created_count}, Updated: {$updated_count}, Skipped: {$skipped_count}.");
        wp_redirect(admin_url('admin.php?page=mco-exam-engine&tab=bulk_import'));
        exit;
    }
}


if (!function_exists('mco_add_admin_notice')) {
    function mco_add_admin_notice($type, $message) {
        $notices = get_option('mco_admin_notices', array());
        $notices[] = array('type' => $type, 'message' => $message);
        update_option('mco_admin_notices', $notices);
    }
}

if (!function_exists('mco_display_admin_notices')) {
    function mco_display_admin_notices() {
        $notices = get_option('mco_admin_notices', array());
        if (!empty($notices)) {
            foreach ($notices as $notice) {
                echo '<div class="notice notice-' . esc_attr($notice['type']) . ' is-dismissible"><p>' . esc_html($notice['message']) . '</p></div>';
            }
            delete_option('mco_admin_notices');
        }
    }
}
?>