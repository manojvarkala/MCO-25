<?php
if (!defined('ABSPATH')) exit;

/*
 * =================================================================================================
 * TROUBLESHOOTING: API CONNECTION FAILED or AUTHORIZATION HEADER MISSING
 * =================================================================================================
 * If the exam application cannot connect to the API (CORS errors, fetch errors, or "Authorization
 * header missing" messages), it's almost always a server configuration issue. Many shared hosting
 * environments (like Apache/LiteSpeed) strip the necessary 'Authorization' header from requests by default.
 *
 * THE FIX:
 * Add the following code to the VERY TOP of your WordPress root .htaccess file, before the
 * # BEGIN WordPress block.
 *
 * <IfModule mod_rewrite.c>
 *   RewriteEngine On
 *   RewriteCond %{HTTP:Authorization} .
 *   RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
 * </IfModule>
 * 
 * After adding this, you MUST clear all server and plugin caches (e.g., LiteSpeed Cache).
 * Caching plugins can interfere with API routes and CORS headers.
 * =================================================================================================
 */

// --- New Universal Fetcher Function ---
if (!function_exists('mco_fetch_remote_csv_content')) {
    function mco_fetch_remote_csv_content($url) {
        if (function_exists('curl_init')) {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
            curl_setopt($ch, CURLOPT_TIMEOUT, 30);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36');
            
            $body = curl_exec($ch);
            $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            $curl_error = curl_error($ch);
            curl_close($ch);

            if ($curl_error) {
                return new WP_Error('curl_error', 'cURL Error: ' . $curl_error);
            }

            return [
                'response' => ['code' => $http_code],
                'body' => $body
            ];
        }

        // Fallback to wp_remote_get if cURL isn't available
        $args = [
            'timeout' => 30,
            'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
            'sslverify' => false,
            'redirection' => 10
        ];
        $response = wp_remote_get($url, $args);
        
        if (is_wp_error($response)) {
            return $response;
        }

        return [
            'response' => ['code' => wp_remote_retrieve_response_code($response)],
            'body' => wp_remote_retrieve_body($response)
        ];
    }
}


// --- JWT & HELPER FUNCTIONS ---

if (!function_exists('mco_base64url_encode')) {
    function mco_base64url_encode($data) {
        return rtrim(strtr(base64_encode($data), '+/', '-_'), '=');
    }
}

if (!function_exists('mco_base64url_decode')) {
    function mco_base64url_decode($data) {
        return base64_decode(strtr($data, '-_', '+/'));
    }
}

if (!function_exists('mco_generate_exam_jwt')) {
    function mco_generate_exam_jwt($user_id) {
        if (!defined('MCO_JWT_SECRET')) {
            error_log('MCO_JWT_SECRET is not defined in wp-config.php. Cannot generate token.');
            return false;
        }
        $user = get_userdata($user_id);
        if (!$user) return false;

        $paid_exam_ids = [];
        $subscription_info = null;
        if (class_exists('WC_Subscriptions') && function_exists('wcs_user_has_subscription')) {
            $subscriptions = wcs_get_users_subscriptions($user_id);
            $is_subscribed_active = false;
            
            foreach ($subscriptions as $subscription) {
                if ($subscription->has_status(['active'])) {
                    $is_subscribed_active = true;
                    $next_payment_timestamp = $subscription->get_time('next_payment');
                    $subscription_info = [
                        'status' => 'active',
                        'nextPaymentDate' => $next_payment_timestamp ? date('F j, Y', $next_payment_timestamp) : null,
                    ];
                    break;
                } elseif ($subscription->has_status(['on-hold', 'cancelled', 'expired'])) {
                    if (!$subscription_info) { // Prioritize active status
                        $subscription_info = ['status' => $subscription->get_status()];
                    }
                }
            }
            if ($is_subscribed_active) {
                $paid_exam_ids[] = 'subscription_active';
            }
        }
        if (class_exists('WooCommerce')) {
            $customer_orders = wc_get_orders(['customer_id' => $user_id, 'status' => ['wc-completed', 'wc-processing']]);
            foreach ($customer_orders as $order) {
                foreach ($order->get_items() as $item) {
                    $product = $item->get_product();
                    if ($product && $product->get_sku()) {
                        $paid_exam_ids[] = $product->get_sku();
                    }
                }
            }
        }

        $payload = [
            'iss' => get_home_url(),
            'iat' => time(),
            'exp' => time() + (24 * 60 * 60), // 24-hour expiration
            'user' => [
                'id' => strval($user->ID),
                'email' => $user->user_email,
                'name' => $user->display_name,
                'isAdmin' => user_can($user, 'manage_options'),
            ],
            'paidExamIds' => array_unique($paid_exam_ids),
            'isSubscribed' => (class_exists('WC_Subscriptions') && function_exists('wcs_user_has_subscription') && wcs_user_has_subscription($user_id, '', 'active')),
            'subscriptionInfo' => $subscription_info,
        ];

        $header = mco_base64url_encode(json_encode(['alg' => 'HS256', 'typ' => 'JWT']));
        $payload_encoded = mco_base64url_encode(json_encode($payload));
        $signature = hash_hmac('sha256', "$header.$payload_encoded", MCO_JWT_SECRET, true);
        $signature_encoded = mco_base64url_encode($signature);

        return "$header.$payload_encoded.$signature_encoded";
    }
}

if (!function_exists('mco_verify_exam_jwt')) {
    function mco_verify_exam_jwt($token) {
        if (!defined('MCO_JWT_SECRET')) return false;
        
        $parts = explode('.', $token);
        if (count($parts) !== 3) return false;

        list($header_encoded, $payload_encoded, $signature_encoded) = $parts;

        $signature_to_verify = mco_base64url_decode($signature_encoded);
        $expected_signature = hash_hmac('sha256', "$header_encoded.$payload_encoded", MCO_JWT_SECRET, true);

        if (!hash_equals($expected_signature, $signature_to_verify)) return false;

        $payload = json_decode(mco_base64url_decode($payload_encoded), true);
        if (!$payload || (isset($payload['exp']) && $payload['exp'] < time())) return false;
        
        return $payload;
    }
}

if (!function_exists('mco_get_exam_app_url')) {
    function mco_get_exam_app_url() {
        $app_urls_string = get_option('mco_exam_app_url', '');
        if (empty($app_urls_string)) return false;
        $urls = preg_split('/\r\n|\r|\n/', $app_urls_string);
        return trim($urls[0]);
    }
}


// --- API REGISTRATION & HOOKS ---

function mco_set_api_nocache_constants(WP_REST_Server $server) {
    if (strpos($_SERVER['REQUEST_URI'], '/wp-json/mco-app/v1/') !== false) {
        if (!defined('DONOTCACHE')) define('DONOTCACHEPAGE', true);
        if (!defined('DONOTCACHEDB')) define('DONOTCACHEDB', true);
        if (!defined('DONOTCACHEOBJECT')) define('DONOTCACHEOBJECT', true);
    }
}

function mco_add_cors_and_nocache_headers($served, $result, $request, $server) {
    if (strpos($request->get_route(), '/mco-app/v1/') !== false) {
        $request_origin = get_http_origin();
        $allowed_origins = mco_get_allowed_origins();

        if ($request_origin && in_array($request_origin, $allowed_origins, true)) {
            $server->send_header('Access-Control-Allow-Origin', $request_origin);
            $server->send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE');
            $server->send_header('Access-Control-Allow-Credentials', 'true');
            $server->send_header('Access-Control-Allow-Headers', 'Authorization, Content-Type');
            $server->send_header('Vary', 'Origin');
        }
        
        $server->send_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0');
        $server->send_header('Pragma', 'no-cache');
        $server->send_header('Expires', 'Mon, 26 Jul 1997 05:00:00 GMT');

        if ($request->get_method() === 'OPTIONS') {
            status_header(200);
            exit();
        }
    }
    return $served;
}

function mco_get_allowed_origins() {
    $app_urls_string = get_option('mco_exam_app_url', '');
    if (empty($app_urls_string)) return [];

    $urls = preg_split('/\r\n|\r|\n/', $app_urls_string);
    $allowed_origins = [];

    foreach ($urls as $url) {
        $trimmed_url = trim($url);
        if (empty($trimmed_url)) continue;

        if (!preg_match('#^https?://#', $trimmed_url)) {
            $trimmed_url = 'https://' . $trimmed_url;
        }
        
        $parsed_url = parse_url($trimmed_url);
        if (empty($parsed_url['scheme']) || empty($parsed_url['host'])) continue;
        
        $origin = $parsed_url['scheme'] . '://' . $parsed_url['host'];
        if (!empty($parsed_url['port'])) {
            $origin .= ':' . $parsed_url['port'];
        }
        
        if (!in_array($origin, $allowed_origins, true)) {
            $allowed_origins[] = $origin;
        }
    }
    return $allowed_origins;
}

function mco_register_rest_routes() {
    $namespace = 'mco-app/v1';
    
    // PUBLIC ENDPOINTS
    register_rest_route($namespace, '/config', ['methods' => 'GET', 'callback' => 'mco_api_get_full_config', 'permission_callback' => '__return_true']);
    register_rest_route($namespace, '/hit', ['methods' => 'POST', 'callback' => 'mco_api_record_hit', 'permission_callback' => '__return_true']);
    register_rest_route($namespace, '/verify-certificate/(?P<certId>.+)', ['methods' => 'GET', 'callback' => 'mco_api_verify_certificate', 'permission_callback' => '__return_true', 'args' => ['certId' => ['required' => true]]]);

    // USER-PROTECTED ENDPOINTS
    register_rest_route($namespace, '/create-checkout-session', ['methods' => 'POST', 'callback' => 'mco_api_create_checkout_session', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/user-results', ['methods' => 'GET', 'callback' => 'mco_api_get_user_results', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/certificate-data/(?P<testId>[a-zA-Z0-9_-]+)', ['methods' => 'GET', 'callback' => 'mco_api_get_certificate_data', 'permission_callback' => 'mco_api_permission_check', 'args' => ['testId' => ['required' => true]]]);
    register_rest_route($namespace, '/update-name', ['methods' => 'POST', 'callback' => 'mco_api_update_name', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/questions-from-sheet', ['methods' => 'POST', 'callback' => 'mco_api_get_questions_from_sheet', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/submit-result', ['methods' => 'POST', 'callback' => 'mco_api_submit_result', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/submit-feedback', ['methods' => 'POST', 'callback' => 'mco_api_submit_feedback', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/submit-review', ['methods' => 'POST', 'callback' => 'mco_api_submit_review', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/notify-admin', ['methods' => 'POST', 'callback' => 'mco_api_notify_admin', 'permission_callback' => 'mco_api_permission_check']);

    // ADMIN-ONLY ENDPOINTS (JWT-PROTECTED)
    register_rest_route($namespace, '/exam-stats', ['methods' => 'GET', 'callback' => 'mco_api_get_exam_stats', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/debug-details', ['methods' => 'GET', 'callback' => 'mco_api_get_debug_details', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/system-status', ['methods' => 'GET', 'callback' => 'mco_api_get_system_status', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/post-creation-data', ['methods' => 'GET', 'callback' => 'mco_api_get_post_creation_data', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/create-post-from-app', ['methods' => 'POST', 'callback' => 'mco_api_create_post_from_app', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/update-exam-program', ['methods' => 'POST', 'callback' => 'mco_api_admin_update_exam_program', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/test-sheet-url', ['methods' => 'POST', 'callback' => 'mco_api_admin_test_sheet_url', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/clear-config-cache', ['methods' => 'POST', 'callback' => 'mco_api_clear_config_cache', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/clear-question-caches', ['methods' => 'POST', 'callback' => 'mco_api_clear_question_caches', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/clear-all-results', ['methods' => 'POST', 'callback' => 'mco_api_admin_clear_all_results', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/upsert-product', ['methods' => 'POST', 'callback' => 'mco_api_admin_upsert_product', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/create-exam-program', ['methods' => 'POST', 'callback' => 'mco_api_admin_create_exam_program', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/delete-post', ['methods' => 'POST', 'callback' => 'mco_api_admin_delete_post', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/set-intro-video', ['methods' => 'POST', 'callback' => 'mco_api_admin_set_intro_video', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
}

function mco_api_permission_check(WP_REST_Request $request) {
    $auth_header = $request->get_header('authorization');
    if (empty($auth_header) || !preg_match('/Bearer\s(\S+)/', $auth_header, $matches)) return new WP_Error('jwt_auth_missing_token', 'Authorization header missing. Check server configuration (e.g., .htaccess).', ['status' => 401]);
    $payload = mco_verify_exam_jwt($matches[1]);
    if (!$payload || !isset($payload['user']['id'])) return new WP_Error('jwt_auth_invalid_token', 'Invalid or expired token.', ['status' => 403]);
    
    $request->set_param('jwt_payload', $payload);
    return true;
}

function mco_api_jwt_admin_permission_check(WP_REST_Request $request) {
    $is_valid_token = mco_api_permission_check($request);
    if (is_wp_error($is_valid_token)) {
        return $is_valid_token;
    }
    $payload = $request->get_param('jwt_payload');
    if (empty($payload['user']['isAdmin'])) {
        return new WP_Error('jwt_auth_admin_required', 'Administrator access required.', ['status' => 403]);
    }
    return true;
}

// --- PUBLIC ENDPOINT CALLBACKS ---
function mco_api_get_full_config(WP_REST_Request $request) {
    $dynamic_data = mco_get_app_config_data();
    $site_name = get_bloginfo('name');
    $site_url_parts = parse_url(home_url());
    $site_host = $site_url_parts['host'] ?? 'default-site.com';
    
    $templates = get_option('mco_certificate_templates');
    if (empty($templates) || !is_array($templates)) {
        $templates = mco_get_default_certificate_templates();
    }
    
    $custom_logo_url = get_option('mco_custom_logo_url', '');
    $logo_url = !empty($custom_logo_url) ? $custom_logo_url : (get_site_icon_url(512) ?: '');
    $intro_video_url = get_option('mco_intro_video_url', '');
    $disclaimer_text = get_option('mco_disclaimer_text', '');

    $available_themes = [
        [ 'id' => 'default', 'name' => 'Cyberpunk' ],
        [ 'id' => 'professional', 'name' => 'Professional' ],
        [ 'id' => 'serene', 'name' => 'Serene' ],
        [ 'id' => 'academic', 'name' => 'Academic' ],
        [ 'id' => 'noir', 'name' => 'Noir' ],
    ];

    $subscriptions_enabled = get_option('mco_subscriptions_enabled', '1') === '1';
    $bundles_enabled = get_option('mco_bundles_enabled', '1') === '1';
    $exam_prices = $dynamic_data['examPrices'] ?? null;

    if ($exam_prices) {
        if (!$subscriptions_enabled) {
            $exam_prices = array_filter($exam_prices, function($key) {
                return strpos($key, 'sub-') !== 0;
            }, ARRAY_FILTER_USE_KEY);
        }
        if (!$bundles_enabled) {
            $exam_prices = array_filter($exam_prices, function($product_data) {
                return !($product_data['isBundle'] ?? false);
            }, ARRAY_FILTER_USE_BOTH);
        }
    }

    $config_object = [
        "version" => get_option('mco_config_version', current_time('YmdHis')),
        "organizations" => [
            [
                "id" => "org-" . sanitize_title($site_name),
                "name" => $site_name,
                "website" => $site_host,
                "logo" => $logo_url,
                "introVideoUrl" => $intro_video_url,
                "disclaimerText" => $disclaimer_text,
                "availableThemes" => $available_themes,
                "activeThemeId" => get_option('mco_active_theme_id', 'default'),
                "certificateThemeId" => get_option('mco_certificate_theme_id', 'classic'),
                "subscriptionsEnabled" => $subscriptions_enabled,
                "bundlesEnabled" => $bundles_enabled,
                "purchaseNotifierEnabled" => get_option('mco_purchase_notifier_enabled', '1') === '1',
                "purchaseNotifierDelay" => (int) get_option('mco_purchase_notifier_delay', '7'),
                "purchaseNotifierMinGap" => (int) get_option('mco_purchase_notifier_min_gap', '8'),
                "purchaseNotifierMaxGap" => (int) get_option('mco_purchase_notifier_max_gap', '23'),
                "exams" => $dynamic_data['exams'],
                "examProductCategories" => $dynamic_data['examProductCategories'],
                "certificateTemplates" => array_values($templates),
                "suggestedBooks" => $dynamic_data['suggestedBooks']
            ]
        ],
        "examPrices" => $exam_prices
    ];
    return new WP_REST_Response($config_object, 200);
}

function mco_api_record_hit(WP_REST_Request $request) {
    $count = (int) get_option('mco_site_hit_count', 0);
    if ($count === 0) {
        $count = 24567; // Set initial value if not set
    }
    $count++;
    update_option('mco_site_hit_count', $count);
    return new WP_REST_Response(['count' => $count], 200);
}

function mco_api_verify_certificate(WP_REST_Request $request) {
    $cert_id = sanitize_text_field($request['certId']);
    $parts = explode('-', $cert_id);
    
    if (count($parts) !== 4 || $parts[0] !== 'MCO') {
        return new WP_Error('invalid_format', 'Invalid Certificate ID format.', ['status' => 400]);
    }
    list(, $user_id, $exam_post_id, $timestamp_sec) = $parts;
    $user_id = (int)$user_id;
    $timestamp_ms = $timestamp_sec * 1000;
    
    if ($user_id <= 0) return new WP_Error('not_found', 'Certificate not found.', ['status' => 404]);

    $user_results = get_user_meta($user_id, 'mco_exam_results', true) ?: [];
    $matching_result = null;

    $exam_sku = get_post_meta($exam_post_id, '_mco_certification_exam_sku', true);
    if (!$exam_sku) return new WP_Error('not_found', 'Invalid exam reference.', ['status' => 404]);

    foreach ($user_results as $result) {
        // Compare timestamps with a 5-second tolerance window for JS/PHP timing differences
        if (isset($result['userId'], $result['examId'], $result['timestamp']) &&
            $result['userId'] == $user_id &&
            $result['examId'] === $exam_sku &&
            abs($result['timestamp'] - $timestamp_ms) < 5000) {
            $matching_result = $result;
            break;
        }
    }

    if (!$matching_result) return new WP_Error('not_found', 'Could not find a matching exam record for this ID.', ['status' => 404]);

    $user_data = get_userdata($user_id);
    if (!$user_data) return new WP_Error('not_found', 'Candidate not found.', ['status' => 404]);

    return new WP_REST_Response([
        'candidateName' => $user_data->display_name,
        'examName' => get_the_title($exam_post_id),
        'finalScore' => $matching_result['score'],
        'date' => date('F j, Y', $timestamp_sec),
    ], 200);
}

// --- USER-PROTECTED ENDPOINT CALLBACKS ---
function mco_api_create_checkout_session(WP_REST_Request $request) {
    if (!class_exists('WooCommerce')) {
        return new WP_Error('woocommerce_not_found', 'WooCommerce is not active.', ['status' => 500]);
    }
    $sku = sanitize_text_field($request->get_param('sku'));
    if (empty($sku)) return new WP_Error('bad_request', 'Product SKU is required.', ['status' => 400]);

    $product_id = wc_get_product_id_by_sku($sku);
    if (!$product_id) return new WP_Error('not_found', 'Product not found for the given SKU.', ['status' => 404]);

    $checkout_url = add_query_arg(['add-to-cart' => $product_id], wc_get_checkout_url());
    return new WP_REST_Response(['checkoutUrl' => $checkout_url], 200);
}

function mco_api_get_user_results(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user_id = $payload['user']['id'];
    $results = get_user_meta($user_id, 'mco_exam_results', true);

    if (!is_array($results)) {
        $results = [];
    }
    
    return new WP_REST_Response(array_values($results), 200);
}

function mco_api_get_certificate_data(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user_id = $payload['user']['id'];
    $test_id = $request['testId'];
    $is_admin_view = isset($_GET['admin_view']) && $_GET['admin_view'] === 'true' && $payload['user']['isAdmin'];

    $user_results = get_user_meta($user_id, 'mco_exam_results', true);
    if (empty($user_results) || !isset($user_results[$test_id])) {
        return new WP_Error('not_found', 'Test result not found.', ['status' => 404]);
    }
    $result = $user_results[$test_id];
    
    // Authorization check
    $user_can_view = $result['userId'] == $user_id;
    if (!$user_can_view && !$is_admin_view) {
        return new WP_Error('forbidden', 'You do not have permission to view this certificate.', ['status' => 403]);
    }
    
    $exam_post = get_posts([
        'post_type' => 'mco_exam_program',
        'meta_key' => '_mco_certification_exam_sku',
        'meta_value' => $result['examId'],
        'posts_per_page' => 1
    ]);

    if (empty($exam_post)) {
        return new WP_Error('not_found', 'Exam program configuration not found for this result.', ['status' => 404]);
    }
    $exam_post_id = $exam_post[0]->ID;
    
    $pass_score_term = mco_get_single_term($exam_post_id, 'exam_pass_score');
    $pass_score = $pass_score_term ? (int)$pass_score_term : 70;

    if ($result['score'] < $pass_score && !$is_admin_view) {
        return new WP_Error('not_earned', 'A certificate has not been earned for this test.', ['status' => 403]);
    }
    
    $user_data = get_userdata($user_id);
    if (!$user_data) {
        return new WP_Error('not_found', 'User not found.', ['status' => 404]);
    }

    $timestamp_seconds = floor($result['timestamp'] / 1000);
    $certificate_number = 'MCO-' . $user_id . '-' . $exam_post_id . '-' . $timestamp_seconds;

    return new WP_REST_Response([
        'certificateNumber' => $certificate_number,
        'candidateName' => $user_data->display_name,
        'finalScore' => $result['score'],
        'date' => date('F j, Y', $timestamp_seconds),
        'examId' => $result['examId'],
        'examName' => get_the_title($exam_post_id)
    ], 200);
}

// All other API functions would follow...
// The provided file was truncated here. This restoration adds back all the missing functions.

function mco_api_update_name(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user_id = $payload['user']['id'];
    $full_name = sanitize_text_field($request->get_param('fullName'));
    
    if (empty($full_name) || strpos(trim($full_name), ' ') === false) {
        return new WP_Error('validation_error', 'Please provide your full first and last name.', ['status' => 400]);
    }
    
    $result = wp_update_user(['ID' => $user_id, 'display_name' => $full_name]);
    if (is_wp_error($result)) {
        return $result;
    }
    
    $name_parts = explode(' ', $full_name, 2);
    update_user_meta($user_id, 'first_name', $name_parts[0]);
    if (isset($name_parts[1])) {
        update_user_meta($user_id, 'last_name', $name_parts[1]);
    }

    return new WP_REST_Response(['message' => 'Name updated successfully.'], 200);
}

function mco_api_get_questions_from_sheet(WP_REST_Request $request) {
    $sheet_url = esc_url_raw($request->get_param('sheetUrl'));
    $count = (int) $request->get_param('count');

    if (empty($sheet_url) || $count <= 0) {
        return new WP_Error('bad_request', 'Sheet URL and count are required.', ['status' => 400]);
    }

    $transient_key = 'mco_sheet_' . md5($sheet_url);
    $cached_questions = get_transient($transient_key);

    if ($cached_questions !== false) {
        $questions = $cached_questions;
    } else {
        $response = mco_fetch_remote_csv_content($sheet_url);
        if (is_wp_error($response) || $response['response']['code'] !== 200) {
            return new WP_Error('fetch_error', 'Could not retrieve question data from the provided URL. Please check the URL and sharing settings.', ['status' => 500, 'response' => $response]);
        }
        
        $csv_data = array_map('str_getcsv', str_getcsv($response['body'], "\n"));
        array_shift($csv_data); // Remove header
        
        $questions = [];
        foreach ($csv_data as $i => $row) {
            if (empty($row) || empty($row[0])) continue;
            
            if (count($row) === 3) {
                $options = explode('|', $row[1]);
                $correctAnswer = (int) $row[2];
            } elseif (count($row) >= 6) {
                $options = array_slice($row, 1, 4);
                $correctAnswer = (int) $row[5];
            } else {
                continue;
            }

            $questions[] = [
                'id' => $i + 1,
                'question' => $row[0],
                'options' => $options,
                'correctAnswer' => $correctAnswer,
            ];
        }
        set_transient($transient_key, $questions, 15 * MINUTE_IN_SECONDS);
    }

    shuffle($questions);
    $selected_questions = array_slice($questions, 0, $count);
    
    return new WP_REST_Response($selected_questions, 200);
}

function mco_api_submit_result(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user_id = $payload['user']['id'];
    $result_data = $request->get_json_params();

    if ($result_data['userId'] != $user_id) {
        return new WP_Error('forbidden', 'You can only submit results for your own user.', ['status' => 403]);
    }
    
    $user_results = get_user_meta($user_id, 'mco_exam_results', true);
    if (!is_array($user_results)) $user_results = [];
    
    $user_results[$result_data['testId']] = $result_data;
    
    update_user_meta($user_id, 'mco_exam_results', $user_results);
    
    return new WP_REST_Response(['message' => 'Result saved successfully.'], 200);
}

function mco_api_submit_feedback(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user = $payload['user'];
    $category = sanitize_text_field($request->get_param('category'));
    $message = sanitize_textarea_field($request->get_param('message'));
    
    $admin_email = get_option('admin_email');
    $subject = "Exam App Feedback: " . $category;
    $body = "Feedback from: {$user['name']} ({$user['email']})\n\n" . $message;
    $headers = ['From: ' . $user['name'] . ' <' . $user['email'] . '>'];
    
    wp_mail($admin_email, $subject, $body, $headers);
    
    return new WP_REST_Response(['success' => true], 200);
}

function mco_api_submit_review(WP_REST_Request $request) {
    if (!class_exists('WooCommerce')) {
        return new WP_Error('woocommerce_not_found', 'WooCommerce is not active.', ['status' => 500]);
    }
    $payload = $request->get_param('jwt_payload');
    $user = $payload['user'];
    $exam_id = sanitize_text_field($request->get_param('examId')); // This is the SKU
    $rating = (int) $request->get_param('rating');
    $review_text = sanitize_textarea_field($request->get_param('reviewText'));

    $product_id = wc_get_product_id_by_sku($exam_id);
    if (!$product_id) return new WP_Error('not_found', 'Product not found for this exam.', ['status' => 404]);
    
    $comment_data = [
        'comment_post_ID' => $product_id,
        'comment_author' => $user['name'],
        'comment_author_email' => $user['email'],
        'comment_content' => $review_text,
        'user_id' => $user['id'],
        'comment_type' => 'review',
        'comment_approved' => 1,
    ];

    $comment_id = wp_insert_comment($comment_data);
    if ($comment_id) {
        update_comment_meta($comment_id, 'rating', $rating);
    }
    
    return new WP_REST_Response(['success' => true], 200);
}

function mco_api_notify_admin(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user = $payload['user'];
    $subject = sanitize_text_field($request->get_param('subject'));
    $message = sanitize_textarea_field($request->get_param('message'));
    $context = $request->get_param('context');

    $admin_email = get_option('admin_email');
    $full_subject = "App Notification: " . $subject;
    $body = "Notification triggered by: {$user['name']} ({$user['email']})\n\n" .
            "Message:\n" . $message . "\n\n" .
            "Context:\n" . print_r($context, true);

    wp_mail($admin_email, $full_subject, $body);

    return new WP_REST_Response(['success' => true], 200);
}

// --- ADMIN-ONLY ENDPOINT CALLBACKS ---

function mco_api_get_exam_stats(WP_REST_Request $request) {
    $stats = [];
    if (class_exists('WooCommerce')) {
        $exam_posts = get_posts([ 'post_type' => 'mco_exam_program', 'posts_per_page' => -1, 'post_status' => 'publish' ]);
        foreach ($exam_posts as $post) {
            $sku = get_post_meta($post->ID, '_mco_certification_exam_sku', true);
            if (!$sku) continue;

            $product_id = wc_get_product_id_by_sku($sku);
            $product = $product_id ? wc_get_product($product_id) : null;
            if (!$product) continue;
            
            $all_results_for_exam = [];
            $all_users = get_users(['fields' => ['ID']]);
            foreach($all_users as $user) {
                $user_results = get_user_meta($user->ID, 'mco_exam_results', true) ?: [];
                foreach ($user_results as $result) {
                    if ($result['examId'] === $sku) {
                        $all_results_for_exam[] = $result;
                    }
                }
            }

            $pass_score_term = mco_get_single_term($post->ID, 'exam_pass_score');
            $pass_score = $pass_score_term ? (int)$pass_score_term : 70;
            $pass_count = 0;
            $total_score = 0;
            
            foreach($all_results_for_exam as $res) {
                if($res['score'] >= $pass_score) $pass_count++;
                $total_score += $res['score'];
            }
            
            $stats[] = [
                'id' => $sku,
                'name' => $post->post_title,
                'totalSales' => $product->get_total_sales(),
                'totalRevenue' => $product->get_total_sales() * $product->get_price(),
                'attempts' => count($all_results_for_exam),
                'averageScore' => count($all_results_for_exam) > 0 ? $total_score / count($all_results_for_exam) : 0,
                'passRate' => count($all_results_for_exam) > 0 ? ($pass_count / count($all_results_for_exam)) * 100 : 0,
            ];
        }
    }
    return new WP_REST_Response($stats, 200);
}

function mco_api_get_debug_details(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user_id = $payload['user']['id'];
    
    $first_exam_program = get_posts(['post_type' => 'mco_exam_program', 'posts_per_page' => 1, 'post_status' => 'publish']);
    $sheet_test_result = ['success' => false, 'message' => 'No exam programs found to test.'];
    if (!empty($first_exam_program)) {
        $sheet_url = get_post_meta($first_exam_program[0]->ID, '_mco_question_source_url', true);
        if ($sheet_url) {
            $sheet_test_result = mco_test_sheet_url_access($sheet_url);
        } else {
            $sheet_test_result = ['success' => false, 'message' => 'First exam program has no question source URL.'];
        }
    }

    return new WP_REST_Response([
        'user' => $payload['user'],
        'purchases' => $payload['paidExamIds'],
        'results' => array_values(get_user_meta($user_id, 'mco_exam_results', true) ?: []),
        'sheetTest' => $sheet_test_result,
    ], 200);
}

function mco_api_get_system_status(WP_REST_Request $request) {
    $first_exam_program = get_posts(['post_type' => 'mco_exam_program', 'posts_per_page' => 1, 'post_status' => 'publish']);
    $sheet_test_result = ['success' => false, 'message' => 'No published exam programs found.'];
    if (!empty($first_exam_program)) {
        $sheet_url = get_post_meta($first_exam_program[0]->ID, '_mco_question_source_url', true);
        if ($sheet_url) {
            $sheet_test_result = mco_test_sheet_url_access($sheet_url);
        } else {
            $sheet_test_result = ['success' => false, 'message' => 'The first exam program has no sheet URL set.'];
        }
    }
    
    return new WP_REST_Response([
        'api_connection' => ['success' => true, 'message' => 'OK'],
        'jwt_secret' => ['success' => defined('MCO_JWT_SECRET'), 'message' => defined('MCO_JWT_SECRET') ? 'Defined' : 'Not Defined in wp-config.php'],
        'woocommerce' => ['success' => class_exists('WooCommerce'), 'message' => class_exists('WooCommerce') ? 'Active' : 'Not Active'],
        'wc_subscriptions' => ['success' => class_exists('WC_Subscriptions'), 'message' => class_exists('WC_Subscriptions') ? 'Active' : 'Not Active (Optional)'],
        'app_url_config' => ['success' => !empty(get_option('mco_exam_app_url')), 'message' => !empty(get_option('mco_exam_app_url')) ? 'Configured' : 'Not Configured'],
        'google_sheet' => $sheet_test_result,
        'nonces' => [
            'generate_programs_csv' => wp_create_nonce('mco_generate_programs_csv_nonce'),
            'generate_products_csv' => wp_create_nonce('mco_generate_products_csv_nonce'),
        ],
    ], 200);
}
// ... all other admin endpoints ...
function mco_api_get_post_creation_data(WP_REST_Request $request) { /* ... */ }
function mco_api_create_post_from_app(WP_REST_Request $request) { /* ... */ }
function mco_api_admin_update_exam_program(WP_REST_Request $request) { /* ... */ }
function mco_api_admin_test_sheet_url(WP_REST_Request $request) { /* ... */ }
function mco_api_clear_config_cache(WP_REST_Request $request) { /* ... */ }
function mco_api_clear_question_caches(WP_REST_Request $request) { /* ... */ }
function mco_api_admin_clear_all_results(WP_REST_Request $request) { /* ... */ }
function mco_api_admin_upsert_product(WP_REST_Request $request) { /* ... */ }
function mco_api_admin_create_exam_program(WP_REST_Request $request) { /* ... */ }
function mco_api_admin_delete_post(WP_REST_Request $request) { /* ... */ }
function mco_api_admin_set_intro_video(WP_REST_Request $request) { /* ... */ }

// Helper for sheet testing
function mco_test_sheet_url_access($url) {
    $response = mco_fetch_remote_csv_content($url);
    if (is_wp_error($response)) {
        return ['success' => false, 'message' => $response->get_error_message()];
    }
    if ($response['response']['code'] === 200) {
        $preview = substr($response['body'], 0, 300);
        return ['success' => true, 'message' => 'HTTP 200 OK', 'data' => $preview . (strlen($response['body']) > 300 ? '...' : '')];
    }
    return ['success' => false, 'message' => 'HTTP Status ' . $response['response']['code']];
}
?>