<?php
if (!defined('ABSPATH')) exit;

// --- PRIMARY HOOKS ---
add_action('rest_api_init', 'mco_register_rest_routes');

// --- NEW, ROBUST CORS (Cross-Origin Resource Sharing) CONTROL ---
// This single, comprehensive filter correctly handles CORS for both pre-flight OPTIONS requests
// and actual GET/POST requests, preventing intermittent connection errors from the app.
add_action('rest_api_init', function() {
    // Remove the default WordPress CORS headers to prevent conflicts.
    remove_filter('rest_pre_serve_request', 'rest_send_cors_headers');

    // Add our custom, more reliable CORS handling filter.
    add_filter('rest_pre_serve_request', function($value) {
        $request_origin = get_http_origin();
        if ($request_origin) {
            $allowed_origins = mco_get_allowed_origins();
            if (in_array($request_origin, $allowed_origins, true)) {
                header('Access-Control-Allow-Origin: ' . esc_url($request_origin));
            }
        }
        
        header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
        header('Access-Control-Allow-Credentials: true');
        header('Access-Control-Allow-Headers: Authorization, Content-Type, X-WP-Nonce');
        // Add Vary: Origin header to instruct browsers to cache responses based on the Origin header.
        // The 'false' parameter prevents this from replacing an existing Vary header if present.
        header('Vary: Origin', false);

        // If this is a pre-flight OPTIONS request, send a 200 OK response and exit immediately.
        if ('OPTIONS' === $_SERVER['REQUEST_METHOD']) {
            status_header(200);
            exit();
        }

        return $value;
    }, 15);
}, 15);


if (!function_exists('mco_get_allowed_origins')) {
    function mco_get_allowed_origins() {
        $app_url_setting = get_option('mco_exam_app_url');
        if (!$app_url_setting) return [];
        
        $parsed_setting = parse_url(rtrim($app_url_setting, '/'));
        if (!isset($parsed_setting['host'])) return [];
        
        $scheme = $parsed_setting['scheme'] ?? 'https';
        $host = $parsed_setting['host'];
        $port = isset($parsed_setting['port']) ? ':' . $parsed_setting['port'] : '';
        
        $allowed_origins = ["{$scheme}://{$host}{$port}"];
        if (strpos($host, 'www.') === 0) {
            $allowed_origins[] = "{$scheme}://".substr($host, 4)."{$port}";
        } else {
            $allowed_origins[] = "{$scheme}://www.{$host}{$port}";
        }
        return $allowed_origins;
    }
}

if (!function_exists('mco_register_rest_routes')) {
    function mco_register_rest_routes() {
        $namespace = 'mco-app/v1';
        register_rest_route($namespace, '/user-results', ['methods' => 'GET', 'callback' => 'mco_api_get_user_results', 'permission_callback' => 'mco_api_permission_check']);
        register_rest_route($namespace, '/certificate-data/(?P<testId>[a-zA-Z0-9-]+)', ['methods' => 'GET', 'callback' => 'mco_api_get_certificate_data', 'permission_callback' => 'mco_api_permission_check', 'args' => ['testId' => ['required' => true]]]);
        register_rest_route($namespace, '/update-name', ['methods' => 'POST', 'callback' => 'mco_api_update_name', 'permission_callback' => 'mco_api_permission_check']);
        register_rest_route($namespace, '/questions-from-sheet', ['methods' => 'POST', 'callback' => 'mco_api_get_questions_from_sheet', 'permission_callback' => 'mco_api_permission_check']);
        register_rest_route($namespace, '/submit-result', ['methods' => 'POST', 'callback' => 'mco_api_submit_result', 'permission_callback' => 'mco_api_permission_check']);
        register_rest_route($namespace, '/exam-stats', ['methods' => 'GET', 'callback' => 'mco_api_get_exam_stats', 'permission_callback' => 'mco_api_admin_permission_check']);
        register_rest_route($namespace, '/debug-details', ['methods' => 'GET', 'callback' => 'mco_api_get_debug_details', 'permission_callback' => 'mco_api_admin_permission_check']);
        $disabled_endpoints = ['/submit-feedback', '/submit-review', '/spin-wheel', '/add-spins', '/grant-prize', '/search-user', '/reset-spins', '/remove-prize'];
        foreach ($disabled_endpoints as $endpoint) {
            register_rest_route($namespace, $endpoint, ['methods' => WP_REST_Server::ALLMETHODS, 'callback' => 'mco_api_feature_unavailable_rest', 'permission_callback' => '__return_true']);
        }
    }
}

// --- PERMISSION CALLBACKS ---
if (!function_exists('mco_api_permission_check')) {
    function mco_api_permission_check(WP_REST_Request $request, $admin_only = false) {
        $auth_header = $request->get_header('authorization');
        if (empty($auth_header) || !preg_match('/Bearer\s(\S+)/', $auth_header, $matches)) return new WP_Error('jwt_auth_missing_token', 'Authorization header missing.', ['status' => 401]);
        $payload = mco_verify_exam_jwt($matches[1]);
        if (!$payload || !isset($payload['user']['id'])) return new WP_Error('jwt_auth_invalid_token', 'Invalid or expired token.', ['status' => 403]);
        if ($admin_only && empty($payload['user']['isAdmin'])) return new WP_Error('jwt_auth_admin_required', 'Administrator access required.', ['status' => 403]);
        $request->set_param('jwt_payload', $payload);
        return true;
    }
}
if (!function_exists('mco_api_admin_permission_check')) {
    function mco_api_admin_permission_check(WP_REST_Request $request) { return mco_api_permission_check($request, true); }
}

// --- API HANDLERS ---
if (!function_exists('mco_api_get_user_results')) {
    function mco_api_get_user_results(WP_REST_Request $request) {
        $user_id = $request->get_param('jwt_payload')['user']['id'];
        return new WP_REST_Response(array_values(get_user_meta($user_id, 'mco_exam_results', true) ?: []), 200);
    }
}
if (!function_exists('mco_api_get_certificate_data')) {
    function mco_api_get_certificate_data(WP_REST_Request $request) {
        $payload = $request->get_param('jwt_payload');
        $results = get_user_meta($payload['user']['id'], 'mco_exam_results', true) ?: [];
        if (!isset($results[$request['testId']])) return new WP_Error('not_found', 'Result not found.', ['status' => 404]);
        $result = $results[$request['testId']];
        return new WP_REST_Response(['certificateNumber' => $result['testId'], 'candidateName' => $payload['user']['name'], 'finalScore' => $result['score'], 'date' => date('F j, Y', $result['timestamp'] / 1000), 'examId' => $result['examId']], 200);
    }
}
if (!function_exists('mco_api_update_name')) {
    function mco_api_update_name(WP_REST_Request $request) {
        $new_name = sanitize_text_field($request->get_param('fullName'));
        if (empty($new_name) || count(explode(' ', $new_name)) < 2) return new WP_Error('bad_request', 'Please provide a full name.', ['status' => 400]);
        wp_update_user(['ID' => $request->get_param('jwt_payload')['user']['id'], 'display_name' => $new_name]);
        return new WP_REST_Response(['message' => 'Name updated successfully.'], 200);
    }
}
if (!function_exists('mco_api_submit_result')) {
    function mco_api_submit_result(WP_REST_Request $request) {
        $result_data = $request->get_json_params();
        if (empty($result_data['testId'])) return new WP_Error('bad_request', 'Invalid result data.', ['status' => 400]);
        $results = get_user_meta($request->get_param('jwt_payload')['user']['id'], 'mco_exam_results', true) ?: [];
        $results[$result_data['testId']] = $result_data;
        update_user_meta($request->get_param('jwt_payload')['user']['id'], 'mco_exam_results', $results);
        return new WP_REST_Response(['message' => 'Result saved.'], 200);
    }
}
if (!function_exists('mco_api_get_questions_from_sheet')) {
    function mco_api_get_questions_from_sheet(WP_REST_Request $request) {
        $sheet_url = esc_url_raw($request->get_param('sheetUrl'));
        if (empty($sheet_url) || !preg_match('/spreadsheets\/d\/([a-zA-Z0-9-_]+)/', $sheet_url, $matches)) return new WP_Error('bad_request', 'Invalid Google Sheet URL.', ['status' => 400]);
        $transient_key = 'mco_sheet_' . md5($matches[1]);
        if (false === ($questions = get_transient($transient_key))) {
            $response = wp_remote_get("https://docs.google.com/spreadsheets/d/{$matches[1]}/export?format=csv", ['timeout' => 20]);
            if (is_wp_error($response) || wp_remote_retrieve_response_code($response) != 200) return new WP_Error('fetch_error', 'Could not fetch questions. Ensure sheet is public.', ['status' => 500]);
            
            $rows = preg_split('/\r\n|\r|\n/', wp_remote_retrieve_body($response));
            array_shift($rows);
            $questions = [];
            foreach ($rows as $i => $row) {
                if (empty(trim($row))) continue;
                $data = str_getcsv($row);
                if (count($data) === 3 && !empty(trim($data[0])) && !empty(trim($data[1])) && is_numeric(trim($data[2]))) {
                    // FIX: Replaced explode with a more robust preg_split to correctly handle pipes with variable whitespace.
                    $options = preg_split('/\s*\|\s*/', trim($data[1]), -1, PREG_SPLIT_NO_EMPTY);
                    // FIX: Changed condition to >= 1 to allow single-option questions.
                    if (count($options) >= 1 && intval(trim($data[2])) > 0 && intval(trim($data[2])) <= count($options)) {
                        $questions[] = ['id' => $i + 1, 'question' => trim($data[0]), 'options' => $options, 'correctAnswer' => intval(trim($data[2]))];
                    }
                }
            }
            set_transient($transient_key, $questions, 15 * MINUTE_IN_SECONDS);
        }
        if (empty($questions)) return new WP_Error('no_questions', 'No valid questions found.', ['status' => 500]);
        shuffle($questions);
        return new WP_REST_Response(array_slice($questions, 0, intval($request->get_param('count'))), 200);
    }
}
if (!function_exists('mco_api_get_exam_stats')) {
    function mco_api_get_exam_stats(WP_REST_Request $request) {
        $all_results = [];
        foreach (get_users(['fields' => ['ID']]) as $user) { if ($res = get_user_meta($user->ID, 'mco_exam_results', true)) $all_results = array_merge($all_results, array_values($res)); }
        $cert_exams = array_filter(mco_get_app_config_data()['exams'], function($e) { return !$e['isPractice']; });
        $stats = [];
        foreach ($cert_exams as $exam) {
            $attempts = array_filter($all_results, function($r) use ($exam) { return $r['examId'] === $exam['id']; });
            $passed = array_filter($attempts, function($r) use ($exam) { return $r['score'] >= $exam['passScore']; });
            $total_score = array_reduce($attempts, function($s, $r) { return $s + $r['score']; }, 0);
            $product = ($pid = wc_get_product_id_by_sku($exam['id'])) ? wc_get_product($pid) : null;
            $stats[] = ['examId' => $exam['id'], 'examName' => $exam['name'], 'totalSales' => $product ? $product->get_total_sales() : 0, 'totalAttempts' => count($attempts), 'passed' => count($passed), 'failed' => count($attempts) - count($passed), 'passRate' => count($attempts) > 0 ? (count($passed) / count($attempts)) * 100 : 0, 'averageScore' => count($attempts) > 0 ? $total_score / count($attempts) : 0];
        }
        return new WP_REST_Response($stats, 200);
    }
}
if (!function_exists('mco_api_get_debug_details')) {
    function mco_api_get_debug_details(WP_REST_Request $request) {
        $payload = $request->get_param('jwt_payload');
        $sheet_test = ['success' => false, 'message' => 'No exams with Sheet URL found to test.'];
        $config = mco_get_app_config_data();
        $test_url = '';
        foreach($config['exams'] as $exam) { if(!empty($exam['questionSourceUrl'])) { $test_url = $exam['questionSourceUrl']; break; } }
        if ($test_url && preg_match('/spreadsheets\/d\/([a-zA-Z0-9-_]+)/', $test_url, $matches)) {
            $response = wp_remote_get("https://docs.google.com/spreadsheets/d/{$matches[1]}/export?format=csv", ['timeout' => 15]);
            if (is_wp_error($response)) $sheet_test = ['success' => false, 'message' => 'WP_Error: ' . $response->get_error_message()];
            elseif (wp_remote_retrieve_response_code($response) != 200) $sheet_test = ['success' => false, 'message' => 'HTTP Status ' . wp_remote_retrieve_response_code($response) . '. Check sheet sharing settings.'];
            else $sheet_test = ['success' => true, 'message' => 'Successfully fetched ' . strlen(wp_remote_retrieve_body($response)) . ' bytes.'];
        }
        return new WP_REST_Response(['user' => $payload['user'], 'purchases' => $payload['paidExamIds'], 'results' => array_values(get_user_meta($payload['user']['id'], 'mco_exam_results', true) ?: []), 'sheetTest' => $sheet_test], 200);
    }
}
if (!function_exists('mco_api_feature_unavailable_rest')) {
    function mco_api_feature_unavailable_rest() { return new WP_Error('not_implemented', 'This feature is unavailable.', ['status' => 501]); }
}
?>