<?php
if (!defined('ABSPATH')) exit;

// Hook registration for all admin-ajax actions
if (!function_exists('mco_register_api_hooks')) {
    function mco_register_api_hooks() {
        // Authenticated endpoints for general users
        $auth_actions = [
            'user_results', 'submit_result', 'update_name', 'questions_from_sheet', 
            'certificate_data', 'exam_stats', 'submit_feedback', 'submit_review', 'spin_wheel'
        ];
        foreach ($auth_actions as $action) {
            add_action("wp_ajax_mco_{$action}", "mco_ajax_auth_wrapper");
        }
        
        // Admin-only endpoints
        $admin_actions = [
            'debug_details', 'admin_add_spins', 'admin_grant_prize', 'admin_search_user',
            'admin_reset_spins', 'admin_remove_prize', 'download_config'
        ];
        foreach ($admin_actions as $action) {
            add_action("wp_ajax_mco_{$action}", "mco_ajax_admin_wrapper");
        }
    }
}

// --- AJAX HANDLERS ---
function mco_ajax_auth_wrapper() {
    mco_add_cors_support();
    $token = isset($_POST['token']) ? sanitize_text_field($_POST['token']) : '';
    if (empty($token)) {
        wp_send_json_error(['message' => 'Authorization token not found.'], 403);
    }
    
    $payload = mco_verify_exam_jwt($token);
    if (!$payload || !isset($payload['user']['id'])) {
        wp_send_json_error(['message' => 'Invalid or expired token.'], 403);
    }
    
    $action_name = str_replace('wp_ajax_mco_', '', current_action());
    $callback_function = "mco_ajax_callback_{$action_name}";

    if (function_exists($callback_function)) {
        call_user_func($callback_function, $payload);
    } else {
        wp_send_json_error(['message' => 'Invalid API action specified.'], 400);
    }
}

function mco_ajax_admin_wrapper() {
    mco_add_cors_support();
    $token_in_post = isset($_POST['token']) ? sanitize_text_field($_POST['token']) : '';
    
    // The download config action uses a nonce, not a token
    $is_download_action = str_replace('wp_ajax_mco_', '', current_action()) === 'download_config';
    if ($is_download_action) {
        if (!isset($_POST['mco_download_nonce']) || !wp_verify_nonce($_POST['mco_download_nonce'], 'mco_download_config_nonce')) {
             wp_send_json_error(['message' => 'Security check failed.'], 403);
        }
        if (!current_user_can('manage_options')) {
            wp_send_json_error(['message' => 'Administrator access required.'], 403);
        }
        mco_ajax_callback_download_config(); // Call directly
        return;
    }

    if (empty($token_in_post)) {
        wp_send_json_error(['message' => 'Authorization token not found.'], 403);
    }

    $payload = mco_verify_exam_jwt($token_in_post);
    if (!$payload || !isset($payload['user']['id']) || empty($payload['user']['isAdmin'])) {
        wp_send_json_error(['message' => 'Administrator access required.'], 403);
    }
    
    $action_name = str_replace('wp_ajax_mco_', '', current_action());
    $callback_function = "mco_ajax_callback_{$action_name}";

    if (function_exists($callback_function)) {
        call_user_func($callback_function, $payload);
    } else {
        wp_send_json_error(['message' => 'Invalid API action specified.'], 400);
    }
}


// --- API LOGIC CALLBACKS (Called by wrappers) ---
function mco_ajax_callback_download_config() {
    $config_data = mco_get_static_app_config_data_structure();
    
    $site_url = get_site_url();
    $host = parse_url($site_url, PHP_URL_HOST);
    $filename_base = str_replace('.', '-', $host); 
    $filename = sanitize_file_name($filename_base . '-config.json');

    header('Content-Type: application/json');
    header('Content-Disposition: attachment; filename="' . $filename . '"');
    header('Pragma: no-cache');
    
    echo json_encode($config_data, JSON_PRETTY_PRINT);
    wp_die();
}


function mco_get_static_app_config_data_structure() {
    $post_types_for_version = ['mco_exam_program', 'mco_recommended_book', 'product'];
    $latest_mod_date = '2000-01-01 00:00:00';

    foreach ($post_types_for_version as $pt) {
        $latest_post = get_posts(['post_type' => $pt, 'numberposts' => 1, 'orderby' => 'modified', 'order' => 'DESC', 'post_status' => 'publish']);
        if ($latest_post && $latest_post[0]->post_modified > $latest_mod_date) {
            $latest_mod_date = $latest_post[0]->post_modified;
        }
    }
    
    $version = get_gmt_from_date($latest_mod_date, 'YmdHis');

    $logo_base64 = '';
    if (has_site_icon()) {
        $logo_url = get_site_icon_url(512);
        $response = wp_remote_get($logo_url, ['timeout' => 10]);
        if (!is_wp_error($response) && wp_remote_retrieve_response_code($response) === 200) {
            $image_data = wp_remote_retrieve_body($response);
            $mime_type = wp_remote_retrieve_header($response, 'content-type');
            if ($image_data && $mime_type) {
                $logo_base64 = 'data:' . $mime_type . ';base64,' . base64_encode($image_data);
            }
        }
    }

    $certificate_templates = [
        ['id' => 'cert-generic', 'title' => 'Certificate of Completion', 'body' => 'For passing the exam with a score of <strong>{finalScore}%</strong>.', 'signature1Name' => 'Program Director', 'signature1Title' => get_bloginfo('name'), 'signature1ImageBase64' => '', 'signature2Name' => '', 'signature2Title' => '', 'signature2ImageBase64' => ''],
        ['id' => 'cert-practice-1', 'title' => 'Certificate of Proficiency', 'body' => 'For demonstrating proficiency with a score of <strong>{finalScore}%</strong>.', 'signature1Name' => 'Training Coordinator', 'signature1Title' => get_bloginfo('name'), 'signature1ImageBase64' => '', 'signature2Name' => '', 'signature2Title' => '', 'signature2ImageBase64' => '']
    ];
    
    $content_data = mco_get_app_config_data();
    
    $organization = [
        'id' => 'org-' . sanitize_title(get_bloginfo('name')), 'name' => get_bloginfo('name'), 'website' => preg_replace('#^https?://(www\\.)?#', '', get_site_url()),
        'logo' => $logo_base64, 'exams' => $content_data['exams'], 'examProductCategories' => $content_data['examProductCategories'], 
        'certificateTemplates' => $certificate_templates, 'suggestedBooks' => $content_data['suggestedBooks']
    ];
    
    return [
        'version' => $version,
        'organizations' => [$organization]
    ];
}

// FIX: Implemented the missing debug_details API callback.
function mco_ajax_callback_debug_details($payload) {
    $user_id = intval($payload['user']['id']);
    $user = get_userdata($user_id);
    if (!$user) {
        wp_send_json_error(['message' => 'User not found.'], 404);
    }

    // Get purchases
    $paid_exam_skus = []; 
    $customer_orders = wc_get_orders(['customer_id' => $user_id, 'status' => ['wc-completed', 'wc-processing']]);
    foreach ($customer_orders as $order) {
        foreach ($order->get_items() as $item) {
            $product = $item->get_product();
            if ($product && $product->get_meta('_mco_product_type') === 'certification_exam') {
                $paid_exam_skus[] = $product->get_sku();
            }
        }
    }

    // Get results
    $results = get_user_meta($user_id, 'mco_exam_results', true);
    $results_array = is_array($results) ? array_values($results) : [];
    
    // Test sheet connectivity (using the first available sheet URL from config)
    $sheet_test = ['success' => false, 'message' => 'No question source URL found to test.'];
    $config_data = mco_get_app_config_data();
    $first_exam_with_sheet = null;
    if (!empty($config_data['exams'])) {
        foreach($config_data['exams'] as $exam) {
            if (!empty($exam['questionSourceUrl'])) {
                $first_exam_with_sheet = $exam;
                break;
            }
        }
    }
    
    if ($first_exam_with_sheet) {
        $sheet_url = $first_exam_with_sheet['questionSourceUrl'];
        $sheet_id = '';
        if (preg_match('/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/', $sheet_url, $matches)) {
            $sheet_id = $matches[1];
        }
        if ($sheet_id) {
            $csv_export_url = 'https://docs.google.com/spreadsheets/d/' . $sheet_id . '/export?format=csv&gid=0';
            $response = wp_remote_get($csv_export_url, ['timeout' => 10]);
            if (is_wp_error($response)) {
                $sheet_test = ['success' => false, 'message' => 'Connection to Google Sheets failed: ' . $response->get_error_message()];
            } else {
                $body = wp_remote_retrieve_body($response);
                $lines = preg_split('/\\r\\n?|\\n/', $body);
                $sheet_test = [
                    'success' => true, 
                    'message' => 'Successfully connected and retrieved ' . (count($lines) - 1) . ' rows.',
                    'data' => ['first_row' => isset($lines[1]) ? str_getcsv($lines[1]) : 'empty']
                ];
            }
        } else {
            $sheet_test['message'] = 'Could not parse Sheet ID from URL: ' . $sheet_url;
        }
    }

    $debug_data = [
        'user' => ['id' => strval($user->ID), 'name' => $user->display_name, 'email' => $user->user_email],
        'purchases' => array_unique($paid_exam_skus),
        'results' => $results_array,
        'sheetTest' => $sheet_test,
    ];

    wp_send_json_success($debug_data);
}


function mco_ajax_callback_user_results($payload) {
    $user_id = intval($payload['user']['id']);
    $results = get_user_meta($user_id, 'mco_exam_results', true);
    $results_array = is_array($results) ? $results : [];
    wp_send_json_success(array_values($results_array));
}

function mco_ajax_callback_submit_result($payload) {
    $user_id = intval($payload['user']['id']);
    $result_json = isset($_POST['result']) ? stripslashes($_POST['result']) : '';
    $new_result = json_decode($result_json, true);
    
    if (json_last_error() !== JSON_ERROR_NONE || empty($new_result['testId'])) {
        wp_send_json_error(['message' => 'Invalid or missing result data.'], 400);
    }
    
    $results = get_user_meta($user_id, 'mco_exam_results', true);
    $results_array = is_array($results) ? $results : [];
    $results_array[$new_result['testId']] = $new_result;
    update_user_meta($user_id, 'mco_exam_results', $results_array);
    wp_send_json_success(['success' => true]);
}

function mco_ajax_callback_update_name($payload) {
    $user_id = intval($payload['user']['id']);
    $new_name = isset($_POST['fullName']) ? sanitize_text_field($_POST['fullName']) : '';
    if (empty($new_name)) {
        wp_send_json_error(['message' => 'Full name cannot be empty.'], 400);
    }
    $name_parts = explode(' ', $new_name, 2);
    wp_update_user(['ID' => $user_id, 'display_name' => $new_name, 'first_name' => $name_parts[0], 'last_name' => isset($name_parts[1]) ? $name_parts[1] : '']);
    wp_send_json_success(['success' => true, 'newName' => $new_name]);
}

function mco_ajax_callback_questions_from_sheet($payload) {
    $sheet_url = isset($_POST['sheetUrl']) ? esc_url_raw($_POST['sheetUrl']) : '';
    $count = isset($_POST['count']) ? intval($_POST['count']) : 0;
    if (empty($sheet_url) || !filter_var($sheet_url, FILTER_VALIDATE_URL)) {
        wp_send_json_error(['message' => 'Invalid or empty sheet URL provided.'], 400);
    }

    $sheet_id = '';
    if (preg_match('/spreadsheets\\/d\\/([a-zA-Z0-9-_]+)/', $sheet_url, $matches)) {
        $sheet_id = $matches[1];
    }

    if (empty($sheet_id)) {
        wp_send_json_error(['message' => 'Could not extract Google Sheet ID from the provided URL.'], 400);
    }

    $csv_export_url = 'https://docs.google.com/spreadsheets/d/' . $sheet_id . '/export?format=csv';

    $response = wp_remote_get($csv_export_url, ['timeout' => 15]);
    if (is_wp_error($response)) {
        wp_send_json_error(['message' => 'Could not retrieve questions from Google Sheets.'], 500);
    }
    
    $body = wp_remote_retrieve_body($response);
    $lines = preg_split('/\\r\\n?|\\n/', $body);
    array_shift($lines); // Remove header
    $questions = [];
    foreach ($lines as $line) {
        if (empty(trim($line))) continue;
        $data = str_getcsv($line);
        if (count($data) >= 7 && !empty(trim($data[1]))) {
            $questions[] = [ 'id' => intval(trim($data[0])), 'question' => trim($data[1]), 'options' => array_map('trim', array_slice($data, 2, 4)), 'correctAnswer' => intval(trim($data[6])) ];
        }
    }
    shuffle($questions);
    wp_send_json_success($count > 0 ? array_slice($questions, 0, $count) : $questions);
}

function mco_ajax_callback_certificate_data($payload) {
    $user_id = intval($payload['user']['id']);
    $user = get_userdata($user_id);
    $test_id = isset($_POST['testId']) ? sanitize_text_field($_POST['testId']) : '';
    
    $results = get_user_meta($user_id, 'mco_exam_results', true);
    $results_array = is_array($results) ? $results : [];
    if (!isset($results_array[$test_id])) {
        wp_send_json_error(['message' => 'Test result not found.'], 404);
    }
    
    $result = $results_array[$test_id];
    $is_admin = in_array('administrator', (array)$user->roles);
    $all_exams = mco_get_app_config_data()['exams'] ?? [];
    $exam_config = array_values(array_filter($all_exams, fn($ex) => $ex['id'] === $result['examId']))[0] ?? null;
    $pass_score = $exam_config ? $exam_config['passScore'] : 70;
    
    if ($result['score'] < $pass_score && !$is_admin) {
        wp_send_json_error(['message' => 'Certificate not earned. Required score not met.'], 403);
    }

    $cert_data = [
        'certificateNumber' => strtoupper(substr(md5($test_id . $user_id), 0, 12)),
        'candidateName' => $user->display_name,
        'finalScore' => $result['score'],
        'date' => date('F j, Y', $result['timestamp'] / 1000),
        'examId' => $result['examId']
    ];
    wp_send_json_success($cert_data);
}

function mco_ajax_callback_exam_stats($payload) {
    $exam_configs = mco_get_app_config_data()['exams'] ?? [];
    $stats = [];
    foreach ($exam_configs as $config) {
        if (!$config['isPractice']) {
            $product_id = wc_get_product_id_by_sku($config['productSku']);
            $stats[$config['id']] = ['examId' => $config['id'], 'examName' => $config['name'], 'totalSales' => $product_id ? (int)get_post_meta($product_id, 'total_sales', true) : 0, 'totalAttempts' => 0, 'passed' => 0, 'failed' => 0, '_total_score_sum' => 0, '_pass_score' => $config['passScore']];
        }
    }
    
    global $wpdb;
    $db_results = $wpdb->get_col($wpdb->prepare("SELECT meta_value FROM $wpdb->usermeta WHERE meta_key = %s", 'mco_exam_results'));
    foreach ($db_results as $meta_value) {
        $user_results = maybe_unserialize($meta_value);
        if (is_array($user_results)) {
            foreach ($user_results as $result) {
                $exam_id = $result['examId'] ?? null;
                if ($exam_id && isset($stats[$exam_id])) {
                    $stats[$exam_id]['totalAttempts']++;
                    $stats[$exam_id]['_total_score_sum'] += $result['score'] ?? 0;
                    if (($result['score'] ?? 0) >= $stats[$exam_id]['_pass_score']) { $stats[$exam_id]['passed']++; } else { $stats[$exam_id]['failed']++; }
                }
            }
        }
    }

    $final_stats = [];
    foreach ($stats as $stat) {
        $stat['averageScore'] = $stat['totalAttempts'] > 0 ? round($stat['_total_score_sum'] / $stat['totalAttempts'], 2) : 0;
        $stat['passRate'] = $stat['totalAttempts'] > 0 ? round(($stat['passed'] / $stat['totalAttempts']) * 100, 2) : 0;
        unset($stat['_total_score_sum'], $stat['_pass_score']);
        $final_stats[] = $stat;
    }
    wp_send_json_success($final_stats);
}
?>