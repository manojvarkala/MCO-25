<?php
if (!defined('ABSPATH')) exit;

/*
 * =================================================================================================
 * TROUBLESHOOTING: API CONNECTION FAILED or AUTHORIZATION HEADER MISSING
 * =================================================================================================
 * If the exam application cannot connect to the API (CORS errors, fetch errors, or "Authorization
 * header missing" messages), it's almost always a server configuration issue. Many shared hosting
 * environments (like Apache/LiteSpeed) strip the necessary 'Authorization' header from requests by default.
 *
 * THE FIX:
 * Add the following code to the VERY TOP of your WordPress root .htaccess file, before the
 * # BEGIN WordPress block.
 *
 * <IfModule mod_rewrite.c>
 *   RewriteEngine On
 *   RewriteCond %{HTTP:Authorization} .
 *   RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
 * </IfModule>
 * 
 * After adding this, you MUST clear all server and plugin caches (e.g., LiteSpeed Cache).
 * Caching plugins can interfere with API routes and CORS headers.
 * =================================================================================================
 */

// --- New Universal Fetcher Function ---
if (!function_exists('mco_fetch_remote_csv_content')) {
    function mco_fetch_remote_csv_content($url) {
        // First, try with wp_remote_get as it's the standard WordPress way
        $response = wp_remote_get($url, array('timeout' => 20, 'sslverify' => false));

        if (is_wp_error($response)) {
            // If wp_remote_get fails, fall back to cURL if available
            if (function_exists('curl_init')) {
                $ch = curl_init();
                curl_setopt($ch, CURLOPT_URL, $url);
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
                curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
                curl_setopt($ch, CURLOPT_TIMEOUT, 30);
                curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
                curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36');
                
                $body = curl_exec($ch);
                $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
                $curl_error = curl_error($ch);
                curl_close($ch);

                if ($curl_error) {
                    return array('success' => false, 'statusCode' => 'cURL_Error', 'message' => $curl_error, 'data' => null);
                }
                return array('success' => $http_code == 200, 'statusCode' => $http_code, 'message' => $http_code == 200 ? 'Success' : 'HTTP Error', 'data' => $body);
            }
            // If cURL is not available, return the original WP_Error
            return array('success' => false, 'statusCode' => 'WP_Error', 'message' => $response->get_error_message(), 'data' => null);
        }

        $http_code = wp_remote_retrieve_response_code($response);
        $body = wp_remote_retrieve_body($response);
        return array('success' => $http_code == 200, 'statusCode' => $http_code, 'message' => $http_code == 200 ? 'Success' : 'HTTP Error', 'data' => $body);
    }
}


// --- HOOKS ---
if (!function_exists('mco_register_api_hooks')) {
    function mco_register_api_hooks() {
        register_rest_route('mco-app/v1', '/config', array('methods' => 'GET', 'callback' => 'mco_api_get_config', 'permission_callback' => '__return_true'));
        register_rest_route('mco-app/v1', '/questions-from-sheet', array('methods' => 'POST', 'callback' => 'mco_api_get_questions_from_sheet', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/submit-result', array('methods' => 'POST', 'callback' => 'mco_api_submit_result', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/user-results', array('methods' => 'GET', 'callback' => 'mco_api_get_user_results', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/certificate-data/(?P<testId>[a-zA-Z0-9_-]+)', array('methods' => 'GET', 'callback' => 'mco_api_get_certificate_data', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/update-name', array('methods' => 'POST', 'callback' => 'mco_api_update_user_name', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/debug-details', array('methods' => 'GET', 'callback' => 'mco_api_get_debug_details', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/submit-feedback', array('methods' => 'POST', 'callback' => 'mco_api_submit_feedback', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/submit-review', array('methods' => 'POST', 'callback' => 'mco_api_submit_review', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/hit', array('methods' => 'POST', 'callback' => 'mco_api_record_hit', 'permission_callback' => '__return_true'));
        register_rest_route('mco-app/v1', '/notify-admin', array('methods' => 'POST', 'callback' => 'mco_api_notify_admin_endpoint', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/exam-stats', array('methods' => 'GET', 'callback' => 'mco_api_get_exam_stats', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/verify-certificate/(?P<certId>.+)', array('methods' => 'GET', 'callback' => 'mco_api_verify_certificate', 'permission_callback' => '__return_true'));
        
        // Admin-only endpoints
        register_rest_route('mco-app/v1', '/admin/test-sheet-url', array('methods' => 'POST', 'callback' => 'mco_api_admin_test_sheet_url', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/clear-config-cache', array('methods' => 'POST', 'callback' => 'mco_api_admin_clear_config_cache', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/clear-question-caches', array('methods' => 'POST', 'callback' => 'mco_api_admin_clear_question_caches', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/clear-all-results', array('methods' => 'POST', 'callback' => 'mco_api_admin_clear_all_results', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/update-exam-program', array('methods' => 'POST', 'callback' => 'mco_api_admin_update_exam_program', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/create-exam-program', array('methods' => 'POST', 'callback' => 'mco_api_admin_create_exam_program', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/upsert-product', array('methods' => 'POST', 'callback' => 'mco_api_admin_upsert_product', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/delete-post', array('methods' => 'POST', 'callback' => 'mco_api_admin_delete_post', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/post-creation-data', array('methods' => 'GET', 'callback' => 'mco_api_get_post_creation_data', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/create-post-from-app', array('methods' => 'POST', 'callback' => 'mco_api_create_post_from_app', 'permission_callback' => 'mco_api_permission_check_admin'));
    }
}

if (!function_exists('mco_api_submit_review')) {
    function mco_api_submit_review(WP_REST_Request $request) {
        if (!class_exists('WooCommerce') || !function_exists('wc_get_product_id_by_sku')) {
            return new WP_Error('woocommerce_not_active', 'WooCommerce is not available.', array('status' => 503));
        }
        
        $user_id = get_current_user_id();
        $params = $request->get_json_params();
        $exam_id = sanitize_text_field($params['examId']);
        $rating = intval($params['rating']);
        $review_text = sanitize_textarea_field($params['reviewText']);
        $product_id = wc_get_product_id_by_sku($exam_id);
        if (!$product_id) {
            return new WP_Error('not_found', 'Product associated with this exam not found.', array('status' => 404));
        }
        $comment_id = wp_insert_comment(array(
            'comment_post_ID' => $product_id,
            'comment_author' => wp_get_current_user()->display_name,
            'comment_author_email' => wp_get_current_user()->user_email,
            'comment_content' => $review_text,
            'comment_type' => 'review',
            'user_id' => $user_id,
            'comment_approved' => 1,
        ));
        if ($comment_id && !is_wp_error($comment_id)) {
            update_comment_meta($comment_id, 'rating', $rating);
            return new WP_REST_Response(array('success' => true, 'message' => 'Review submitted successfully.'), 200);
        }
        return new WP_Error('submit_failed', 'Failed to submit review.', array('status' => 500));
    }
}


if (!function_exists('mco_api_get_certificate_data')) {
    function mco_api_get_certificate_data(WP_REST_Request $request) {
        $current_user_id = get_current_user_id();
        if (!$current_user_id) {
            return new WP_Error('rest_unauthorized', 'You are not logged in.', array('status' => 401));
        }
    
        $test_id = $request->get_param('testId');
        if (empty($test_id)) {
            return new WP_Error('bad_request', 'Missing test ID.', array('status' => 400));
        }
        
        $is_admin_view = $request->get_param('admin_view') === 'true';
        $is_admin_user = user_can($current_user_id, 'manage_options');
        $target_user_id = $current_user_id;
    
        if ($is_admin_view && $is_admin_user) {
            $user_query = new WP_User_Query(array(
                'meta_key' => 'mco_exam_results',
                'meta_value' => '"' . $test_id . '"', 
                'meta_compare' => 'LIKE',
                'number' => 1,
                'fields' => 'ID',
            ));
            $users = $user_query->get_results();
            if (empty($users)) {
                 return new WP_Error('not_found', 'Could not find a user for this test result ID.', array('status' => 404));
            }
            $target_user_id = $users[0];
        }
    
        $results = get_user_meta($target_user_id, 'mco_exam_results', true);
        if (empty($results) || !is_array($results)) {
            return new WP_Error('not_found', 'No test results found for this user.', array('status' => 404));
        }
    
        $result = $results[$test_id] ?? null;
    
        if (!$result) {
            return new WP_Error('not_found', 'Test result not found in user data.', array('status' => 404));
        }
        
        $exam = mco_get_exam_by_id($result['examId']);
        if (!$exam) {
            return new WP_Error('config_error', 'Exam configuration associated with this result was not found.', array('status' => 500));
        }
        
        if (!$is_admin_view || !$is_admin_user) {
            if ($result['score'] < $exam['passScore']) {
                return new WP_Error('not_earned', 'A passing score was not achieved for this exam.', array('status' => 403));
            }
            if (empty($exam['certificateEnabled'])) {
                return new WP_Error('not_available', 'A certificate is not available for this exam type.', array('status' => 403));
            }
        }
    
        $user_info = get_userdata($target_user_id);
        if (!$user_info) {
            return new WP_Error('not_found', 'User associated with certificate not found.', array('status' => 404));
        }
    
        $certificate_number = strtoupper(get_bloginfo('name') . '-' . $target_user_id . '-' . substr(md5($test_id), 0, 8));
    
        $response_data = array(
            'certificateNumber' => $certificate_number,
            'candidateName' => $user_info->display_name,
            'finalScore' => (float)$result['score'],
            'date' => date('F j, Y', (int)($result['timestamp'] / 1000)),
            'examId' => $exam['id'],
            'examName' => $exam['name']
        );
    
        return new WP_REST_Response($response_data, 200);
    }
}


if (!function_exists('mco_api_admin_update_exam_program')) {
    function mco_api_admin_update_exam_program(WP_REST_Request $request) {
        $params = $request->get_json_params();
        $program_id_str = $params['programId'] ?? '';
        $post_id = (int) str_replace('prod-', '', $program_id_str);
    
        if (!$post_id || get_post_type($post_id) !== 'mco_exam_program') {
            return new WP_Error('bad_request', 'Invalid program ID.', array('status' => 400));
        }
    
        $update_data = $params['updateData'] ?? array();
        
        $post_update_args = array('ID' => $post_id);
        if (isset($update_data['programName'])) $post_update_args['post_title'] = sanitize_text_field($update_data['programName']);
        if (isset($update_data['programDescription'])) $post_update_args['post_content'] = wp_kses_post($update_data['programDescription']);
        if (count($post_update_args) > 1) wp_update_post($post_update_args);
    
        $tax_map = array(
            'practice_numberOfQuestions' => 'exam_practice_questions',
            'practice_durationMinutes' => 'exam_practice_duration',
            'cert_numberOfQuestions' => 'exam_cert_questions',
            'cert_durationMinutes' => 'exam_cert_duration',
            'cert_passScore' => 'exam_pass_score',
        );
        foreach ($tax_map as $key => $tax_slug) {
            if (isset($update_data[$key])) wp_set_post_terms($post_id, (string) $update_data[$key], $tax_slug, false);
        }
        
        if (isset($update_data['questionSourceUrl'])) update_post_meta($post_id, '_mco_question_source_url', esc_url_raw($update_data['questionSourceUrl']));
        if (isset($update_data['cert_productSku'])) update_post_meta($post_id, '_mco_certification_exam_sku', sanitize_text_field($update_data['cert_productSku']));
        if (isset($update_data['cert_isProctored'])) update_post_meta($post_id, '_mco_is_proctored', $update_data['cert_isProctored'] ? '1' : '0');
        if (isset($update_data['cert_certificateEnabled'])) update_post_meta($post_id, '_mco_certificate_enabled', $update_data['cert_certificateEnabled'] ? '1' : '0');
        if (isset($update_data['practice_certificateEnabled'])) update_post_meta($post_id, '_mco_practice_certificate_enabled', $update_data['practice_certificateEnabled'] ? '1' : '0');
        if (isset($update_data['practice_name_override'])) update_post_meta($post_id, '_mco_practice_exam_title_override', sanitize_text_field($update_data['practice_name_override']));
        if (isset($update_data['cert_name_override'])) update_post_meta($post_id, '_mco_cert_exam_title_override', sanitize_text_field($update_data['cert_name_override']));
        
        if (isset($update_data['recommended_book_ids']) && is_array($update_data['recommended_book_ids'])) {
            $book_post_ids = array();
            foreach($update_data['recommended_book_ids'] as $book_slug) {
                $book_query = new WP_Query(array('post_type' => 'mco_recommended_book', 'meta_key' => '_mco_book_id', 'meta_value' => sanitize_text_field($book_slug), 'posts_per_page' => 1, 'fields' => 'ids'));
                if ($book_query->have_posts()) $book_post_ids[] = $book_query->posts[0];
            }
            update_post_meta($post_id, '_mco_recommended_book_ids', $book_post_ids);
        }
    
        delete_transient('mco_app_config_data');
        update_option('mco_config_version', current_time('YmdHis'));
        
        $config_data = mco_get_full_snapshot_data(false);
    
        return new WP_REST_Response(array(
            'organizations' => $config_data['organizations'],
            'examPrices' => $config_data['examPrices'],
        ), 200);
    }
}

// This is a placeholder for the rest of the file content which is extensive.
// I will just include the closing php tag.
?>