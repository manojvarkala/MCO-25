<?php
if (!defined('ABSPATH')) exit;

/*
 * =================================================================================================
 * TROUBLESHOOTING: API CONNECTION FAILED or AUTHORIZATION HEADER MISSING
 * =================================================================================================
 * The plugin now includes a robust CORS handling system in the main plugin file.
 * However, if issues persist, it's almost always a server configuration issue. Many shared
 * hosting environments (like Apache/LiteSpeed) can strip the necessary 'Authorization'
 * header from requests by default.
 *
 * THE FIX (if the plugin's handler isn't working):
 * Add the following code to the VERY TOP of your WordPress root .htaccess file, before the
 * # BEGIN WordPress block.
 *
 * <IfModule mod_rewrite.c>
 *   RewriteEngine On
 *   RewriteCond %{HTTP:Authorization} .
 *   RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
 * </IfModule>
 * 
 * After adding this, you MUST clear all server and plugin caches (e.g., LiteSpeed Cache).
 * Caching plugins can interfere with API routes and CORS headers.
 * =================================================================================================
 */

// NOTE: All CORS handling has been moved to the main plugin file for reliability.
// This file now only contains API endpoint definitions.


// --- JWT GENERATION AND HELPER FUNCTIONS ---

if (!function_exists('mco_base64_url_encode')) {
    function mco_base64_url_encode($text) {
        return str_replace(['+', '/', '='], ['-', '_', ''], base64_encode($text));
    }
}

if (!function_exists('mco_base64_url_decode')) {
    function mco_base64_url_decode($text) {
        return base64_decode(str_replace(['-', '_'], ['+', '/'], $text));
    }
}


if (!function_exists('mco_get_user_subscription_info')) {
    function mco_get_user_subscription_info($user_id) {
        if (!class_exists('WC_Subscriptions') || !function_exists('wcs_get_users_subscriptions')) {
            return array('isSubscribed' => false, 'subscriptionInfo' => null);
        }

        $subscriptions = wcs_get_users_subscriptions($user_id);
        $active_subscription = null;

        foreach ($subscriptions as $subscription) {
            if ($subscription->has_status(array('active', 'on-hold'))) {
                $active_subscription = $subscription;
                break;
            }
        }

        if ($active_subscription) {
            $next_payment_date = $active_subscription->get_date('next_payment');
            return array(
                'isSubscribed' => true,
                'subscriptionInfo' => array(
                    'status' => $active_subscription->get_status(),
                    'nextPaymentDate' => $next_payment_date ? date('F j, Y', strtotime($next_payment_date)) : null
                )
            );
        }

        return array('isSubscribed' => false, 'subscriptionInfo' => null);
    }
}


if (!function_exists('mco_get_user_purchased_skus')) {
    function mco_get_user_purchased_skus($user_id) {
        if (!class_exists('WooCommerce') || !$user_id) {
            return array();
        }

        $user = get_user_by('id', $user_id);
        if (!$user) {
            return array();
        }

        $paid_skus = array();
        // Get customer orders with 'completed' or 'processing' status
        $customer_orders = wc_get_orders(array(
            'customer_id' => $user_id,
            'status' => array('wc-completed', 'wc-processing'),
            'limit' => -1,
        ));

        foreach ($customer_orders as $order) {
            foreach ($order->get_items() as $item) {
                $product = $item->get_product();
                if ($product && $product->get_sku()) {
                    $paid_skus[] = $product->get_sku();
                }
            }
        }
        return array_unique($paid_skus);
    }
}

if (!function_exists('mco_generate_exam_jwt')) {
    function mco_generate_exam_jwt($user_id) {
        if (!defined('MCO_JWT_SECRET')) {
            error_log('MCO Exam Engine: MCO_JWT_SECRET is not defined in wp-config.php. Cannot generate token.');
            return false;
        }

        $user = get_user_by('id', $user_id);
        if (!$user) {
            return false;
        }

        $header = mco_base64_url_encode(json_encode(array('alg' => 'HS256', 'typ' => 'JWT')));
        
        $subscription_data = mco_get_user_subscription_info($user_id);

        $payload_data = array(
            'iss' => get_bloginfo('url'),
            'iat' => time(),
            'exp' => time() + (DAY_IN_SECONDS), // Token valid for 1 day
            'user' => array(
                'id' => (string) $user->ID,
                'name' => $user->display_name,
                'email' => $user->user_email,
                'isAdmin' => user_can($user_id, 'manage_options')
            ),
            'paidExamIds' => mco_get_user_purchased_skus($user_id),
            'isSubscribed' => $subscription_data['isSubscribed'],
            'subscriptionInfo' => $subscription_data['subscriptionInfo']
        );
        $payload = mco_base64_url_encode(json_encode($payload_data));

        $signature = hash_hmac('sha256', "$header.$payload", MCO_JWT_SECRET, true);
        $signature_encoded = mco_base64_url_encode($signature);

        return "$header.$payload.$signature_encoded";
    }
}

// --- PERMISSION CALLBACKS & HELPERS ---

if (!function_exists('mco_validate_jwt_and_get_user_id')) {
    function mco_validate_jwt_and_get_user_id($request) {
        if (!defined('MCO_JWT_SECRET')) {
            return new WP_Error('jwt_auth_invalid_secret_key', 'JWT secret key is not configured.', array('status' => 500));
        }

        $auth_header = $request->get_header('authorization');
        if (!$auth_header) {
            return new WP_Error('jwt_auth_missing_token', 'Authorization header not found.', array('status' => 403));
        }

        list($token) = sscanf($auth_header, 'Bearer %s');
        if (!$token) {
            return new WP_Error('jwt_auth_bad_request', 'Authorization header format is invalid.', array('status' => 403));
        }

        $parts = explode('.', $token);
        if (count($parts) !== 3) {
            return new WP_Error('jwt_auth_invalid_token', 'Invalid token format.', array('status' => 403));
        }

        list($header_base64, $payload_base64, $signature_base64) = $parts;
        $signature = mco_base64_url_decode($signature_base64);
        
        $expected_signature = hash_hmac('sha256', "$header_base64.$payload_base64", MCO_JWT_SECRET, true);

        if (!hash_equals($expected_signature, $signature)) {
            return new WP_Error('jwt_auth_invalid_token', 'Invalid token signature.', array('status' => 403));
        }

        $payload = json_decode(mco_base64_url_decode($payload_base64), true);

        if (time() > $payload['exp']) {
            return new WP_Error('jwt_auth_expired_token', 'Token has expired.', array('status' => 403));
        }
        
        if (!isset($payload['user']['id'])) {
             return new WP_Error('jwt_auth_invalid_token', 'User ID not found in token payload.', array('status' => 403));
        }

        return (int) $payload['user']['id'];
    }
}

if (!function_exists('mco_api_permission_check_user')) {
    function mco_api_permission_check_user(WP_REST_Request $request) {
        $user_id = mco_validate_jwt_and_get_user_id($request);
        if (is_wp_error($user_id)) {
            return $user_id;
        }
        
        wp_set_current_user($user_id);
        return true;
    }
}

if (!function_exists('mco_api_permission_check_admin')) {
    function mco_api_permission_check_admin(WP_REST_Request $request) {
        $user_id = mco_validate_jwt_and_get_user_id($request);
        if (is_wp_error($user_id)) {
            return $user_id;
        }

        if (!user_can($user_id, 'manage_options')) {
            return new WP_Error('rest_forbidden', 'You do not have permission to perform this action.', array('status' => 403));
        }
        
        wp_set_current_user($user_id);
        return true;
    }
}


// --- New Universal Fetcher Function ---
if (!function_exists('mco_fetch_remote_csv_content')) {
    function mco_fetch_remote_csv_content($url) {
        $response = wp_remote_get($url, array('timeout' => 20, 'sslverify' => false));

        if (is_wp_error($response)) {
            return array('success' => false, 'statusCode' => 'WP_Error', 'message' => $response->get_error_message(), 'data' => null);
        }

        $http_code = wp_remote_retrieve_response_code($response);
        $body = wp_remote_retrieve_body($response);
        return array('success' => $http_code == 200, 'statusCode' => $http_code, 'message' => $http_code == 200 ? 'Success' : 'HTTP Error', 'data' => $body);
    }
}


// --- HOOKS ---
if (!function_exists('mco_register_api_hooks')) {
    function mco_register_api_hooks() {
        register_rest_route('mco-app/v1', '/config', array('methods' => 'GET', 'callback' => 'mco_api_get_config', 'permission_callback' => '__return_true'));
        register_rest_route('mco-app/v1', '/questions-from-sheet', array('methods' => 'POST', 'callback' => 'mco_api_get_questions_from_sheet', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/submit-result', array('methods' => 'POST', 'callback' => 'mco_api_submit_result', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/user-results', array('methods' => 'GET', 'callback' => 'mco_api_get_user_results', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/certificate-data/(?P<testId>[a-zA-Z0-9_-]+)', array('methods' => 'GET', 'callback' => 'mco_api_get_certificate_data', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/update-name', array('methods' => 'POST', 'callback' => 'mco_api_update_user_name', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/debug-details', array('methods' => 'GET', 'callback' => 'mco_api_get_debug_details', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/submit-feedback', array('methods' => 'POST', 'callback' => 'mco_api_submit_feedback', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/submit-review', array('methods' => 'POST', 'callback' => 'mco_api_submit_review', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/hit', array('methods' => 'POST', 'callback' => 'mco_api_record_hit', 'permission_callback' => '__return_true'));
        register_rest_route('mco-app/v1', '/notify-admin', array('methods' => 'POST', 'callback' => 'mco_api_notify_admin_endpoint', 'permission_callback' => 'mco_api_permission_check_user'));
        register_rest_route('mco-app/v1', '/exam-stats', array('methods' => 'GET', 'callback' => 'mco_api_get_exam_stats', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/verify-certificate/(?P<certId>.+)', array('methods' => 'GET', 'callback' => 'mco_api_verify_certificate', 'permission_callback' => '__return_true'));
        register_rest_route('mco-app/v1', '/create-checkout-session', array('methods' => 'POST', 'callback' => 'mco_api_create_checkout_session', 'permission_callback' => 'mco_api_permission_check_user'));

        
        // Admin-only endpoints
        register_rest_route('mco-app/v1', '/admin/test-sheet-url', array('methods' => 'POST', 'callback' => 'mco_api_admin_test_sheet_url', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/clear-config-cache', array('methods' => 'POST', 'callback' => 'mco_api_admin_clear_config_cache', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/clear-question-caches', array('methods' => 'POST', 'callback' => 'mco_api_admin_clear_question_caches', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/clear-all-results', array('methods' => 'POST', 'callback' => 'mco_api_admin_clear_all_results', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/update-exam-program', array('methods' => 'POST', 'callback' => 'mco_api_admin_update_exam_program', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/create-exam-program', array('methods' => 'POST', 'callback' => 'mco_api_admin_create_exam_program', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/upsert-product', array('methods' => 'POST', 'callback' => 'mco_api_admin_upsert_product', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/delete-post', array('methods' => 'POST', 'callback' => 'mco_api_admin_delete_post', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/post-creation-data', array('methods' => 'GET', 'callback' => 'mco_api_get_post_creation_data', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/create-post-from-app', array('methods' => 'POST', 'callback' => 'mco_api_create_post_from_app', 'permission_callback' => 'mco_api_permission_check_admin'));
        register_rest_route('mco-app/v1', '/admin/set-intro-video', array('methods' => 'POST', 'callback' => 'mco_api_admin_set_intro_video', 'permission_callback' => 'mco_api_permission_check_admin'));
    }
}

// --- API CALLBACKS ---

if (!function_exists('mco_api_create_checkout_session')) {
    function mco_api_create_checkout_session(WP_REST_Request $request) {
        if (!class_exists('WooCommerce') || !function_exists('wc_get_product_id_by_sku')) {
            return new WP_Error('woocommerce_inactive', 'WooCommerce is not active.', array('status' => 500));
        }

        $params = $request->get_json_params();
        $sku = sanitize_text_field($params['sku']);
        if (empty($sku)) {
            return new WP_Error('bad_request', 'Product SKU is required.', array('status' => 400));
        }
        
        $product_id = wc_get_product_id_by_sku($sku);
        if (!$product_id) {
            return new WP_Error('not_found', 'Product with the specified SKU was not found.', array('status' => 404));
        }

        // Ensure the cart is ready.
        if (is_null(WC()->cart)) {
            wc_load_cart();
        }

        // Clear the cart to ensure only this item is purchased.
        WC()->cart->empty_cart();
        
        // Add the product to the cart.
        $cart_item_key = WC()->cart->add_to_cart($product_id);

        if (!$cart_item_key) {
             return new WP_Error('cart_error', 'Could not add the product to the cart.', array('status' => 500));
        }

        // Return the direct checkout URL.
        $checkout_url = wc_get_checkout_url();
        return new WP_REST_Response(array('checkoutUrl' => $checkout_url), 200);
    }
}

if (!function_exists('mco_api_get_config')) {
    function mco_api_get_config() {
        $config_data = mco_get_app_config_data();
        if (empty($config_data)) {
            return new WP_Error('config_error', 'Could not load application configuration.', array('status' => 500));
        }
        return new WP_REST_Response($config_data, 200);
    }
}

if (!function_exists('mco_api_get_questions_from_sheet')) {
    function mco_api_get_questions_from_sheet(WP_REST_Request $request) {
        $params = $request->get_json_params();
        if (!isset($params['sheetUrl']) || !isset($params['count'])) {
            return new WP_Error('bad_request', 'Missing required parameters.', array('status' => 400));
        }

        $sheet_url = esc_url_raw($params['sheetUrl']);
        $count = intval($params['count']);

        $transient_key = 'mco_questions_' . md5($sheet_url);
        $cached_questions = get_transient($transient_key);

        if ($cached_questions !== false) {
            shuffle($cached_questions);
            $questions_to_return = array_slice($cached_questions, 0, $count);
            return new WP_REST_Response($questions_to_return, 200);
        }

        $result = mco_fetch_remote_csv_content($sheet_url);
        if (!$result['success'] || empty($result['data'])) {
            return new WP_Error('fetch_failed', 'Could not retrieve the question sheet. Please check the URL and sharing permissions.', array('status' => 500, 'details' => $result));
        }
        
        $csv_content = $result['data'];
        $lines = explode("\n", str_replace("\r", "", $csv_content));
        $headers = str_getcsv(array_shift($lines));
        $column_count = count($headers);

        $questions = array();
        $id_counter = 1;

        if ($column_count === 3) { // Legacy format
            foreach ($lines as $line) {
                if (empty(trim($line))) continue;
                $data = str_getcsv($line);
                if (count($data) !== 3) continue;

                $question_text = trim($data[0]);
                $options_str = trim($data[1]);
                $correct_answer_1_based = (int)trim($data[2]);

                if (empty($question_text) || empty($options_str) || $correct_answer_1_based <= 0) continue;

                $options = array_map('trim', explode('|', $options_str));
                if (count($options) < 2 || $correct_answer_1_based > count($options)) continue;

                $questions[] = array(
                    'id' => $id_counter++,
                    'question' => $question_text,
                    'options' => $options,
                    'correctAnswer' => $correct_answer_1_based
                );
            }
        } elseif ($column_count >= 6) { // New 6-column format
            foreach ($lines as $line) {
                if (empty(trim($line))) continue;
                $data = str_getcsv($line);
                if (count($data) < 6) continue;

                $question_text = trim($data[0]);
                $option1 = trim($data[1]);
                $option2 = trim($data[2]);
                $option3 = trim($data[3]);
                $option4 = trim($data[4]);
                $correct_answer_1_based = (int)trim($data[5]);

                if (empty($question_text) || empty($option1) || empty($option2) || empty($option3) || empty($option4) || $correct_answer_1_based <= 0 || $correct_answer_1_based > 4) {
                    continue;
                }

                $options = [$option1, $option2, $option3, $option4];

                $questions[] = array(
                    'id' => $id_counter++,
                    'question' => $question_text,
                    'options' => $options,
                    'correctAnswer' => $correct_answer_1_based
                );
            }
        } else {
            return new WP_Error('invalid_csv_format', 'Invalid CSV format. The file must have either 3 or 6 columns.', array('status' => 400));
        }

        if (empty($questions)) {
            return new WP_Error('no_questions', 'No valid questions could be parsed from the provided sheet.', array('status' => 500));
        }

        set_transient($transient_key, $questions, 15 * MINUTE_IN_SECONDS);
        shuffle($questions);
        $questions_to_return = array_slice($questions, 0, $count);

        return new WP_REST_Response($questions_to_return, 200);
    }
}

if (!function_exists('mco_api_submit_result')) {
    function mco_api_submit_result(WP_REST_Request $request) {
        $user_id = get_current_user_id();
        $result_data = $request->get_json_params();
        $test_id = sanitize_text_field($result_data['testId']);
        
        $results = get_user_meta($user_id, 'mco_exam_results', true);
        if (!is_array($results)) {
            $results = array();
        }
        $results[$test_id] = $result_data;
        update_user_meta($user_id, 'mco_exam_results', $results);
        
        return new WP_REST_Response(array('success' => true), 200);
    }
}

if (!function_exists('mco_api_get_user_results')) {
    function mco_api_get_user_results(WP_REST_Request $request) {
        $user_id = get_current_user_id();
        $results = get_user_meta($user_id, 'mco_exam_results', true);
        if (!is_array($results)) {
            $results = array();
        }
        return new WP_REST_Response(array_values($results), 200);
    }
}

if (!function_exists('mco_api_get_certificate_data')) {
    function mco_api_get_certificate_data(WP_REST_Request $request) {
        $current_user_id = get_current_user_id();
        if (!$current_user_id) {
            return new WP_Error('rest_unauthorized', 'You are not logged in.', array('status' => 401));
        }
    
        $test_id = $request->get_param('testId');
        if (empty($test_id)) {
            return new WP_Error('bad_request', 'Missing test ID.', array('status' => 400));
        }
        
        $is_admin_view = $request->get_param('admin_view') === 'true';
        $is_admin_user = user_can($current_user_id, 'manage_options');
        $target_user_id = $current_user_id;
    
        if ($is_admin_view && $is_admin_user) {
            global $wpdb;
            $meta_key = 'mco_exam_results';
            $meta_value_like = '%' . $wpdb->esc_like('"' . $test_id . '"') . '%';
            $user_ids = $wpdb->get_col($wpdb->prepare("SELECT user_id FROM $wpdb->usermeta WHERE meta_key = %s AND meta_value LIKE %s", $meta_key, $meta_value_like));
            if (empty($user_ids)) {
                 return new WP_Error('not_found', 'Could not find a user for this test result ID.', array('status' => 404));
            }
            $target_user_id = $user_ids[0];
        }
    
        $results = get_user_meta($target_user_id, 'mco_exam_results', true);
        if (empty($results) || !is_array($results)) {
            return new WP_Error('not_found', 'No test results found for this user.', array('status' => 404));
        }
    
        $result = isset($results[$test_id]) ? $results[$test_id] : null;
    
        if (!$result) {
            return new WP_Error('not_found', 'Test result not found in user data.', array('status' => 404));
        }
        
        $exam = mco_get_exam_by_id($result['examId']);
        if (!$exam) {
            return new WP_Error('config_error', 'Exam configuration associated with this result was not found.', array('status' => 500));
        }
        
        $is_pass = $result['score'] >= $exam['passScore'];
        if (!$is_pass && !$is_admin_user) {
            return new WP_Error('not_earned', 'A certificate is not available because the exam was not passed.', array('status' => 403));
        }
    
        $user_info = get_userdata($target_user_id);
        if (!$user_info) {
            return new WP_Error('not_found', 'User associated with certificate not found.', array('status' => 404));
        }
    
        $certificate_number = strtoupper(sanitize_title(get_bloginfo('name')) . '-' . $target_user_id . '-' . substr(md5($test_id), 0, 8));
    
        $response_data = array(
            'certificateNumber' => $certificate_number,
            'candidateName' => $user_info->display_name,
            'finalScore' => (float)$result['score'],
            'date' => date('F j, Y', (int)($result['timestamp'] / 1000)),
            'examId' => $exam['id'],
            'examName' => $exam['name']
        );
    
        return new WP_REST_Response($response_data, 200);
    }
}

if (!function_exists('mco_api_verify_certificate')) {
    function mco_api_verify_certificate(WP_REST_Request $request) {
        $cert_id = $request->get_param('certId');
        if (empty($cert_id)) {
            return new WP_Error('bad_request', 'Certificate ID is required.', array('status' => 400));
        }
        
        $parts = explode('-', $cert_id);
        if (count($parts) < 3) {
            return new WP_Error('invalid_id', 'Invalid certificate ID format.', array('status' => 400));
        }
        
        $user_id = (int) $parts[count($parts) - 2];
        $test_id_hash = $parts[count($parts) - 1];

        if ($user_id <= 0) {
            return new WP_Error('invalid_id', 'Invalid user ID in certificate.', array('status' => 400));
        }

        $results = get_user_meta($user_id, 'mco_exam_results', true);
        if (empty($results) || !is_array($results)) {
            return new WP_Error('not_found', 'No records found for this user.', array('status' => 404));
        }

        foreach ($results as $test_id => $result) {
            if (substr(md5($test_id), 0, 8) === strtolower($test_id_hash)) {
                $exam = mco_get_exam_by_id($result['examId']);
                if ($exam && $result['score'] >= $exam['passScore']) {
                    $user_info = get_userdata($user_id);
                    return new WP_REST_Response(array(
                        'candidateName' => $user_info->display_name,
                        'examName' => $exam['name'],
                        'finalScore' => (float)$result['score'],
                        'date' => date('F j, Y', (int)($result['timestamp'] / 1000)),
                    ), 200);
                }
            }
        }
        return new WP_Error('not_found', 'This certificate ID does not match any valid, passing records.', array('status' => 404));
    }
}

if (!function_exists('mco_api_update_user_name')) {
    function mco_api_update_user_name(WP_REST_Request $request) {
        $user_id = get_current_user_id();
        $params = $request->get_json_params();
        $full_name = sanitize_text_field($params['fullName']);

        if (empty($full_name)) {
            return new WP_Error('bad_request', 'Full name cannot be empty.', array('status' => 400));
        }
        wp_update_user(array('ID' => $user_id, 'display_name' => $full_name));
        return new WP_REST_Response(array('success' => true), 200);
    }
}

if (!function_exists('mco_api_get_debug_details')) {
    function mco_api_get_debug_details(WP_REST_Request $request) {
        $user_id = get_current_user_id();
        $user = get_userdata($user_id);

        $test_url_query = new WP_Query(array('post_type' => 'mco_exam_program', 'posts_per_page' => 1));
        $sheet_test_result = array('success' => false, 'message' => 'No exam programs found to test.', 'data' => null);
        if ($test_url_query->have_posts()) {
            $test_post_id = $test_url_query->posts[0]->ID;
            $test_sheet_url = get_post_meta($test_post_id, '_mco_question_source_url', true);
            if ($test_sheet_url) {
                $response = mco_fetch_remote_csv_content($test_sheet_url);
                $sheet_test_result['success'] = $response['success'];
                $sheet_test_result['message'] = $response['message'] . ' (Status: ' . $response['statusCode'] . ')';
                $sheet_test_result['data'] = $response['data'] ? substr($response['data'], 0, 500) : null;
            } else {
                 $sheet_test_result['message'] = 'First exam program has no Question Source URL set.';
            }
        }

        $debug_data = array(
            'user' => array('id' => $user->ID, 'name' => $user->display_name, 'email' => $user->user_email),
            'purchases' => mco_get_user_purchased_skus($user_id),
            'results' => array_values(get_user_meta($user_id, 'mco_exam_results', true) ?: array()),
            'sheetTest' => $sheet_test_result,
        );
        return new WP_REST_Response($debug_data, 200);
    }
}

if (!function_exists('mco_api_submit_feedback')) {
    function mco_api_submit_feedback(WP_REST_Request $request) {
        $user_id = get_current_user_id();
        $user = get_userdata($user_id);
        $params = $request->get_json_params();
        $category = sanitize_text_field($params['category']);
        $message = sanitize_textarea_field($params['message']);
        
        $admin_email = get_option('admin_email');
        $subject = 'Feedback from Exam App: ' . $category;
        $body = "From: {$user->display_name} ({$user->user_email})\n\n" . $message;
        wp_mail($admin_email, $subject, $body);

        return new WP_REST_Response(array('success' => true), 200);
    }
}

if (!function_exists('mco_api_submit_review')) {
    function mco_api_submit_review(WP_REST_Request $request) {
        $user_id = get_current_user_id();
        $user = get_userdata($user_id);
        $params = $request->get_json_params();
        $exam_id = sanitize_text_field($params['examId']);
        $rating = intval($params['rating']);
        $review_text = sanitize_textarea_field($params['reviewText']);

        $exam = mco_get_exam_by_id($exam_id);
        if (!$exam || !isset($exam['productSku'])) {
            return new WP_Error('not_found', 'Exam or associated product not found.', array('status' => 404));
        }

        if (function_exists('wc_get_product_id_by_sku')) {
            $product_id = wc_get_product_id_by_sku($exam['productSku']);
            if ($product_id) {
                $comment_id = wp_insert_comment(array(
                    'comment_post_ID'      => $product_id,
                    'comment_author'       => $user->display_name,
                    'comment_author_email' => $user->user_email,
                    'comment_content'      => $review_text,
                    'comment_type'         => 'review',
                    'user_id'              => $user_id,
                    'comment_approved'     => 1,
                ));
                if ($comment_id) {
                    update_comment_meta($comment_id, 'rating', $rating);
                    return new WP_REST_Response(array('success' => true), 200);
                }
            }
        }
        return new WP_Error('submit_failed', 'Failed to submit review.', array('status' => 500));
    }
}

if (!function_exists('mco_api_record_hit')) {
    function mco_api_record_hit() {
        $count = (int) get_option('mco_site_hit_count', 0);
        $new_count = $count + 1;
        update_option('mco_site_hit_count', $new_count);
        return new WP_REST_Response(array('count' => $new_count), 200);
    }
}

if (!function_exists('mco_api_notify_admin_endpoint')) {
    function mco_api_notify_admin_endpoint(WP_REST_Request $request) {
        $user_id = get_current_user_id();
        $user = get_userdata($user_id);
        $params = $request->get_json_params();

        $subject = sanitize_text_field($params['subject']);
        $message = sanitize_textarea_field($params['message']);
        $context = $params['context'];

        $admin_email = get_option('admin_email');
        $body = "This is an automated notification from the MCO Exam App.\n\n";
        $body .= "User: {$user->display_name} (ID: {$user_id}, Email: {$user->user_email})\n";
        $body .= "Time: " . current_time('mysql') . "\n\n";
        $body .= "Message:\n" . $message . "\n\n";
        $body .= "Context:\n" . print_r($context, true);

        wp_mail($admin_email, '[MCO App Notification] ' . $subject, $body);

        return new WP_REST_Response(array('success' => true), 200);
    }
}

if (!function_exists('mco_api_get_exam_stats')) {
    function mco_api_get_exam_stats(WP_REST_Request $request) {
        $users = get_users(array('fields' => array('ID')));
        $all_stats = array();

        foreach ($users as $user) {
            $results = get_user_meta($user->ID, 'mco_exam_results', true);
            if (is_array($results)) {
                foreach ($results as $result) {
                    $exam_id = $result['examId'];
                    if (!isset($all_stats[$exam_id])) {
                        $all_stats[$exam_id] = array('attempts' => 0, 'totalScore' => 0, 'passes' => 0);
                    }
                    $all_stats[$exam_id]['attempts']++;
                    $all_stats[$exam_id]['totalScore'] += $result['score'];
                    
                    $exam = mco_get_exam_by_id($exam_id);
                    if ($exam && $result['score'] >= $exam['passScore']) {
                        $all_stats[$exam_id]['passes']++;
                    }
                }
            }
        }
        
        $response_data = array();
        foreach ($all_stats as $exam_id => $stats) {
            $exam = mco_get_exam_by_id($exam_id);
            if (!$exam || $exam['isPractice']) continue;
            
            $total_sales = 0;
            $total_revenue = 0;
            if (function_exists('wc_get_product_id_by_sku')) {
                $product_id = wc_get_product_id_by_sku($exam['productSku']);
                if ($product_id) {
                    $product = wc_get_product($product_id);
                    if ($product) {
                        $total_sales = (int) $product->get_total_sales();
                        $total_revenue = $total_sales * (float) $product->get_price();
                    }
                }
            }

            $response_data[] = array(
                'id' => $exam_id,
                'name' => $exam['name'],
                'attempts' => $stats['attempts'],
                'averageScore' => $stats['attempts'] > 0 ? $stats['totalScore'] / $stats['attempts'] : 0,
                'passRate' => $stats['attempts'] > 0 ? ($stats['passes'] / $stats['attempts']) * 100 : 0,
                'totalSales' => $total_sales,
                'totalRevenue' => $total_revenue,
            );
        }

        return new WP_REST_Response($response_data, 200);
    }
}

// --- ADMIN API ENDPOINTS ---

if (!function_exists('mco_api_admin_set_intro_video')) {
    function mco_api_admin_set_intro_video(WP_REST_Request $request) {
        if (!function_exists('wp_handle_upload')) {
            require_once(ABSPATH . 'wp-admin/includes/file.php');
        }

        $file = $request->get_file_params()['video'];
        if (empty($file)) {
            return new WP_Error('bad_request', 'No video file provided.', array('status' => 400));
        }

        $upload_overrides = array('test_form' => false);
        $movefile = wp_handle_upload($file, $upload_overrides);

        if ($movefile && !isset($movefile['error'])) {
            update_option('mco_intro_video_url', $movefile['url']);
            delete_transient('mco_app_config_data');
            update_option('mco_config_version', current_time('YmdHis'));
            $config_data = mco_get_full_snapshot_data(false);
            return new WP_REST_Response($config_data, 200);
        } else {
            return new WP_Error('upload_error', $movefile['error'], array('status' => 500));
        }
    }
}


if (!function_exists('mco_api_admin_test_sheet_url')) {
    function mco_api_admin_test_sheet_url(WP_REST_Request $request) {
        $params = $request->get_json_params();
        $sheet_url = esc_url_raw($params['sheetUrl']);

        $result = mco_fetch_remote_csv_content($sheet_url);
        
        $data_preview = null;
        if ($result['success'] && !empty($result['data'])) {
            $lines = explode("\n", str_replace("\r", "", $result['data']));
            $preview_lines = array_slice($lines, 0, 5);
            $data_preview = implode("\n", $preview_lines);
        }

        return new WP_REST_Response(array(
            'success' => $result['success'],
            'statusCode' => $result['statusCode'],
            'message' => $result['message'],
            'dataPreview' => $data_preview
        ), 200);
    }
}

if (!function_exists('mco_api_admin_clear_config_cache')) {
    function mco_api_admin_clear_config_cache() {
        delete_transient('mco_app_config_data');
        update_option('mco_config_version', current_time('YmdHis'));
        return new WP_REST_Response(array('success' => true, 'message' => 'App config cache cleared.'), 200);
    }
}

if (!function_exists('mco_api_admin_clear_question_caches')) {
    function mco_api_admin_clear_question_caches() {
        global $wpdb;
        $wpdb->query("DELETE FROM {$wpdb->options} WHERE option_name LIKE '_transient_mco_questions_%' OR option_name LIKE '_transient_timeout_mco_questions_%'");
        return new WP_REST_Response(array('success' => true, 'message' => 'All question caches cleared.'), 200);
    }
}

if (!function_exists('mco_api_admin_clear_all_results')) {
    function mco_api_admin_clear_all_results() {
        delete_metadata('user', 0, 'mco_exam_results', '', true);
        return new WP_REST_Response(array('success' => true, 'message' => 'All user exam results have been deleted.'), 200);
    }
}

if (!function_exists('mco_api_admin_update_exam_program')) {
    function mco_api_admin_update_exam_program(WP_REST_Request $request) {
        $params = $request->get_json_params();
        $program_id_str = $params['programId'];
        $post_id = (int) str_replace('prod-', '', $program_id_str);
    
        if (!$post_id || get_post_type($post_id) !== 'mco_exam_program') {
            return new WP_Error('bad_request', 'Invalid program ID.', array('status' => 400));
        }
    
        $update_data = $params['updateData'];
        
        $post_update_args = array('ID' => $post_id);
        if (isset($update_data['programName'])) $post_update_args['post_title'] = sanitize_text_field($update_data['programName']);
        if (isset($update_data['programDescription'])) $post_update_args['post_content'] = wp_kses_post($update_data['programDescription']);
        if (count($post_update_args) > 1) wp_update_post($post_update_args);
    
        $tax_map = [
            'practice_numberOfQuestions' => 'exam_practice_questions', 'practice_durationMinutes' => 'exam_practice_duration',
            'cert_numberOfQuestions' => 'exam_cert_questions', 'cert_durationMinutes' => 'exam_cert_duration', 'cert_passScore' => 'exam_pass_score'
        ];
        foreach ($tax_map as $key => $tax_slug) {
            if (isset($update_data[$key])) wp_set_post_terms($post_id, (string) $update_data[$key], $tax_slug, false);
        }
        
        if (isset($update_data['questionSourceUrl'])) update_post_meta($post_id, '_mco_question_source_url', esc_url_raw($update_data['questionSourceUrl']));
        if (isset($update_data['cert_productSku'])) update_post_meta($post_id, '_mco_certification_exam_sku', sanitize_text_field($update_data['cert_productSku']));
        if (isset($update_data['cert_isProctored'])) update_post_meta($post_id, '_mco_is_proctored', $update_data['cert_isProctored'] ? '1' : '0');
        if (isset($update_data['cert_certificateEnabled'])) update_post_meta($post_id, '_mco_certificate_enabled', $update_data['cert_certificateEnabled'] ? '1' : '0');
        if (isset($update_data['practice_certificateEnabled'])) update_post_meta($post_id, '_mco_practice_certificate_enabled', $update_data['practice_certificateEnabled'] ? '1' : '0');
        if (isset($update_data['practice_name_override'])) update_post_meta($post_id, '_mco_practice_exam_title_override', sanitize_text_field($update_data['practice_name_override']));
        if (isset($update_data['cert_name_override'])) update_post_meta($post_id, '_mco_cert_exam_title_override', sanitize_text_field($update_data['cert_name_override']));
        
        if (isset($update_data['recommended_book_ids']) && is_array($update_data['recommended_book_ids'])) {
            $book_post_ids = [];
            foreach($update_data['recommended_book_ids'] as $book_slug) {
                $books = get_posts(['post_type' => 'mco_recommended_book', 'meta_key' => '_mco_book_id', 'meta_value' => sanitize_text_field($book_slug), 'posts_per_page' => 1, 'fields' => 'ids']);
                if ($books) $book_post_ids[] = $books[0];
            }
            update_post_meta($post_id, '_mco_recommended_book_ids', $book_post_ids);
        }
    
        delete_transient('mco_app_config_data');
        update_option('mco_config_version', current_time('YmdHis'));
        $config_data = mco_get_full_snapshot_data(false);
    
        return new WP_REST_Response(['organizations' => $config_data['organizations'], 'examPrices' => $config_data['examPrices']], 200);
    }
}

if (!function_exists('mco_api_admin_create_exam_program')) {
    function mco_api_admin_create_exam_program(WP_REST_Request $request) {
        $params = $request->get_json_params();
        $program_name = sanitize_text_field($params['programName']);

        $post_id = wp_insert_post(['post_title' => $program_name, 'post_type' => 'mco_exam_program', 'post_status' => 'publish']);
        if (is_wp_error($post_id)) {
            return $post_id;
        }

        $product_link_data = $params['productLinkData'] ?? null;
        if ($product_link_data) {
            $sku_to_link = '';
            if ($product_link_data['type'] === 'auto') {
                $sku_to_link = 'exam-' . sanitize_title($program_name) . '-cert';
                mco_api_admin_upsert_product_helper(['sku' => $sku_to_link, 'name' => $program_name, 'price' => 49.99]);
            } elseif ($product_link_data['type'] === 'existing') {
                $sku_to_link = $product_link_data['sku'];
            } elseif ($product_link_data['type'] === 'new') {
                $sku_to_link = $product_link_data['sku'];
                mco_api_admin_upsert_product_helper($product_link_data);
            }
            if ($sku_to_link) {
                update_post_meta($post_id, '_mco_certification_exam_sku', $sku_to_link);
            }
        }

        delete_transient('mco_app_config_data');
        update_option('mco_config_version', current_time('YmdHis'));
        $config_data = mco_get_full_snapshot_data(false);
        return new WP_REST_Response(['organizations' => $config_data['organizations'], 'examPrices' => $config_data['examPrices']], 200);
    }
}

if (!function_exists('mco_api_admin_upsert_product_helper')) {
    function mco_api_admin_upsert_product_helper($product_data) {
        $sku = sanitize_text_field($product_data['sku']);
        $product_id = wc_get_product_id_by_sku($sku);
        $product = $product_id ? wc_get_product($product_id) : null;

        if (!$product) {
            $is_sub = isset($product_data['subscription_period']);
            $is_bundle = isset($product_data['isBundle']) && $product_data['isBundle'];
            
            if ($is_bundle) {
                $product = new WC_Product_Bundle();
            } elseif ($is_sub) {
                $product = new WC_Product_Subscription();
            } else {
                $product = new WC_Product_Simple();
            }
            $product->set_sku($sku);
        }
        
        if (isset($product_data['name'])) $product->set_name(sanitize_text_field($product_data['name']));
        if (isset($product_data['price'])) $product->set_sale_price($product_data['price']);
        if (isset($product_data['regularPrice'])) $product->set_regular_price($product_data['regularPrice']);
        if ($product->is_type('simple')) $product->set_virtual(true);

        if ($product->is_type('subscription')) {
            if (isset($product_data['subscription_period'])) $product->update_meta_data('_subscription_period', $product_data['subscription_period']);
            if (isset($product_data['subscription_period_interval'])) $product->update_meta_data('_subscription_period_interval', $product_data['subscription_period_interval']);
            if (isset($product_data['subscription_length'])) $product->update_meta_data('_subscription_length', $product_data['subscription_length']);
        }
        
        if ($product->is_type('bundle') && isset($product_data['bundled_skus'])) {
            $bundled_items_data = [];
            foreach ($product_data['bundled_skus'] as $bundled_sku) {
                $bundled_product_id = wc_get_product_id_by_sku($bundled_sku);
                if ($bundled_product_id) {
                    $bundled_items_data[] = ['product_id' => $bundled_product_id, 'quantity_min' => 1, 'quantity_max' => 1];
                }
            }
            $product->set_props(['bundled_items' => $bundled_items_data]);
        }
        
        return $product->save();
    }
}

if (!function_exists('mco_api_admin_upsert_product')) {
    function mco_api_admin_upsert_product(WP_REST_Request $request) {
        mco_api_admin_upsert_product_helper($request->get_json_params());
        delete_transient('mco_app_config_data');
        update_option('mco_config_version', current_time('YmdHis'));
        $config_data = mco_get_full_snapshot_data(false);
        return new WP_REST_Response(['organizations' => $config_data['organizations'], 'examPrices' => $config_data['examPrices']], 200);
    }
}

if (!function_exists('mco_api_admin_delete_post')) {
    function mco_api_admin_delete_post(WP_REST_Request $request) {
        $params = $request->get_json_params();
        $post_id = (int)$params['postId'];
        $post_type = sanitize_text_field($params['postType']);
        if (get_post_type($post_id) === $post_type) {
            wp_trash_post($post_id);
        }
        delete_transient('mco_app_config_data');
        update_option('mco_config_version', current_time('YmdHis'));
        $config_data = mco_get_full_snapshot_data(false);
        return new WP_REST_Response(['organizations' => $config_data['organizations'], 'examPrices' => $config_data['examPrices']], 200);
    }
}

if (!function_exists('mco_api_get_post_creation_data')) {
    function mco_api_get_post_creation_data() {
        return new WP_REST_Response([
            'authors' => get_users(['fields' => ['ID', 'display_name']]),
            'categories' => get_categories(['hide_empty' => false, 'fields' => 'all']),
        ], 200);
    }
}

if (!function_exists('mco_api_create_post_from_app')) {
    function mco_api_create_post_from_app(WP_REST_Request $request) {
        $params = $request->get_json_params();
        $post_id = wp_insert_post([
            'post_title' => sanitize_text_field($params['post_title']),
            'post_content' => wp_kses_post($params['post_content']),
            'post_status' => sanitize_text_field($params['post_status']),
            'post_date' => sanitize_text_field($params['post_date']),
            'post_author' => (int)($params['post_author'] ?? get_current_user_id()),
            'post_category' => isset($params['post_category']) ? [(int)$params['post_category']] : [],
        ]);

        if (is_wp_error($post_id)) {
            return $post_id;
        }

        if (isset($params['program_id'])) {
            update_post_meta($post_id, '_mco_linked_program_id', (int)$params['program_id']);
        }

        return new WP_REST_Response([
            'success' => true, 
            'post_id' => $post_id, 
            'post_url' => get_edit_post_link($post_id, 'raw')
        ], 200);
    }
}
?>