<?php
if (!defined('ABSPATH')) exit;

/*
 * =================================================================================================
 * TROUBLESHOOTING: API CONNECTION FAILED or AUTHORIZATION HEADER MISSING
 * =================================================================================================
 * If the exam application cannot connect to the API (CORS errors, fetch errors, or "Authorization
 * header missing" messages), it's almost always a server configuration issue. Many shared hosting
 * environments (like Apache/LiteSpeed) strip the necessary 'Authorization' header from requests by default.
 *
 * THE FIX:
 * Add the following code to the VERY TOP of your WordPress root .htaccess file, before the
 * # BEGIN WordPress block.
 *
 * <IfModule mod_rewrite.c>
 *   RewriteEngine On
 *   RewriteCond %{HTTP:Authorization} .
 *   RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
 * </IfModule>
 * 
 * After adding this, you MUST clear all server and plugin caches (e.g., LiteSpeed Cache).
 * Caching plugins can interfere with API routes and CORS headers.
 * =================================================================================================
 */

// --- New Universal Fetcher Function ---
if (!function_exists('mco_fetch_remote_csv_content')) {
    function mco_fetch_remote_csv_content($url) {
        if (function_exists('curl_init')) {
            $ch = curl_init();
            curl_setopt($ch, CURLOPT_URL, $url);
            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
            curl_setopt($ch, CURLOPT_MAXREDIRS, 10);
            curl_setopt($ch, CURLOPT_TIMEOUT, 30);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36');
            
            $body = curl_exec($ch);
            $http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            $curl_error = curl_error($ch);
            curl_close($ch);

            if ($curl_error) {
                return new WP_Error('curl_error', 'cURL Error: ' . $curl_error);
            }

            return [
                'response' => ['code' => $http_code],
                'body' => $body
            ];
        }

        // Fallback to wp_remote_get if cURL isn't available
        $args = [
            'timeout' => 30,
            'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
            'sslverify' => false,
            'redirection' => 10
        ];
        $response = wp_remote_get($url, $args);
        
        if (is_wp_error($response)) {
            return $response;
        }

        return [
            'response' => ['code' => wp_remote_retrieve_response_code($response)],
            'body' => wp_remote_retrieve_body($response)
        ];
    }
}


// --- JWT & HELPER FUNCTIONS ---

if (!function_exists('mco_base64url_encode')) {
    function mco_base64url_encode($data) {
        return rtrim(strtr(base64_encode($data), '+/', '-_'), '=');
    }
}

if (!function_exists('mco_base64url_decode')) {
    function mco_base64url_decode($data) {
        return base64_decode(strtr($data, '-_', '+/'));
    }
}

if (!function_exists('mco_generate_exam_jwt')) {
    function mco_generate_exam_jwt($user_id) {
        if (!defined('MCO_JWT_SECRET')) {
            error_log('MCO_JWT_SECRET is not defined in wp-config.php. Cannot generate token.');
            return false;
        }
        $user = get_userdata($user_id);
        if (!$user) return false;

        $paid_exam_ids = [];
        $subscription_info = null;
        if (class_exists('WC_Subscriptions') && function_exists('wcs_user_has_subscription')) {
            $subscriptions = wcs_get_users_subscriptions($user_id);
            $is_subscribed_active = false;
            
            foreach ($subscriptions as $subscription) {
                if ($subscription->has_status(['active'])) {
                    $is_subscribed_active = true;
                    $next_payment_timestamp = $subscription->get_time('next_payment');
                    $subscription_info = [
                        'status' => 'active',
                        'nextPaymentDate' => $next_payment_timestamp ? date('F j, Y', $next_payment_timestamp) : null,
                    ];
                    break;
                } elseif ($subscription->has_status(['on-hold', 'cancelled', 'expired'])) {
                    if (!$subscription_info) { // Prioritize active status
                        $subscription_info = ['status' => $subscription->get_status()];
                    }
                }
            }
            if ($is_subscribed_active) {
                $paid_exam_ids[] = 'subscription_active';
            }
        }
        if (class_exists('WooCommerce')) {
            $customer_orders = wc_get_orders(['customer_id' => $user_id, 'status' => ['wc-completed', 'wc-processing']]);
            foreach ($customer_orders as $order) {
                foreach ($order->get_items() as $item) {
                    $product = $item->get_product();
                    if ($product && $product->get_sku()) {
                        $paid_exam_ids[] = $product->get_sku();
                    }
                }
            }
        }

        $payload = [
            'iss' => get_home_url(),
            'iat' => time(),
            'exp' => time() + (24 * 60 * 60), // 24-hour expiration
            'user' => [
                'id' => strval($user->ID),
                'email' => $user->user_email,
                'name' => $user->display_name,
                'isAdmin' => user_can($user, 'manage_options'),
            ],
            'paidExamIds' => array_unique($paid_exam_ids),
            'isSubscribed' => (class_exists('WC_Subscriptions') && function_exists('wcs_user_has_subscription') && wcs_user_has_subscription($user_id, '', 'active')),
            'subscriptionInfo' => $subscription_info,
        ];

        $header = mco_base64url_encode(json_encode(['alg' => 'HS256', 'typ' => 'JWT']));
        $payload_encoded = mco_base64url_encode(json_encode($payload));
        $signature = hash_hmac('sha256', "$header.$payload_encoded", MCO_JWT_SECRET, true);
        $signature_encoded = mco_base64url_encode($signature);

        return "$header.$payload_encoded.$signature_encoded";
    }
}

if (!function_exists('mco_verify_exam_jwt')) {
    function mco_verify_exam_jwt($token) {
        if (!defined('MCO_JWT_SECRET')) return false;
        
        $parts = explode('.', $token);
        if (count($parts) !== 3) return false;

        list($header_encoded, $payload_encoded, $signature_encoded) = $parts;

        $signature_to_verify = mco_base64url_decode($signature_encoded);
        $expected_signature = hash_hmac('sha256', "$header_encoded.$payload_encoded", MCO_JWT_SECRET, true);

        if (!hash_equals($expected_signature, $signature_to_verify)) return false;

        $payload = json_decode(mco_base64url_decode($payload_encoded), true);
        if (!$payload || (isset($payload['exp']) && $payload['exp'] < time())) return false;
        
        return $payload;
    }
}

if (!function_exists('mco_get_exam_app_url')) {
    function mco_get_exam_app_url() {
        $app_urls_string = get_option('mco_exam_app_url', '');
        if (empty($app_urls_string)) return false;
        $urls = preg_split('/\r\n|\r|\n/', $app_urls_string);
        return trim($urls[0]);
    }
}


// --- API REGISTRATION & HOOKS ---

function mco_set_api_nocache_constants(WP_REST_Server $server) {
    if (strpos($_SERVER['REQUEST_URI'], '/wp-json/mco-app/v1/') !== false) {
        if (!defined('DONOTCACHE')) define('DONOTCACHEPAGE', true);
        if (!defined('DONOTCACHEDB')) define('DONOTCACHEDB', true);
        if (!defined('DONOTCACHEOBJECT')) define('DONOTCACHEOBJECT', true);
    }
}

function mco_add_cors_and_nocache_headers($served, $result, $request, $server) {
    if (strpos($request->get_route(), '/mco-app/v1/') !== false) {
        $request_origin = get_http_origin();
        $allowed_origins = mco_get_allowed_origins();

        if ($request_origin && in_array($request_origin, $allowed_origins, true)) {
            $server->send_header('Access-Control-Allow-Origin', $request_origin);
            $server->send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE');
            $server->send_header('Access-Control-Allow-Credentials', 'true');
            $server->send_header('Access-Control-Allow-Headers', 'Authorization, Content-Type');
            $server->send_header('Vary', 'Origin');
        }
        
        $server->send_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0');
        $server->send_header('Pragma', 'no-cache');
        $server->send_header('Expires', 'Mon, 26 Jul 1997 05:00:00 GMT');

        if ($request->get_method() === 'OPTIONS') {
            status_header(200);
            exit();
        }
    }
    return $served;
}

function mco_get_allowed_origins() {
    $app_urls_string = get_option('mco_exam_app_url', '');
    if (empty($app_urls_string)) return [];

    $urls = preg_split('/\r\n|\r|\n/', $app_urls_string);
    $allowed_origins = [];

    foreach ($urls as $url) {
        $trimmed_url = trim($url);
        if (empty($trimmed_url)) continue;

        if (!preg_match('#^https?://#', $trimmed_url)) {
            $trimmed_url = 'https://' . $trimmed_url;
        }
        
        $parsed_url = parse_url($trimmed_url);
        if (empty($parsed_url['scheme']) || empty($parsed_url['host'])) continue;
        
        $origin = $parsed_url['scheme'] . '://' . $parsed_url['host'];
        if (!empty($parsed_url['port'])) {
            $origin .= ':' . $parsed_url['port'];
        }
        
        if (!in_array($origin, $allowed_origins, true)) {
            $allowed_origins[] = $origin;
        }
    }
    return $allowed_origins;
}

function mco_register_rest_routes() {
    $namespace = 'mco-app/v1';
    
    // PUBLIC ENDPOINTS
    register_rest_route($namespace, '/config', ['methods' => 'GET', 'callback' => 'mco_api_get_full_config', 'permission_callback' => '__return_true']);
    register_rest_route($namespace, '/hit', ['methods' => 'POST', 'callback' => 'mco_api_record_hit', 'permission_callback' => '__return_true']);
    register_rest_route($namespace, '/verify-certificate/(?P<certId>.+)', ['methods' => 'GET', 'callback' => 'mco_api_verify_certificate', 'permission_callback' => '__return_true', 'args' => ['certId' => ['required' => true]]]);

    // USER-PROTECTED ENDPOINTS
    register_rest_route($namespace, '/create-checkout-session', ['methods' => 'POST', 'callback' => 'mco_api_create_checkout_session', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/user-results', ['methods' => 'GET', 'callback' => 'mco_api_get_user_results', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/certificate-data/(?P<testId>[a-zA-Z0-9_-]+)', ['methods' => 'GET', 'callback' => 'mco_api_get_certificate_data', 'permission_callback' => 'mco_api_permission_check', 'args' => ['testId' => ['required' => true]]]);
    register_rest_route($namespace, '/update-name', ['methods' => 'POST', 'callback' => 'mco_api_update_name', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/questions-from-sheet', ['methods' => 'POST', 'callback' => 'mco_api_get_questions_from_sheet', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/submit-result', ['methods' => 'POST', 'callback' => 'mco_api_submit_result', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/submit-feedback', ['methods' => 'POST', 'callback' => 'mco_api_submit_feedback', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/submit-review', ['methods' => 'POST', 'callback' => 'mco_api_submit_review', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/notify-admin', ['methods' => 'POST', 'callback' => 'mco_api_notify_admin', 'permission_callback' => 'mco_api_permission_check']);

    // ADMIN-ONLY ENDPOINTS (JWT-PROTECTED)
    register_rest_route($namespace, '/exam-stats', ['methods' => 'GET', 'callback' => 'mco_api_get_exam_stats', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/debug-details', ['methods' => 'GET', 'callback' => 'mco_api_get_debug_details', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/system-status', ['methods' => 'GET', 'callback' => 'mco_api_get_system_status', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/post-creation-data', ['methods' => 'GET', 'callback' => 'mco_api_get_post_creation_data', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/create-post-from-app', ['methods' => 'POST', 'callback' => 'mco_api_create_post_from_app', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/update-exam-program', ['methods' => 'POST', 'callback' => 'mco_api_admin_update_exam_program', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/test-sheet-url', ['methods' => 'POST', 'callback' => 'mco_api_admin_test_sheet_url', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/clear-config-cache', ['methods' => 'POST', 'callback' => 'mco_api_clear_config_cache', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/clear-question-caches', ['methods' => 'POST', 'callback' => 'mco_api_clear_question_caches', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/clear-all-results', ['methods' => 'POST', 'callback' => 'mco_api_admin_clear_all_results', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/upsert-product', ['methods' => 'POST', 'callback' => 'mco_api_admin_upsert_product', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/create-exam-program', ['methods' => 'POST', 'callback' => 'mco_api_admin_create_exam_program', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/delete-post', ['methods' => 'POST', 'callback' => 'mco_api_admin_delete_post', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/set-intro-video', ['methods' => 'POST', 'callback' => 'mco_api_admin_set_intro_video', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
}

function mco_api_permission_check(WP_REST_Request $request) {
    $auth_header = $request->get_header('authorization');
    if (empty($auth_header) || !preg_match('/Bearer\s(\S+)/', $auth_header, $matches)) return new WP_Error('jwt_auth_missing_token', 'Authorization header missing. Check server configuration (e.g., .htaccess).', ['status' => 401]);
    $payload = mco_verify_exam_jwt($matches[1]);
    if (!$payload || !isset($payload['user']['id'])) return new WP_Error('jwt_auth_invalid_token', 'Invalid or expired token.', ['status' => 403]);
    
    $request->set_param('jwt_payload', $payload);
    return true;
}

function mco_api_jwt_admin_permission_check(WP_REST_Request $request) {
    $is_valid_token = mco_api_permission_check($request);
    if (is_wp_error($is_valid_token)) {
        return $is_valid_token;
    }
    $payload = $request->get_param('jwt_payload');
    if (empty($payload['user']['isAdmin'])) {
        return new WP_Error('jwt_auth_admin_required', 'Administrator access required.', ['status' => 403]);
    }
    return true;
}

// --- PUBLIC ENDPOINT CALLBACKS ---
function mco_api_get_full_config(WP_REST_Request $request) {
    $dynamic_data = mco_get_app_config_data();
    $site_name = get_bloginfo('name');
    $site_url_parts = parse_url(home_url());
    $site_host = $site_url_parts['host'] ?? 'default-site.com';
    
    $templates = get_option('mco_certificate_templates');
    if (empty($templates) || !is_array($templates)) {
        $templates = mco_get_default_certificate_templates();
    }
    
    $custom_logo_url = get_option('mco_custom_logo_url', '');
    $logo_url = !empty($custom_logo_url) ? $custom_logo_url : (get_site_icon_url(512) ?: '');
    $intro_video_url = get_option('mco_intro_video_url', '');

    $available_themes = [
        [ 'id' => 'default', 'name' => 'Cyberpunk' ],
        [ 'id' => 'professional', 'name' => 'Professional' ],
        [ 'id' => 'serene', 'name' => 'Serene' ],
        [ 'id' => 'academic', 'name' => 'Academic' ],
        [ 'id' => 'noir', 'name' => 'Noir' ],
    ];

    $config_object = [
        "version" => get_option('mco_config_version', current_time('YmdHis')),
        "organizations" => [
            [
                "id" => "org-" . sanitize_title($site_name),
                "name" => $site_name,
                "website" => $site_host,
                "logo" => $logo_url,
                "introVideoUrl" => $intro_video_url,
                "availableThemes" => $available_themes,
                "activeThemeId" => get_option('mco_active_theme_id', 'default'),
                "certificateThemeId" => get_option('mco_certificate_theme_id', 'classic'),
                "exams" => $dynamic_data['exams'],
                "examProductCategories" => $dynamic_data['examProductCategories'],
                "certificateTemplates" => array_values($templates),
                "suggestedBooks" => $dynamic_data['suggestedBooks']
            ]
        ],
        "examPrices" => $dynamic_data['examPrices'] ?? null
    ];
    return new WP_REST_Response($config_object, 200);
}

function mco_api_record_hit(WP_REST_Request $request) {
    $count = (int) get_option('mco_site_hit_count', 0);
    if ($count === 0) {
        $count = 24567; // Set initial value if not set
    }
    $count++;
    update_option('mco_site_hit_count', $count);
    return new WP_REST_Response(['count' => $count], 200);
}

function mco_api_verify_certificate(WP_REST_Request $request) {
    $cert_id = sanitize_text_field($request['certId']);
    $parts = explode('-', $cert_id);
    
    if (count($parts) !== 4 || $parts[0] !== 'MCO') {
        return new WP_Error('invalid_format', 'Invalid Certificate ID format.', ['status' => 400]);
    }
    list(, $user_id, $exam_post_id, $timestamp_sec) = $parts;
    $user_id = (int)$user_id;
    $timestamp_ms = $timestamp_sec * 1000;
    
    if ($user_id <= 0) return new WP_Error('not_found', 'Certificate not found.', ['status' => 404]);

    $user_results = get_user_meta($user_id, 'mco_exam_results', true) ?: [];
    $matching_result = null;

    $exam_sku = get_post_meta($exam_post_id, '_mco_certification_exam_sku', true);
    if (!$exam_sku) return new WP_Error('not_found', 'Invalid exam reference.', ['status' => 404]);

    foreach ($user_results as $result) {
        // Compare timestamps with a 5-second tolerance window for JS/PHP timing differences
        if (isset($result['userId'], $result['examId'], $result['timestamp']) &&
            $result['userId'] == $user_id &&
            $result['examId'] === $exam_sku &&
            abs($result['timestamp'] - $timestamp_ms) < 5000) {
            $matching_result = $result;
            break;
        }
    }

    if (!$matching_result) return new WP_Error('not_found', 'Could not find a matching exam record for this ID.', ['status' => 404]);

    $user_data = get_userdata($user_id);
    if (!$user_data) return new WP_Error('not_found', 'Candidate not found.', ['status' => 404]);

    return new WP_REST_Response([
        'candidateName' => $user_data->display_name,
        'examName' => get_the_title($exam_post_id),
        'finalScore' => $matching_result['score'],
        'date' => date('F j, Y', $timestamp_sec),
    ], 200);
}

// --- USER-PROTECTED ENDPOINT CALLBACKS ---
function mco_api_create_checkout_session(WP_REST_Request $request) {
    if (!class_exists('WooCommerce')) {
        return new WP_Error('woocommerce_not_found', 'WooCommerce is not active.', ['status' => 500]);
    }
    $sku = sanitize_text_field($request->get_param('sku'));
    if (empty($sku)) return new WP_Error('bad_request', 'Product SKU is required.', ['status' => 400]);

    $product_id = wc_get_product_id_by_sku($sku);
    if (!$product_id) return new WP_Error('not_found', 'Product not found for the given SKU.', ['status' => 404]);

    $checkout_url = add_query_arg(['add-to-cart' => $product_id], wc_get_checkout_url());
    return new WP_REST_Response(['checkoutUrl' => $checkout_url], 200);
}

function mco_api_get_user_results(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user_id = $payload['user']['id'];
    $results = get_user_meta($user_id, 'mco_exam_results', true);

    if (!is_array($results)) {
        $results = [];
    }
    
    return new WP_REST_Response(array_values($results), 200);
}

function mco_api_get_certificate_data(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user_id = $payload['user']['id'];
    $test_id = $request['testId'];
    $is_admin_view = isset($_GET['admin_view']) && $_GET['admin_view'] === 'true' && $payload['user']['isAdmin'];

    // For admin view, we might need to query another user's data in the future.
    // For now, we assume it's the admin viewing their own certificate or a sample.
    $results = get_user_meta($user_id, 'mco_exam_results', true) ?: [];
    
    if (!isset($results[$test_id])) return new WP_Error('not_found', 'Result not found.', ['status' => 404]);
    $result = $results[$test_id];
    
    $exam_name = 'Examination';
    $exam_post_id = 'NA';
    $exam_sku = $result['examId'];

    $args = [
        'post_type' => 'mco_exam_program',
        'meta_key' => '_mco_certification_exam_sku',
        'meta_value' => $exam_sku,
        'posts_per_page' => 1,
        'fields' => 'ids'
    ];
    $query = new WP_Query($args);
    if (!empty($query->posts)) {
        $exam_post_id = $query->posts[0];
        $cert_name_override = get_post_meta($exam_post_id, '_mco_cert_exam_title_override', true);
        $exam_name = !empty($cert_name_override) ? $cert_name_override : get_the_title($exam_post_id);
    } else {
        $all_exams_data = mco_get_app_config_data();
        if (isset($all_exams_data['exams'])) {
            foreach ($all_exams_data['exams'] as $exam) {
                if ($exam['id'] === $exam_sku) {
                    $exam_name = $exam['name'];
                    break;
                }
            }
        }
    }
    
    $timestamp_sec = floor($result['timestamp'] / 1000);
    $prefix = 'MCO';
    $cert_number = sprintf('%s-%s-%s-%s', $prefix, $user_id, $exam_post_id, $timestamp_sec);

    return new WP_REST_Response([
        'certificateNumber' => $cert_number, 
        'candidateName' => $payload['user']['name'], 
        'finalScore' => $result['score'], 
        'date' => date('F j, Y', $result['timestamp'] / 1000), 
        'examId' => $result['examId'],
        'examName' => $exam_name
    ], 200);
}

function mco_api_update_name(WP_REST_Request $request) {
    $new_name = sanitize_text_field($request->get_param('fullName'));
    if (empty($new_name) || count(explode(' ', $new_name)) < 2) return new WP_Error('bad_request', 'Please provide a full name.', ['status' => 400]);
    wp_update_user(['ID' => $request->get_param('jwt_payload')['user']['id'], 'display_name' => $new_name]);
    return new WP_REST_Response(['message' => 'Name updated successfully.'], 200);
}

function mco_api_submit_result(WP_REST_Request $request) {
    $result_data = $request->get_json_params();
    if (empty($result_data['testId'])) return new WP_Error('bad_request', 'Invalid result data.', ['status' => 400]);
    $results = get_user_meta($request->get_param('jwt_payload')['user']['id'], 'mco_exam_results', true) ?: [];
    $results[$result_data['testId']] = $result_data;
    update_user_meta($request->get_param('jwt_payload')['user']['id'], 'mco_exam_results', $results);
    return new WP_REST_Response(['message' => 'Result saved.'], 200);
}

function mco_api_get_questions_from_sheet(WP_REST_Request $request) {
    $sheet_url = esc_url_raw($request->get_param('sheetUrl'));
    if (empty($sheet_url)) return new WP_Error('bad_request', 'Sheet URL is missing.', ['status' => 400]);

    if (strpos($sheet_url, '/pub?output=csv') === false && strpos($sheet_url, '/export?format=csv') === false) {
        return new WP_Error('bad_request', 'Invalid Google Sheet URL. Please use a "Publish to the web" CSV link or a share link with "/export?format=csv".', ['status' => 400]);
    }

    $transient_key = 'mco_sheet_' . md5($sheet_url);
    $questions = get_transient($transient_key);

    if (false === $questions) {
        $response = mco_fetch_remote_csv_content($sheet_url);
        if (is_wp_error($response)) return new WP_Error('fetch_error', 'Could not connect to Google Sheets: ' . $response->get_error_message(), ['status' => 500]);
        if ($response['response']['code'] != 200) return new WP_Error('fetch_error', 'HTTP Status ' . $response['response']['code'] . '. Check sheet sharing settings.', ['status' => 500]);

        $body = $response['body'];
        if (function_exists('mb_convert_encoding')) $body = mb_convert_encoding($body, 'UTF-8', mb_detect_encoding($body, 'UTF-8, ISO-8859-1', true));
        
        $rows = preg_split('/\r\n|\r|\n/', trim($body));
        array_shift($rows);
        $questions = [];
        $errors = [];

        foreach ($rows as $i => $row) {
            $row_num = $i + 2;
            if (empty(trim($row)) || strpos(trim($row), '#') === 0) continue;
            
            $data = str_getcsv($row);
            $question_text = trim($data[0] ?? '');
            if (empty($question_text)) continue;

            $options = [];
            $correct_answer_input = null;

            if (count($data) >= 6) { // 6-column format
                $options = array_map('trim', array_slice($data, 1, 4));
                $correct_answer_input = trim($data[5] ?? '');
            } elseif (count($data) >= 3) { // 3-column legacy format
                $options = array_map('trim', explode('|', $data[1] ?? ''));
                $correct_answer_input = trim($data[2] ?? '');
            } else {
                $errors[] = "Row {$row_num}: Invalid format. Expected 3 or 6 columns, found " . count($data) . ".";
                continue;
            }
            
            $options = array_filter($options, function($opt) { return !empty($opt); });
            if (count($options) < 2) {
                $errors[] = "Row {$row_num}: Must have at least two non-empty options.";
                continue;
            }

            $correct_answer_index = -1;
            if (is_numeric($correct_answer_input) && intval($correct_answer_input) > 0 && intval($correct_answer_input) <= count($options)) {
                $correct_answer_index = intval($correct_answer_input) - 1;
            } else {
                 $lc_correct_answer = strtolower(trim($correct_answer_input));
                 foreach ($options as $index => $option_text) {
                     if (strtolower(trim($option_text)) === $lc_correct_answer) {
                         $correct_answer_index = $index;
                         break;
                     }
                 }
            }

            if ($correct_answer_index !== -1) {
                $questions[] = ['id' => $row_num, 'question' => $question_text, 'options' => $options, 'correctAnswer' => $correct_answer_index + 1];
            } else {
                $errors[] = "Row {$row_num}: Could not determine correct answer from input '{$correct_answer_input}'.";
            }
        }

        if (!empty($questions)) set_transient($transient_key, $questions, 15 * MINUTE_IN_SECONDS);
    }

    if (empty($questions)) {
        delete_transient($transient_key);
        $error_message = 'No valid questions could be parsed from the source.';
        if (!empty($errors) && mco_api_jwt_admin_permission_check($request) === true) $error_message .= ' Admin Debug: ' . implode(' ', array_slice($errors, 0, 3));
        return new WP_Error('no_questions', $error_message, ['status' => 500, 'data' => ['debug_errors' => $errors]]);
    }

    shuffle($questions);
    $count = intval($request->get_param('count'));
    return new WP_REST_Response($count > 0 ? array_slice($questions, 0, $count) : $questions, 200);
}

function mco_api_get_debug_details(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user_results = get_user_meta($payload['user']['id'], 'mco_exam_results', true) ?: [];
    
    $sheet_test = ['success' => false, 'message' => 'No exams with a Sheet URL were found.'];
    $config = mco_get_app_config_data();
    $test_url = '';
    
    if (!empty($config['exams'])) foreach($config['exams'] as $exam) if(!empty($exam['questionSourceUrl'])) {$test_url = $exam['questionSourceUrl']; break;}
    
    if ($test_url) {
        $response = mco_fetch_remote_csv_content($test_url);
        if (is_wp_error($response)) $sheet_test = ['success' => false, 'message' => 'WP_Error: ' . $response->get_error_message()];
        else {
             $status_code = $response['response']['code'];
             if ($status_code != 200) $sheet_test = ['success' => false, 'message' => 'HTTP Status ' . $status_code];
             else $sheet_test = ['success' => true, 'message' => 'OK', 'dataPreview' => substr($response['body'], 0, 500) . '...'];
        }
    }
    
    return new WP_REST_Response([
        'user' => $payload['user'], 'purchases' => $payload['paidExamIds'] ?? [], 
        'results' => array_values($user_results), 'sheetTest' => $sheet_test
    ], 200);
}

function mco_api_submit_feedback(WP_REST_Request $request) {
    $user_email = $request->get_param('jwt_payload')['user']['email'];
    $category = sanitize_text_field($request->get_param('category'));
    $message = sanitize_textarea_field($request->get_param('message'));
    error_log("Feedback from {$user_email} ({$category}): {$message}");
    return new WP_REST_Response(['success' => true], 200);
}

function mco_api_submit_review(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $exam_id_sku = sanitize_text_field($request->get_param('examId'));
    $product_id = wc_get_product_id_by_sku($exam_id_sku);
    if (!$product_id) return new WP_Error('not_found', 'Product not found for review.', ['status' => 404]);

    $comment_id = wp_insert_comment([
        'comment_post_ID' => $product_id, 'comment_author' => $payload['user']['name'],
        'comment_author_email' => $payload['user']['email'], 'user_id' => $payload['user']['id'],
        'comment_content' => sanitize_textarea_field($request->get_param('reviewText')),
        'comment_type' => 'review', 'comment_approved' => 1,
    ]);
    if ($comment_id) update_comment_meta($comment_id, 'rating', intval($request->get_param('rating')));
    return new WP_REST_Response(['success' => (bool)$comment_id], 200);
}

function mco_api_notify_admin(WP_REST_Request $request) {
    $admin_email = get_option('admin_email');
    $subject = sanitize_text_field($request->get_param('subject'));
    $message = sanitize_textarea_field($request->get_param('message'));
    $context = $request->get_param('context');
    
    $body = "A new notification was triggered from the Exam App:\n\n";
    $body .= $message . "\n\n--- CONTEXT ---\n";
    $body .= print_r($context, true);
    
    wp_mail($admin_email, "[Exam App] " . $subject, $body);
    return new WP_REST_Response(['success' => true], 200);
}

function mco_api_admin_test_sheet_url(WP_REST_Request $request) {
    $sheet_url = esc_url_raw($request->get_param('sheetUrl'));
    if (empty($sheet_url)) {
        return new WP_Error('bad_request', 'Sheet URL is missing.', ['status' => 400]);
    }
    $response = mco_fetch_remote_csv_content($sheet_url);

    if (is_wp_error($response)) {
        return new WP_Error('fetch_error', 'Could not connect to Google Sheets: ' . $response->get_error_message(), ['status' => 500]);
    }

    $status_code = $response['response']['code'];
    $body = $response['body'];

    if ($status_code != 200) {
        return new WP_REST_Response([
            'success' => false,
            'message' => 'HTTP Status ' . $status_code,
        ], 200);
    }

    if (empty(trim($body))) {
        return new WP_REST_Response([
            'success' => false,
            'message' => 'Sheet is empty',
        ], 200);
    }
    
    return new WP_REST_Response([
        'success' => true,
        'message' => 'Accessible',
        'dataPreview' => substr($body, 0, 500) . '...'
    ], 200);
}

function mco_api_get_system_status(WP_REST_Request $request) {
    $status = [];
    $status['api_connection'] = [ 'success' => true, 'message' => 'Connected' ];
    $status['jwt_secret'] = [ 'success' => defined('MCO_JWT_SECRET'), 'message' => defined('MCO_JWT_SECRET') ? 'Defined' : 'Not Defined!' ];
    $status['woocommerce'] = [ 'success' => class_exists('WooCommerce'), 'message' => class_exists('WooCommerce') ? 'Active' : 'Not Active' ];
    $status['wc_subscriptions'] = [ 'success' => class_exists('WC_Subscriptions'), 'message' => class_exists('WC_Subscriptions') ? 'Active' : 'Not Active (Optional)' ];
    $app_url = get_option('mco_exam_app_url', '');
    $status['app_url_config'] = [ 'success' => !empty($app_url), 'message' => !empty($app_url) ? 'Configured' : 'Not Configured', 'data' => esc_textarea($app_url) ];
    
    $sheet_test = ['success' => false, 'message' => 'No sheet URLs configured.'];
    $config = mco_get_app_config_data();
    $test_url = '';
    if (!empty($config['exams'])) {
        foreach($config['exams'] as $exam) if(!empty($exam['questionSourceUrl'])) {$test_url = $exam['questionSourceUrl']; break;}
    }
    if ($test_url) {
        $response = mco_fetch_remote_csv_content($test_url);
        if (is_wp_error($response)) $sheet_test = ['success' => false, 'message' => 'WP_Error: ' . $response->get_error_message()];
        else {
             $status_code = $response['response']['code'];
             if ($status_code != 200) $sheet_test = ['success' => false, 'message' => 'HTTP Status ' . $status_code];
             else if (empty(trim($response['body']))) $sheet_test = ['success' => false, 'message' => 'Sheet is empty'];
             else $sheet_test = ['success' => true, 'message' => 'Accessible', 'data' => substr($response['body'], 0, 500) . '...'];
        }
    }
    $status['google_sheet'] = $sheet_test;

    return new WP_REST_Response($status, 200);
}

// --- RESTORED ADMIN FUNCTIONS ---
function mco_api_get_exam_stats(WP_REST_Request $request) {
    $all_user_results = [];
    $users = get_users(['fields' => ['ID']]);
    foreach ($users as $user) {
        $results = get_user_meta($user->ID, 'mco_exam_results', true);
        if (is_array($results)) {
            foreach($results as $result) {
                if(isset($result['examId'])) {
                    if (!isset($all_user_results[$result['examId']])) {
                        $all_user_results[$result['examId']] = [];
                    }
                    $all_user_results[$result['examId']][] = $result;
                }
            }
        }
    }

    $exam_programs = get_posts(['post_type' => 'mco_exam_program', 'posts_per_page' => -1, 'post_status' => 'publish']);
    $stats = [];
    foreach ($exam_programs as $program) {
        $sku = get_post_meta($program->ID, '_mco_certification_exam_sku', true);
        if (!$sku) continue;
        
        $product_id = wc_get_product_id_by_sku($sku);
        $product = $product_id ? wc_get_product($product_id) : null;
        if (!$product) continue;

        $attempts = isset($all_user_results[$sku]) ? count($all_user_results[$sku]) : 0;
        $total_score = 0;
        $passed_count = 0;
        $pass_score_term = mco_get_single_term($program->ID, 'exam_pass_score', 'name');
        $pass_score = !empty($pass_score_term) ? (int)$pass_score_term : 70;


        if ($attempts > 0) {
            foreach ($all_user_results[$sku] as $result) {
                $total_score += $result['score'];
                if ($result['score'] >= $pass_score) {
                    $passed_count++;
                }
            }
        }
        
        $stats[] = [
            'id' => $sku,
            'name' => get_the_title($program),
            'attempts' => $attempts,
            'averageScore' => $attempts > 0 ? $total_score / $attempts : 0,
            'passRate' => $attempts > 0 ? ($passed_count / $attempts) * 100 : 0,
            'totalSales' => (int)$product->get_total_sales(),
            'totalRevenue' => (float)$product->get_total_sales() * (float)$product->get_price(),
        ];
    }
    return new WP_REST_Response($stats, 200);
}

function mco_api_get_post_creation_data(WP_REST_Request $request) {
    $authors_query = get_users([
        'role__in' => ['author', 'editor', 'administrator'],
        'fields' => ['ID', 'display_name']
    ]);
    
    $categories = get_categories(['hide_empty' => false]);
    $formatted_categories = [];
    foreach($categories as $category) {
        $formatted_categories[] = [
            'term_id' => $category->term_id,
            'name' => $category->name,
        ];
    }

    return new WP_REST_Response([
        'authors' => $authors_query,
        'categories' => $formatted_categories,
    ], 200);
}

// --- ADDING MISSING ADMIN ENDPOINT CALLBACKS ---

function mco_api_clear_config_cache(WP_REST_Request $request) {
    delete_transient('mco_app_config_data');
    update_option('mco_config_version', current_time('YmdHis'));
    return new WP_REST_Response(['success' => true, 'message' => 'Application config cache cleared.'], 200);
}

function mco_api_clear_question_caches(WP_REST_Request $request) {
    global $wpdb;
    $wpdb->query("DELETE FROM {$wpdb->options} WHERE option_name LIKE '\_transient\_mco\_sheet\_%' OR option_name LIKE '\_transient\_timeout\_mco\_sheet\_%'");
    return new WP_REST_Response(['success' => true, 'message' => 'All question sheet caches cleared.'], 200);
}

function mco_api_admin_clear_all_results(WP_REST_Request $request) {
    global $wpdb;
    $wpdb->query("DELETE FROM {$wpdb->usermeta} WHERE meta_key = 'mco_exam_results'");
    return new WP_REST_Response(['success' => true, 'message' => 'All user exam results have been deleted from the database.'], 200);
}

function mco_api_admin_update_exam_program(WP_REST_Request $request) {
    $program_id = $request->get_param('programId');
    $update_data = $request->get_param('updateData');

    if (empty($program_id) || empty($update_data) || !is_array($update_data)) {
        return new WP_Error('bad_request', 'Missing programId or updateData.', ['status' => 400]);
    }

    $post_id = (int) str_replace('prod-', '', $program_id);
    if ($post_id <= 0 || get_post_type($post_id) !== 'mco_exam_program') {
        return new WP_Error('not_found', 'Exam program not found.', ['status' => 404]);
    }

    if (isset($update_data['programName'])) {
        wp_update_post(['ID' => $post_id, 'post_title' => sanitize_text_field($update_data['programName'])]);
    }
    if (isset($update_data['programDescription'])) {
        wp_update_post(['ID' => $post_id, 'post_content' => wp_kses_post($update_data['programDescription'])]);
    }

    $meta_map = [
        'questionSourceUrl' => '_mco_question_source_url',
        'practice_name_override' => '_mco_practice_exam_title_override',
        'cert_name_override' => '_mco_cert_exam_title_override',
        'cert_productSku' => '_mco_certification_exam_sku',
        'cert_isProctored' => '_mco_is_proctored',
        'cert_certificateEnabled' => '_mco_certificate_enabled',
        'practice_certificateEnabled' => '_mco_practice_certificate_enabled',
        'recommended_book_ids' => '_mco_recommended_book_ids'
    ];
    foreach ($meta_map as $key => $meta_key) {
        if (isset($update_data[$key])) {
            $value = $update_data[$key];
            if (is_bool($value)) {
                $value = $value ? '1' : '0';
            }
            if ($meta_key === '_mco_recommended_book_ids') {
                $book_post_ids = [];
                if (is_array($value)) {
                    foreach($value as $book_app_id) {
                        $args = ['post_type' => 'mco_recommended_book', 'meta_key' => '_mco_book_id', 'meta_value' => sanitize_text_field($book_app_id), 'posts_per_page' => 1, 'fields' => 'ids'];
                        $query = new WP_Query($args);
                        if (!empty($query->posts)) {
                            $book_post_ids[] = $query->posts[0];
                        }
                    }
                }
                update_post_meta($post_id, $meta_key, $book_post_ids);
            } else {
                update_post_meta($post_id, $meta_key, sanitize_text_field($value));
            }
        }
    }
    
    $taxonomy_map = [
        'practice_numberOfQuestions' => 'exam_practice_questions',
        'practice_durationMinutes' => 'exam_practice_duration',
        'cert_numberOfQuestions' => 'exam_cert_questions',
        'cert_durationMinutes' => 'exam_cert_duration',
        'cert_passScore' => 'exam_pass_score'
    ];
    foreach ($taxonomy_map as $key => $taxonomy) {
        if (isset($update_data[$key])) {
            wp_set_object_terms($post_id, sanitize_text_field($update_data[$key]), $taxonomy, false);
        }
    }

    delete_transient('mco_app_config_data');
    update_option('mco_config_version', current_time('YmdHis'));
    $config = mco_get_app_config_data();

    return new WP_REST_Response([
        'organizations' => [mco_get_full_config(new WP_REST_Request())->get_data()['organizations'][0]],
        'examPrices' => $config['examPrices'] ?? null
    ], 200);
}

function mco_api_admin_create_exam_program(WP_REST_Request $request) {
    $program_name = sanitize_text_field($request->get_param('programName'));
    $product_link_data = $request->get_param('productLinkData');

    if (empty($program_name) || empty($product_link_data)) {
        return new WP_Error('bad_request', 'Program name and product link data are required.', ['status' => 400]);
    }

    $post_id = wp_insert_post([
        'post_title' => $program_name,
        'post_status' => 'publish',
        'post_type' => 'mco_exam_program',
        'post_content' => 'Description for ' . $program_name,
    ]);

    if (is_wp_error($post_id)) {
        return $post_id;
    }

    $sku_to_link = '';
    if ($product_link_data['type'] === 'auto') {
        $sku_to_link = 'exam-' . sanitize_title($program_name);
        $product = new WC_Product_Simple();
        $product->set_name($program_name . ' Certification');
        $product->set_sku($sku_to_link);
        $product->set_regular_price('49.99');
        $product->set_virtual(true);
        $product->save();
    } elseif ($product_link_data['type'] === 'existing') {
        $sku_to_link = sanitize_text_field($product_link_data['sku']);
    }  elseif ($product_link_data['type'] === 'new') {
        $sku_to_link = sanitize_text_field($product_link_data['sku']);
        $product = new WC_Product_Simple();
        $product->set_name(sanitize_text_field($product_link_data['name']));
        $product->set_sku($sku_to_link);
        $product->set_sale_price(sanitize_text_field($product_link_data['price']));
        $product->set_regular_price(sanitize_text_field($product_link_data['regularPrice']));
        $product->set_virtual(true);
        $product->save();
    }

    update_post_meta($post_id, '_mco_certification_exam_sku', $sku_to_link);
    wp_set_object_terms($post_id, '70', 'exam_pass_score');
    wp_set_object_terms($post_id, '100', 'exam_cert_questions');
    wp_set_object_terms($post_id, '120', 'exam_cert_duration');
    wp_set_object_terms($post_id, '25', 'exam_practice_questions');
    wp_set_object_terms($post_id, '60', 'exam_practice_duration');
    update_post_meta($post_id, '_mco_certificate_enabled', '1');

    delete_transient('mco_app_config_data');
    update_option('mco_config_version', current_time('YmdHis'));
    $config = mco_get_app_config_data();

    return new WP_REST_Response([
        'organizations' => [mco_get_full_config(new WP_REST_Request())->get_data()['organizations'][0]],
        'examPrices' => $config['examPrices'] ?? null
    ], 200);
}

function mco_api_admin_upsert_product(WP_REST_Request $request) {
    $product_data = $request->get_json_params();
    $sku = sanitize_text_field($product_data['sku']);
    if (empty($sku)) {
        return new WP_Error('bad_request', 'SKU is required.', ['status' => 400]);
    }
    
    $product_id = wc_get_product_id_by_sku($sku);
    $product_type = 'simple';
    if (isset($product_data['subscription_period'])) {
        $product_type = 'subscription';
    }

    if ($product_id) {
        $product = wc_get_product($product_id);
    } else {
        if ($product_type === 'subscription' && class_exists('WC_Product_Subscription')) {
            $product = new WC_Product_Subscription();
        } else {
            $product = new WC_Product_Simple();
        }
        $product->set_sku($sku);
    }

    if (isset($product_data['name'])) $product->set_name(sanitize_text_field($product_data['name']));
    if (isset($product_data['price'])) $product->set_sale_price($product_data['price']);
    if (isset($product_data['regularPrice'])) $product->set_regular_price($product_data['regularPrice']);
    
    if ($product_type === 'subscription' && isset($product_data['price'])) {
        $product->set_price($product_data['price']);
    }
    
    $product->set_virtual(true);
    $product_id = $product->save();

    if ($product_id) {
        if ($product_type === 'subscription') {
            update_post_meta($product_id, '_subscription_period', sanitize_text_field($product_data['subscription_period']));
            update_post_meta($product_id, '_subscription_period_interval', sanitize_text_field($product_data['subscription_period_interval']));
            update_post_meta($product_id, '_subscription_length', sanitize_text_field($product_data['subscription_length']));
        }
        if (isset($product_data['isBundle'])) {
            update_post_meta($product_id, '_mco_is_bundle', $product_data['isBundle'] ? 'yes' : 'no');
            if (isset($product_data['bundled_skus'])) {
                update_post_meta($product_id, '_mco_bundled_skus', $product_data['bundled_skus']);
            }
        }
    }
    
    delete_transient('mco_app_config_data');
    update_option('mco_config_version', current_time('YmdHis'));
    $config = mco_get_app_config_data();

    return new WP_REST_Response([
        'organizations' => [mco_get_full_config(new WP_REST_Request())->get_data()['organizations'][0]],
        'examPrices' => $config['examPrices'] ?? null
    ], 200);
}

function mco_api_admin_delete_post(WP_REST_Request $request) {
    $post_id = sanitize_text_field($request->get_param('postId'));
    $post_type = sanitize_text_field($request->get_param('postType'));

    if (empty($post_id) || empty($post_type)) {
        return new WP_Error('bad_request', 'Post ID and Post Type are required.', ['status' => 400]);
    }
    
    $allowed_types = ['mco_exam_program', 'product'];
    if (!in_array($post_type, $allowed_types, true)) {
        return new WP_Error('bad_request', 'Invalid post type specified.', ['status' => 400]);
    }

    $result = wp_trash_post($post_id);

    if ($result === false) {
        return new WP_Error('delete_failed', 'Could not move the post to trash.', ['status' => 500]);
    }

    delete_transient('mco_app_config_data');
    update_option('mco_config_version', current_time('YmdHis'));
    $config = mco_get_app_config_data();

    return new WP_REST_Response([
        'organizations' => [mco_get_full_config(new WP_REST_Request())->get_data()['organizations'][0]],
        'examPrices' => $config['examPrices'] ?? null
    ], 200);
}

function mco_api_create_post_from_app(WP_REST_Request $request) {
    $payload = $request->get_json_params();

    $new_post_args = [
        'post_title'   => sanitize_text_field($payload['post_title']),
        'post_content' => wp_kses_post($payload['post_content']),
        'post_status'  => sanitize_text_field($payload['post_status']),
        'post_date'    => sanitize_text_field($payload['post_date']),
        'post_author'  => isset($payload['post_author']) ? intval($payload['post_author']) : get_current_user_id(),
        'post_type'    => 'post',
    ];

    if (isset($payload['post_category'])) {
        $new_post_args['post_category'] = [intval($payload['post_category'])];
    }
    
    $post_id = wp_insert_post($new_post_args, true);

    if (is_wp_error($post_id)) {
        return $post_id;
    }
    
    if (isset($payload['keywords'])) {
        update_post_meta($post_id, '_yoast_wpseo_focuskw', sanitize_text_field($payload['keywords']));
    }
    
    return new WP_REST_Response([
        'success' => true,
        'post_id' => $post_id,
        'post_url' => get_edit_post_link($post_id, 'raw'),
    ], 200);
}

function mco_api_admin_set_intro_video(WP_REST_Request $request) {
    if (!function_exists('wp_handle_upload')) {
        require_once(ABSPATH . 'wp-admin/includes/file.php');
    }

    $uploaded_file = $_FILES['video'];
    $upload_overrides = ['test_form' => false];
    $movefile = wp_handle_upload($uploaded_file, $upload_overrides);

    if ($movefile && !isset($movefile['error'])) {
        update_option('mco_intro_video_url', $movefile['url']);

        delete_transient('mco_app_config_data');
        update_option('mco_config_version', current_time('YmdHis'));
        $config = mco_get_app_config_data();

        return new WP_REST_Response([
            'organizations' => [mco_get_full_config(new WP_REST_Request())->get_data()['organizations'][0]],
            'examPrices' => $config['examPrices'] ?? null
        ], 200);
    } else {
        return new WP_Error('upload_error', $movefile['error'], ['status' => 500]);
    }
}

?>