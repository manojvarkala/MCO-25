<?php
if (!defined('ABSPATH')) exit;

// All CORS logic has been moved to mco-exam-integration-engine.php for a robust, centralized implementation.
// This file is now only responsible for registering API endpoints and their callbacks.

// --- JWT & HELPER FUNCTIONS ---
if (!function_exists('mco_base64url_encode')) {
    function mco_base64url_encode($data) { return rtrim(strtr(base64_encode($data), '+/', '-_'), '='); }
}
if (!function_exists('mco_base64url_decode')) {
    function mco_base64url_decode($data) { return base64_decode(strtr($data, '-_', '+/')); }
}

if (!function_exists('mco_get_user_subscription_info')) {
    function mco_get_user_subscription_info($user_id) {
        if (!class_exists('WC_Subscriptions') || !function_exists('wcs_get_users_subscriptions')) return null;

        $subscriptions = wcs_get_users_subscriptions($user_id);
        if (empty($subscriptions)) return null;

        $active_sub = null;
        $latest_sub = null;
        foreach ($subscriptions as $subscription) {
            if (!$latest_sub) $latest_sub = $subscription;
            if ($subscription->has_status(['active'])) {
                $active_sub = $subscription;
                break;
            }
        }
        $sub_to_use = $active_sub ? $active_sub : $latest_sub;
        if (!$sub_to_use) return null;
        
        $next_payment_timestamp = $sub_to_use->get_time('next_payment');

        return [
            'status' => $sub_to_use->get_status(),
            'nextPaymentDate' => $next_payment_timestamp ? date('F j, Y', $next_payment_timestamp) : null
        ];
    }
}

if (!function_exists('mco_generate_exam_jwt')) {
    function mco_generate_exam_jwt($user_id) {
        if (!defined('MCO_JWT_SECRET')) {
            error_log('MCO_JWT_SECRET is not defined in wp-config.php. Cannot generate token.');
            return false;
        }
        $user = get_userdata($user_id);
        if (!$user) return false;

        $paid_exam_ids = [];
        $subscription_info = mco_get_user_subscription_info($user_id);
        $is_subscribed = $subscription_info && $subscription_info['status'] === 'active';
        
        if ($is_subscribed) {
            $paid_exam_ids[] = 'subscription_active';
        }
        
        if (class_exists('WooCommerce')) {
            $customer_orders = wc_get_orders(['customer_id' => $user_id, 'status' => ['wc-completed', 'wc-processing']]);
            foreach ($customer_orders as $order) {
                foreach ($order->get_items() as $item) {
                    $product = $item->get_product();
                    if ($product && $product->get_sku()) {
                        $paid_exam_ids[] = $product->get_sku();
                    }
                }
            }
        }

        $payload = [
            'iss' => get_home_url(),
            'iat' => time(),
            'exp' => time() + (24 * 60 * 60), // 24-hour expiration
            'user' => [
                'id' => strval($user->ID),
                'email' => $user->user_email,
                'name' => $user->display_name,
                'isAdmin' => user_can($user, 'manage_options'),
            ],
            'paidExamIds' => array_unique($paid_exam_ids),
            'isSubscribed' => $is_subscribed,
            'subscriptionInfo' => $subscription_info
        ];

        $header = mco_base64url_encode(json_encode(['alg' => 'HS256', 'typ' => 'JWT']));
        $payload_encoded = mco_base64url_encode(json_encode($payload));
        $signature = hash_hmac('sha256', "$header.$payload_encoded", MCO_JWT_SECRET, true);
        $signature_encoded = mco_base64url_encode($signature);

        return "$header.$payload_encoded.$signature_encoded";
    }
}

if (!function_exists('mco_verify_exam_jwt')) {
    function mco_verify_exam_jwt($token) {
        if (!defined('MCO_JWT_SECRET')) return false;
        $parts = explode('.', $token);
        if (count($parts) !== 3) return false;
        list($header_encoded, $payload_encoded, $signature_encoded) = $parts;
        $signature_to_verify = mco_base64url_decode($signature_encoded);
        $expected_signature = hash_hmac('sha256', "$header_encoded.$payload_encoded", MCO_JWT_SECRET, true);
        if (!hash_equals($expected_signature, $signature_to_verify)) return false;
        $payload = json_decode(mco_base64url_decode($payload_encoded), true);
        if (!$payload || (isset($payload['exp']) && $payload['exp'] < time())) return false;
        return $payload;
    }
}

// --- API REGISTRATION & HOOKS ---
if (!function_exists('mco_register_api_hooks')) {
    function mco_register_api_hooks() {
        mco_register_rest_routes();
    }
}

if (!function_exists('mco_register_rest_routes')) {
    function mco_register_rest_routes() {
        $namespace = 'mco-app/v1';

        // Public endpoints
        register_rest_route($namespace, '/config', ['methods' => 'GET', 'callback' => 'mco_api_get_config', 'permission_callback' => '__return_true']);
        register_rest_route($namespace, '/hit', ['methods' => 'POST', 'callback' => 'mco_api_record_hit', 'permission_callback' => '__return_true']);
        register_rest_route($namespace, '/verify-certificate/(?P<certId>.+)', ['methods' => 'GET', 'callback' => 'mco_api_verify_certificate', 'permission_callback' => '__return_true']);

        // User-authenticated endpoints
        register_rest_route($namespace, '/user-results', ['methods' => 'GET', 'callback' => 'mco_api_get_user_results', 'permission_callback' => 'mco_api_permission_check_user']);
        register_rest_route($namespace, '/questions-from-sheet', ['methods' => 'POST', 'callback' => 'mco_api_get_questions_from_sheet', 'permission_callback' => 'mco_api_permission_check_user']);
        register_rest_route($namespace, '/submit-result', ['methods' => 'POST', 'callback' => 'mco_api_submit_result', 'permission_callback' => 'mco_api_permission_check_user']);
        register_rest_route($namespace, '/certificate-data/(?P<testId>[a-zA-Z0-9_-]+)', ['methods' => 'GET', 'callback' => 'mco_api_get_certificate_data', 'permission_callback' => 'mco_api_permission_check_user']);
        register_rest_route($namespace, '/update-name', ['methods' => 'POST', 'callback' => 'mco_api_update_user_name', 'permission_callback' => 'mco_api_permission_check_user']);
        register_rest_route($namespace, '/submit-feedback', ['methods' => 'POST', 'callback' => 'mco_api_submit_feedback', 'permission_callback' => 'mco_api_permission_check_user']);
        register_rest_route($namespace, '/submit-review', ['methods' => 'POST', 'callback' => 'mco_api_submit_review', 'permission_callback' => 'mco_api_permission_check_user']);
        register_rest_route($namespace, '/notify-admin', ['methods' => 'POST', 'callback' => 'mco_api_notify_admin_endpoint', 'permission_callback' => 'mco_api_permission_check_user']);
        register_rest_route($namespace, '/create-checkout-session', ['methods' => 'POST', 'callback' => 'mco_api_create_checkout_session', 'permission_callback' => 'mco_api_permission_check_user']);

        // Admin-authenticated endpoints
        register_rest_route($namespace, '/debug-details', ['methods' => 'GET', 'callback' => 'mco_api_get_debug_details', 'permission_callback' => 'mco_api_permission_check_admin']);
        register_rest_route($namespace, '/exam-stats', ['methods' => 'GET', 'callback' => 'mco_api_get_exam_stats', 'permission_callback' => 'mco_api_permission_check_admin']);
        register_rest_route($namespace, '/admin/test-sheet-url', ['methods' => 'POST', 'callback' => 'mco_api_admin_test_sheet_url', 'permission_callback' => 'mco_api_permission_check_admin']);
        register_rest_route($namespace, '/admin/clear-config-cache', ['methods' => 'POST', 'callback' => 'mco_api_admin_clear_config_cache', 'permission_callback' => 'mco_api_permission_check_admin']);
        register_rest_route($namespace, '/admin/clear-question-caches', ['methods' => 'POST', 'callback' => 'mco_api_admin_clear_question_caches', 'permission_callback' => 'mco_api_permission_check_admin']);
        register_rest_route($namespace, '/admin/clear-all-results', ['methods' => 'POST', 'callback' => 'mco_api_admin_clear_all_results', 'permission_callback' => 'mco_api_permission_check_admin']);
        register_rest_route($namespace, '/admin/update-exam-program', ['methods' => 'POST', 'callback' => 'mco_api_admin_update_exam_program', 'permission_callback' => 'mco_api_permission_check_admin']);
        register_rest_route($namespace, '/admin/create-exam-program', ['methods' => 'POST', 'callback' => 'mco_api_admin_create_exam_program', 'permission_callback' => 'mco_api_permission_check_admin']);
        register_rest_route($namespace, '/admin/upsert-product', ['methods' => 'POST', 'callback' => 'mco_api_admin_upsert_product', 'permission_callback' => 'mco_api_permission_check_admin']);
        register_rest_route($namespace, '/admin/delete-post', ['methods' => 'POST', 'callback' => 'mco_api_admin_delete_post', 'permission_callback' => 'mco_api_permission_check_admin']);
        register_rest_route($namespace, '/admin/post-creation-data', ['methods' => 'GET', 'callback' => 'mco_api_get_post_creation_data', 'permission_callback' => 'mco_api_permission_check_admin']);
        register_rest_route($namespace, '/admin/create-post-from-app', ['methods' => 'POST', 'callback' => 'mco_api_create_post_from_app', 'permission_callback' => 'mco_api_permission_check_admin']);
    }
}
// ... all permission checks and API callback functions remain here
?>