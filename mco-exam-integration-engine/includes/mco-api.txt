<?php
if (!defined('ABSPATH')) exit;

// Note: Hook registration is now handled by mco_register_api_hooks() to prevent timing issues.
if (!function_exists('mco_register_api_hooks')) {
    function mco_register_api_hooks() {
        add_action('rest_api_init', 'mco_register_rest_routes');
        // Robust CORS handling
        add_action('rest_api_init', function() {
            remove_filter('rest_pre_serve_request', 'rest_send_cors_headers');
            add_filter('rest_pre_serve_request', function($value) {
                $request_origin = get_http_origin();
                if ($request_origin) {
                    $allowed_origins = mco_get_allowed_origins();
                    if (in_array($request_origin, $allowed_origins, true)) {
                        header('Access-Control-Allow-Origin: ' . esc_url($request_origin));
                    }
                }
                header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
                header('Access-Control-Allow-Credentials: true');
                header('Access-Control-Allow-Headers: Authorization, Content-Type, X-WP-Nonce');
                header('Vary: Origin', false);
                if ('OPTIONS' === $_SERVER['REQUEST_METHOD']) {
                    status_header(200);
                    exit();
                }
                return $value;
            }, 15);
        }, 15);
    }
}


function mco_get_allowed_origins() {
    $app_urls_string = get_option('mco_exam_app_url');
    if (empty($app_urls_string)) return [];

    $urls = preg_split('/\r\n|\r|\n/', $app_urls_string);
    $allowed_origins = [];

    foreach ($urls as $url) {
        $trimmed_url = trim($url);
        if (empty($trimmed_url)) continue;

        $parsed_url = parse_url($trimmed_url);
        if (!isset($parsed_url['host'])) continue;
        
        $scheme = $parsed_url['scheme'] ?? 'https';
        $host = $parsed_url['host'];
        $port = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : '';
        
        $origin = "{$scheme}://{$host}{$port}";
        if (!in_array($origin, $allowed_origins, true)) {
            $allowed_origins[] = $origin;
        }
    }
    return $allowed_origins;
}

function mco_register_rest_routes() {
    $namespace = 'mco-app/v1';
    register_rest_route($namespace, '/config', ['methods' => 'GET', 'callback' => 'mco_api_get_full_config', 'permission_callback' => '__return_true']);
    register_rest_route($namespace, '/user-results', ['methods' => 'GET', 'callback' => 'mco_api_get_user_results', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/certificate-data/(?P<testId>[a-zA-Z0-9-]+)', ['methods' => 'GET', 'callback' => 'mco_api_get_certificate_data', 'permission_callback' => 'mco_api_permission_check', 'args' => ['testId' => ['required' => true]]]);
    register_rest_route($namespace, '/update-name', ['methods' => 'POST', 'callback' => 'mco_api_update_name', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/questions-from-sheet', ['methods' => 'POST', 'callback' => 'mco_api_get_questions_from_sheet', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/submit-result', ['methods' => 'POST', 'callback' => 'mco_api_submit_result', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/exam-stats', ['methods' => 'GET', 'callback' => 'mco_api_get_exam_stats', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/debug-details', ['methods' => 'GET', 'callback' => 'mco_api_get_debug_details', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/download-config', ['methods' => 'GET', 'callback' => 'mco_api_download_config', 'permission_callback' => 'mco_api_admin_permission_check']);
}

function mco_api_permission_check(WP_REST_Request $request, $admin_only = false) {
    $auth_header = $request->get_header('authorization');
    if (empty($auth_header) || !preg_match('/Bearer\s(\S+)/', $auth_header, $matches)) return new WP_Error('jwt_auth_missing_token', 'Authorization header missing.', ['status' => 401]);
    $payload = mco_verify_exam_jwt($matches[1]);
    if (!$payload || !isset($payload['user']['id'])) return new WP_Error('jwt_auth_invalid_token', 'Invalid or expired token.', ['status' => 403]);
    if ($admin_only && empty($payload['user']['isAdmin'])) return new WP_Error('jwt_auth_admin_required', 'Administrator access required.', ['status' => 403]);
    $request->set_param('jwt_payload', $payload);
    return true;
}

function mco_api_admin_permission_check(WP_REST_Request $request) { return is_user_logged_in() && current_user_can('manage_options'); }

function mco_api_jwt_admin_permission_check(WP_REST_Request $request) {
    // First, validate the JWT token itself.
    $is_valid_token = mco_api_permission_check($request);
    if (is_wp_error($is_valid_token)) {
        return $is_valid_token;
    }
    // Now, check for admin privileges within the validated token payload.
    $payload = $request->get_param('jwt_payload');
    if (empty($payload['user']['isAdmin'])) {
        return new WP_Error('jwt_auth_admin_required', 'Administrator access required.', ['status' => 403]);
    }
    return true;
}

function mco_api_get_full_config(WP_REST_Request $request) {
    $dynamic_data = mco_get_app_config_data();
    $site_name = get_bloginfo('name');
    $site_url_parts = parse_url(home_url());
    $site_host = $site_url_parts['host'] ?? 'default-site.com';
    $templates = get_option('mco_certificate_templates', []);
    $custom_logo_url = get_option('mco_logo_url', '');
    $logo_url = !empty($custom_logo_url) ? $custom_logo_url : (get_site_icon_url(512) ?: '');


    $config_object = [
        "version" => get_option('mco_config_version', current_time('YmdHis')),
        "organizations" => [
            [
                "id" => "org-" . sanitize_title($site_name),
                "name" => $site_name,
                "website" => str_replace('www.', '', $site_host),
                "logo" => $logo_url,
                "exams" => $dynamic_data['exams'],
                "examProductCategories" => $dynamic_data['examProductCategories'],
                "certificateTemplates" => array_values($templates),
                "suggestedBooks" => $dynamic_data['suggestedBooks']
            ]
        ],
        "examPrices" => $dynamic_data['examPrices'] ?? null
    ];
    return new WP_REST_Response($config_object, 200);
}

function mco_api_get_user_results(WP_REST_Request $request) {
    $user_id = $request->get_param('jwt_payload')['user']['id'];
    return new WP_REST_Response(array_values(get_user_meta($user_id, 'mco_exam_results', true) ?: []), 200);
}

function mco_api_get_certificate_data(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $results = get_user_meta($payload['user']['id'], 'mco_exam_results', true) ?: [];
    if (!isset($results[$request['testId']])) return new WP_Error('not_found', 'Result not found.', ['status' => 404]);
    $result = $results[$request['testId']];
    
    // Find the exam name from the full config data
    $exam_name = 'Examination'; // Default value
    $all_exams_data = mco_get_app_config_data();
    if (isset($all_exams_data['exams'])) {
        foreach ($all_exams_data['exams'] as $exam) {
            if ($exam['id'] === $result['examId']) {
                $exam_name = $exam['name'];
                break;
            }
        }
    }

    return new WP_REST_Response([
        'certificateNumber' => $result['testId'], 
        'candidateName' => $payload['user']['name'], 
        'finalScore' => $result['score'], 
        'date' => date('F j, Y', $result['timestamp'] / 1000), 
        'examId' => $result['examId'],
        'examName' => $exam_name
    ], 200);
}

function mco_api_update_name(WP_REST_Request $request) {
    $new_name = sanitize_text_field($request->get_param('fullName'));
    if (empty($new_name) || count(explode(' ', $new_name)) < 2) return new WP_Error('bad_request', 'Please provide a full name.', ['status' => 400]);
    wp_update_user(['ID' => $request->get_param('jwt_payload')['user']['id'], 'display_name' => $new_name]);
    return new WP_REST_Response(['message' => 'Name updated successfully.'], 200);
}

function mco_api_submit_result(WP_REST_Request $request) {
    $result_data = $request->get_json_params();
    if (empty($result_data['testId'])) return new WP_Error('bad_request', 'Invalid result data.', ['status' => 400]);
    $results = get_user_meta($request->get_param('jwt_payload')['user']['id'], 'mco_exam_results', true) ?: [];
    $results[$result_data['testId']] = $result_data;
    update_user_meta($request->get_param('jwt_payload')['user']['id'], 'mco_exam_results', $results);
    return new WP_REST_Response(['message' => 'Result saved.'], 200);
}

function mco_api_get_questions_from_sheet(WP_REST_Request $request) {
    $sheet_url = esc_url_raw($request->get_param('sheetUrl'));
    if (empty($sheet_url) || !preg_match('/spreadsheets\/d\/([a-zA-Z0-9-_]+)/', $sheet_url, $matches)) return new WP_Error('bad_request', 'Invalid Google Sheet URL.', ['status' => 400]);
    $transient_key = 'mco_sheet_' . md5($matches[1]);
    if (false === ($questions = get_transient($transient_key))) {
        $response = wp_remote_get("https://docs.google.com/spreadsheets/d/{$matches[1]}/export?format=csv", ['timeout' => 20]);
        if (is_wp_error($response) || wp_remote_retrieve_response_code($response) != 200) return new WP_Error('fetch_error', 'Could not fetch questions. Ensure sheet is public.', ['status' => 500]);
        $rows = preg_split('/\r\n|\r|\n/', wp_remote_retrieve_body($response));
        array_shift($rows);
        $questions = [];
        foreach ($rows as $i => $row) {
            if (empty(trim($row))) continue;
            $data = str_getcsv($row);
            if (count($data) >= 3 && !empty(trim($data[0])) && !empty(trim($data[1])) && !empty(trim($data[2]))) {
                $options_raw = explode('|', $data[1]);
                $options = [];
                foreach ($options_raw as $opt) {
                    $options[] = preg_replace('/^[\pZ\pC]+|[\pZ\pC]+$/u', '', $opt);
                }
                
                $correct_answer_text = preg_replace('/^[\pZ\pC]+|[\pZ\pC]+$/u', '', $data[2]);
                
                $correct_answer_index = false;
                $trimmed_correct_answer = function_exists('mb_strtolower') ? mb_strtolower(trim($correct_answer_text), 'UTF-8') : strtolower(trim($correct_answer_text));

                foreach ($options as $index => $option_text) {
                    $trimmed_option_text = function_exists('mb_strtolower') ? mb_strtolower(trim($option_text), 'UTF-8') : strtolower(trim($option_text));
                    if ($trimmed_option_text === $trimmed_correct_answer) {
                        $correct_answer_index = $index;
                        break;
                    }
                }

                if ($correct_answer_index !== false) {
                    $questions[] = [
                        'id' => $i + 1, 
                        'question' => preg_replace('/^[\pZ\pC]+|[\pZ\pC]+$/u', '', $data[0]), 
                        'options' => $options, 
                        'correctAnswer' => $correct_answer_index + 1
                    ];
                }
            }
        }
        set_transient($transient_key, $questions, 15 * MINUTE_IN_SECONDS);
    }
    if (empty($questions)) return new WP_Error('no_questions', 'No valid questions found.', ['status' => 500]);
    shuffle($questions);
    return new WP_REST_Response(array_slice($questions, 0, intval($request->get_param('count'))), 200);
}

function mco_api_get_exam_stats(WP_REST_Request $request) {
    $all_results = [];
    foreach (get_users(['fields' => ['ID']]) as $user) { if ($res = get_user_meta($user->ID, 'mco_exam_results', true)) $all_results = array_merge($all_results, array_values($res)); }
    $cert_exams = array_filter(mco_get_app_config_data()['exams'], function($e) { return !$e['isPractice']; });
    $stats = [];
    foreach ($cert_exams as $exam) {
        $attempts = array_filter($all_results, function($r) use ($exam) { return $r['examId'] === $exam['id']; });
        $passed = array_filter($attempts, function($r) use ($exam) { return $r['score'] >= $exam['passScore']; });
        $total_score = array_reduce($attempts, function($s, $r) { return $s + $r['score']; }, 0);
        $product = ($pid = wc_get_product_id_by_sku($exam['id'])) ? wc_get_product($pid) : null;
        $stats[] = ['examId' => $exam['id'], 'examName' => $exam['name'], 'totalSales' => $product ? $product->get_total_sales() : 0, 'totalAttempts' => count($attempts), 'passed' => count($passed), 'failed' => count($attempts) - count($passed), 'passRate' => count($attempts) > 0 ? (count($passed) / count($attempts)) * 100 : 0, 'averageScore' => count($attempts) > 0 ? $total_score / count($attempts) : 0];
    }
    return new WP_REST_Response($stats, 200);
}

function mco_api_get_debug_details(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $sheet_test = ['success' => false, 'message' => 'No exams with Sheet URL found to test.'];
    $config = mco_get_app_config_data();
    $test_url = '';
    foreach($config['exams'] as $exam) { if(!empty($exam['questionSourceUrl'])) { $test_url = $exam['questionSourceUrl']; break; } }
    if ($test_url && preg_match('/spreadsheets\/d\/([a-zA-Z0-9-_]+)/', $test_url, $matches)) {
        $response = wp_remote_get("https://docs.google.com/spreadsheets/d/{$matches[1]}/export?format=csv", ['timeout' => 15]);
        if (is_wp_error($response)) $sheet_test = ['success' => false, 'message' => 'WP_Error: ' . $response->get_error_message()];
        elseif (wp_remote_retrieve_response_code($response) != 200) $sheet_test = ['success' => false, 'message' => 'HTTP Status ' . wp_remote_retrieve_response_code($response) . '. Check sheet sharing settings.'];
        else $sheet_test = ['success' => true, 'message' => 'Successfully fetched ' . strlen(wp_remote_retrieve_body($response)) . ' bytes.'];
    }
    return new WP_REST_Response(['user' => $payload['user'], 'purchases' => $payload['paidExamIds'], 'results' => array_values(get_user_meta($payload['user']['id'], 'mco_exam_results', true) ?: []), 'sheetTest' => $sheet_test], 200);
}

function mco_api_download_config() {
    $config_object = mco_api_get_full_config(new WP_REST_Request())->get_data();
    $site_url_parts = parse_url(home_url());
    $site_host = $site_url_parts['host'] ?? 'default-site.com';
    $filename = $site_host . '-config.json';
    header('Content-Type: application/json; charset=utf-8');
    header('Content-Disposition: attachment; filename="' . $filename . '"');
    echo wp_json_encode($config_object, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
    exit;
}
?>