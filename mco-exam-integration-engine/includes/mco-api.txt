<?php
if (!defined('ABSPATH')) exit;

/*
 * =================================================================================================
 * TROUBLESHOOTING: API CONNECTION FAILED or AUTHORIZATION HEADER MISSING
 * =================================================================================================
 * If the exam application cannot connect to the API (CORS errors, fetch errors, or "Authorization
 * header missing" messages), it's almost always a server configuration issue. Many shared hosting
 * environments (like Apache/LiteSpeed) strip the necessary 'Authorization' header from requests by default.
 * 
 * THE FIX:
 * Add the following code to the VERY TOP of your WordPress root .htaccess file, before the
 * # BEGIN WordPress block.
 *
 * <IfModule mod_rewrite.c>
 *   RewriteEngine On
 *   RewriteCond %{HTTP:Authorization} .
 *   RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]
 * </IfModule>
 * 
 * After adding this, you MUST clear all server and plugin caches (e.g., LiteSpeed Cache).
 * Caching plugins can interfere with API routes and CORS headers.
 * =================================================================================================
 */

if (!function_exists('mco_register_api_hooks')) {
    function mco_register_api_hooks() {
        add_action('rest_api_init', 'mco_register_rest_routes');
        add_action('rest_api_init', 'mco_set_api_nocache_constants');
        add_filter('rest_pre_serve_request', 'mco_add_cors_and_nocache_headers', 10, 4);
    }
}

// Ensure caching plugins do not cache our API endpoints.
function mco_set_api_nocache_constants(WP_REST_Server $server) {
    if (strpos($_SERVER['REQUEST_URI'], '/wp-json/mco-app/v1/') !== false) {
        if (!defined('DONOTCACHE')) define('DONOTCACHEPAGE', true);
        if (!defined('DONOTCACHEDB')) define('DONOTCACHEDB', true);
        if (!defined('DONOTCACHEOBJECT')) define('DONOTCACHEOBJECT', true);
    }
}

// Forcefully add CORS and no-cache headers to every response from our namespace.
function mco_add_cors_and_nocache_headers($served, $result, $request, $server) {
    if (strpos($request->get_route(), '/mco-app/v1/') !== false) {
        $request_origin = get_http_origin();
        $allowed_origins = mco_get_allowed_origins();

        if ($request_origin && in_array($request_origin, $allowed_origins, true)) {
            $server->send_header('Access-Control-Allow-Origin', $request_origin);
            $server->send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, DELETE');
            $server->send_header('Access-Control-Allow-Credentials', 'true');
            $server->send_header('Vary', 'Origin');
        }
        
        // Send no-cache headers for all our API endpoints to prevent stale data issues.
        $server->send_header('Cache-Control', 'no-store, no-cache, must-revalidate, max-age=0');
        $server->send_header('Pragma', 'no-cache');
        $server->send_header('Expires', 'Mon, 26 Jul 1997 05:00:00 GMT');

        if ($request->get_method() === 'OPTIONS') {
            status_header(200);
            exit();
        }
    }
    return $served;
}

function mco_get_allowed_origins() {
    $app_urls_string = get_option('mco_exam_app_url', '');
    if (empty($app_urls_string)) return [];

    $urls = preg_split('/\r\n|\r|\n/', $app_urls_string);
    $allowed_origins = [];

    foreach ($urls as $url) {
        $trimmed_url = trim($url);
        if (empty($trimmed_url)) continue;

        if (!preg_match('#^https?://#', $trimmed_url)) {
            $trimmed_url = 'https://' . $trimmed_url;
        }
        
        $parsed_url = parse_url($trimmed_url);
        if (empty($parsed_url['scheme']) || empty($parsed_url['host'])) continue;
        
        $origin = $parsed_url['scheme'] . '://' . $parsed_url['host'];
        if (!empty($parsed_url['port'])) {
            $origin .= ':' . $parsed_url['port'];
        }
        
        if (!in_array($origin, $allowed_origins, true)) {
            $allowed_origins[] = $origin;
        }
    }
    return $allowed_origins;
}

function mco_register_rest_routes() {
    $namespace = 'mco-app/v1';
    register_rest_route($namespace, '/config', ['methods' => 'GET', 'callback' => 'mco_api_get_full_config', 'permission_callback' => '__return_true']);
    register_rest_route($namespace, '/user-results', ['methods' => 'GET', 'callback' => 'mco_api_get_user_results', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/certificate-data/(?P<testId>[a-zA-Z0-9-]+)', ['methods' => 'GET', 'callback' => 'mco_api_get_certificate_data', 'permission_callback' => 'mco_api_permission_check', 'args' => ['testId' => ['required' => true]]]);
    register_rest_route($namespace, '/update-name', ['methods' => 'POST', 'callback' => 'mco_api_update_name', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/questions-from-sheet', ['methods' => 'POST', 'callback' => 'mco_api_get_questions_from_sheet', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/submit-result', ['methods' => 'POST', 'callback' => 'mco_api_submit_result', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/exam-stats', ['methods' => 'GET', 'callback' => 'mco_api_get_exam_stats', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/debug-details', ['methods' => 'GET', 'callback' => 'mco_api_get_debug_details', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/download-config', ['methods' => 'GET', 'callback' => 'mco_api_download_config', 'permission_callback' => 'mco_api_admin_permission_check']);
    
    // NEW API ENDPOINTS
    register_rest_route($namespace, '/submit-feedback', ['methods' => 'POST', 'callback' => 'mco_api_submit_feedback', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/submit-review', ['methods' => 'POST', 'callback' => 'mco_api_submit_review', 'permission_callback' => 'mco_api_permission_check']);
    register_rest_route($namespace, '/spin-wheel', ['methods' => 'POST', 'callback' => 'mco_api_spin_wheel', 'permission_callback' => 'mco_api_permission_check']);

    // ADMIN-ONLY ENDPOINTS
    register_rest_route($namespace, '/admin/add-spins', ['methods' => 'POST', 'callback' => 'mco_api_admin_add_spins', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/grant-prize', ['methods' => 'POST', 'callback' => 'mco_api_admin_grant_prize', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/search-users', ['methods' => 'POST', 'callback' => 'mco_api_admin_search_users', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/reset-spins', ['methods' => 'POST', 'callback' => 'mco_api_admin_reset_spins', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);
    register_rest_route($namespace, '/admin/remove-prize', ['methods' => 'POST', 'callback' => 'mco_api_admin_remove_prize', 'permission_callback' => 'mco_api_jwt_admin_permission_check']);

}

function mco_api_permission_check(WP_REST_Request $request) {
    $auth_header = $request->get_header('authorization');
    if (empty($auth_header) || !preg_match('/Bearer\s(\S+)/', $auth_header, $matches)) return new WP_Error('jwt_auth_missing_token', 'Authorization header missing. Check server configuration (e.g., .htaccess).', ['status' => 401]);
    $payload = mco_verify_exam_jwt($matches[1]);
    if (!$payload || !isset($payload['user']['id'])) return new WP_Error('jwt_auth_invalid_token', 'Invalid or expired token.', ['status' => 403]);
    
    $request->set_param('jwt_payload', $payload);
    return true;
}

function mco_api_admin_permission_check(WP_REST_Request $request) { return is_user_logged_in() && current_user_can('manage_options'); }

function mco_api_jwt_admin_permission_check(WP_REST_Request $request) {
    // First, validate the JWT token itself.
    $is_valid_token = mco_api_permission_check($request);
    if (is_wp_error($is_valid_token)) {
        return $is_valid_token;
    }
    // Now, check for admin privileges within the validated token payload.
    $payload = $request->get_param('jwt_payload');
    if (empty($payload['user']['isAdmin'])) {
        return new WP_Error('jwt_auth_admin_required', 'Administrator access required.', ['status' => 403]);
    }
    return true;
}

function mco_api_get_full_config(WP_REST_Request $request) {
    $dynamic_data = mco_get_app_config_data();
    $site_name = get_bloginfo('name');
    $site_url_parts = parse_url(home_url());
    $site_host = $site_url_parts['host'] ?? 'default-site.com';
    $templates = get_option('mco_certificate_templates', []);
    $custom_logo_url = get_option('mco_logo_url', '');
    $logo_url = !empty($custom_logo_url) ? $custom_logo_url : (get_site_icon_url(512) ?: '');


    $config_object = [
        "version" => get_option('mco_config_version', current_time('YmdHis')),
        "organizations" => [
            [
                "id" => "org-" . sanitize_title($site_name),
                "name" => $site_name,
                "website" => str_replace('www.', '', $site_host),
                "logo" => $logo_url,
                "exams" => $dynamic_data['exams'],
                "examProductCategories" => $dynamic_data['examProductCategories'],
                "certificateTemplates" => array_values($templates),
                "suggestedBooks" => $dynamic_data['suggestedBooks']
            ]
        ],
        "examPrices" => $dynamic_data['examPrices'] ?? null
    ];
    return new WP_REST_Response($config_object, 200);
}

function mco_api_get_user_results(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user_id = $payload['user']['id'];
    $results = get_user_meta($user_id, 'mco_exam_results', true);

    if (!is_array($results)) {
        $results = [];
    }
    
    return new WP_REST_Response(array_values($results), 200);
}

function mco_api_get_certificate_data(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $results = get_user_meta($payload['user']['id'], 'mco_exam_results', true) ?: [];
    if (!isset($results[$request['testId']])) return new WP_Error('not_found', 'Result not found.', ['status' => 404]);
    $result = $results[$request['testId']];
    
    // Find the exam name from the full config data
    $exam_name = 'Examination'; // Default value
    $all_exams_data = mco_get_app_config_data();
    if (isset($all_exams_data['exams'])) {
        foreach ($all_exams_data['exams'] as $exam) {
            if ($exam['id'] === $result['examId']) {
                $exam_name = $exam['name'];
                break;
            }
        }
    }

    return new WP_REST_Response([
        'certificateNumber' => $result['testId'], 
        'candidateName' => $payload['user']['name'], 
        'finalScore' => $result['score'], 
        'date' => date('F j, Y', $result['timestamp'] / 1000), 
        'examId' => $result['examId'],
        'examName' => $exam_name
    ], 200);
}

function mco_api_update_name(WP_REST_Request $request) {
    $new_name = sanitize_text_field($request->get_param('fullName'));
    if (empty($new_name) || count(explode(' ', $new_name)) < 2) return new WP_Error('bad_request', 'Please provide a full name.', ['status' => 400]);
    wp_update_user(['ID' => $request->get_param('jwt_payload')['user']['id'], 'display_name' => $new_name]);
    return new WP_REST_Response(['message' => 'Name updated successfully.'], 200);
}

function mco_api_submit_result(WP_REST_Request $request) {
    $result_data = $request->get_json_params();
    if (empty($result_data['testId'])) return new WP_Error('bad_request', 'Invalid result data.', ['status' => 400]);
    $results = get_user_meta($request->get_param('jwt_payload')['user']['id'], 'mco_exam_results', true) ?: [];
    $results[$result_data['testId']] = $result_data;
    update_user_meta($request->get_param('jwt_payload')['user']['id'], 'mco_exam_results', $results);
    return new WP_REST_Response(['message' => 'Result saved.'], 200);
}

function mco_api_get_questions_from_sheet(WP_REST_Request $request) {
    $sheet_url = esc_url_raw($request->get_param('sheetUrl'));
    $csv_url = '';
    $error_message = 'Could not fetch questions from Google Sheets. Please ensure the sheet is public ("Anyone with the link can view"). If the issue persists, try the more reliable "Publish to the web" option (as a CSV) inside Google Sheets and use that link instead.';

    // Check for "Publish to the web" format first - it's more reliable for programmatic access.
    if (strpos($sheet_url, '/pub?gid=') !== false && strpos($sheet_url, 'output=csv') !== false) {
        $csv_url = $sheet_url;
    } 
    // Fallback to constructing the export URL from a standard sharing link.
    elseif (preg_match('/spreadsheets\/d\/([a-zA-Z0-9-_]+)/', $sheet_url, $matches)) {
        $sheet_id = $matches[1];
        $csv_url = "https://docs.google.com/spreadsheets/d/{$sheet_id}/export?format=csv&gid=0";
    }

    if (empty($csv_url)) {
        return new WP_Error('bad_request', 'Invalid Google Sheet URL format. Please use the standard sharing link or a "Publish to the web" CSV link.', ['status' => 400]);
    }

    $transient_key = 'mco_sheet_' . md5($sheet_url); // Key based on the original URL to bust cache if URL changes.
    $questions = get_transient($transient_key);

    if (false === $questions) {
        $args = [
            'timeout' => 20,
            'user-agent' => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36',
            'sslverify' => false
        ];
        $response = wp_remote_get($csv_url, $args);

        if (is_wp_error($response)) {
            return new WP_Error('fetch_error', 'Could not connect to Google Sheets: ' . $response->get_error_message(), ['status' => 500]);
        }
        
        $response_code = wp_remote_retrieve_response_code($response);
        if ($response_code != 200) {
            $response_body = wp_remote_retrieve_body($response);
            $error_details = !empty($response_body) ? ' Server response: ' . substr(strip_tags($response_body), 0, 200) : '';
            return new WP_Error('fetch_error', $error_message . ' (HTTP Status: ' . $response_code . ').' . $error_details, ['status' => 500]);
        }

        $body = wp_remote_retrieve_body($response);
        if (function_exists('mb_convert_encoding')) {
            $body = mb_convert_encoding($body, 'UTF-8', mb_detect_encoding($body, 'UTF-8, ISO-8859-1', true));
        }

        $rows = preg_split('/\r\n|\r|\n/', $body);
        array_shift($rows); // remove header
        $questions = [];
        $parsing_errors = [];

        foreach ($rows as $i => $row) {
            $row_num = $i + 2;
            if (empty(trim($row))) continue;
            
            $data = str_getcsv($row);
            
            if (count($data) < 3 || empty(trim($data[0])) || empty(trim($data[1])) || empty(trim($data[2]))) {
                $parsing_errors[] = "Row {$row_num}: Invalid format or missing data in one of the three required columns.";
                continue;
            }

            $options_raw = explode('|', $data[1]);
            $options = array_map(function($opt) {
                return preg_replace('/^[\pZ\pC]+|[\pZ\pC]+$/u', '', $opt);
            }, $options_raw);
            
            $correct_answer_input = preg_replace('/^[\pZ\pC]+|[\pZ\pC]+$/u', '', trim($data[2]));
            $correct_answer_index = false;
            
            $lc_clean_correct_answer = function_exists('mb_strtolower') ? mb_strtolower($correct_answer_input, 'UTF-8') : strtolower($correct_answer_input);
            foreach ($options as $index => $option_text) {
                $lc_clean_option = function_exists('mb_strtolower') ? mb_strtolower(trim($option_text), 'UTF-8') : strtolower(trim($option_text));
                if ($lc_clean_option === $lc_clean_correct_answer) {
                    $correct_answer_index = $index;
                    break;
                }
            }

            if ($correct_answer_index === false && is_numeric($correct_answer_input)) {
                $potential_index = intval($correct_answer_input) - 1;
                if ($potential_index >= 0 && isset($options[$potential_index])) {
                    $correct_answer_index = $potential_index;
                }
            }
            
            if ($correct_answer_index !== false) {
                $questions[] = [
                    'id' => $row_num, 
                    'question' => preg_replace('/^[\pZ\pC]+|[\pZ\pC]+$/u', '', $data[0]), 
                    'options' => $options, 
                    'correctAnswer' => $correct_answer_index + 1
                ];
            } else {
                 $parsing_errors[] = "Row {$row_num}: Could not determine correct answer. Input '{$correct_answer_input}' is neither a valid option number nor matching text in the options list.";
            }
        }

        if (!empty($questions)) {
            set_transient($transient_key, $questions, 15 * MINUTE_IN_SECONDS);
        }
    }

    if (empty($questions)) {
        delete_transient($transient_key); // Clear potentially bad cache
        $error_message = 'No valid questions could be parsed from the source.';
        if (!empty($parsing_errors) && $request->get_param('jwt_payload')['user']['isAdmin']) {
            $error_message .= ' Admin Debug: ' . implode(' ', array_slice($parsing_errors, 0, 3));
        }
        return new WP_Error('no_questions', $error_message, ['status' => 500, 'data' => ['debug_errors' => $parsing_errors]]);
    }

    shuffle($questions);
    $count = intval($request->get_param('count'));
    if ($count > 0) {
        return new WP_REST_Response(array_slice($questions, 0, $count), 200);
    }
    
    return new WP_REST_Response($questions, 200);
}

function mco_api_get_exam_stats(WP_REST_Request $request) {
    $all_results = [];
    foreach (get_users(['fields' => ['ID']]) as $user) { if ($res = get_user_meta($user->ID, 'mco_exam_results', true)) $all_results = array_merge($all_results, array_values($res)); }
    $cert_exams = array_filter(mco_get_app_config_data()['exams'], function($e) { return !$e['isPractice']; });
    $stats = [];
    foreach ($cert_exams as $exam) {
        $attempts = array_filter($all_results, function($r) use ($exam) { return $r['examId'] === $exam['id']; });
        $passed = array_filter($attempts, function($r) use ($exam) { return $r['score'] >= $exam['passScore']; });
        $total_score = array_reduce($attempts, function($s, $r) { return $s + $r['score']; }, 0);
        $product = ($pid = wc_get_product_id_by_sku($exam['id'])) ? wc_get_product($pid) : null;
        $stats[] = ['examId' => $exam['id'], 'examName' => $exam['name'], 'totalSales' => $product ? $product->get_total_sales() : 0, 'totalAttempts' => count($attempts), 'passed' => count($passed), 'failed' => count($attempts) - count($passed), 'passRate' => count($attempts) > 0 ? (count($passed) / count($attempts)) * 100 : 0, 'averageScore' => count($attempts) > 0 ? $total_score / count($attempts) : 0];
    }
    return new WP_REST_Response($stats, 200);
}

function mco_api_get_debug_details(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    
    $user_results = get_user_meta($payload['user']['id'], 'mco_exam_results', true);
    if (!is_array($user_results)) {
        $user_results = [];
    }

    $sheet_test = ['success' => false, 'message' => 'No exams with Sheet URL found to test.'];
    $config = mco_get_app_config_data();
    $test_url = '';
    
    if (!empty($config['exams']) && is_array($config['exams'])) {
        foreach($config['exams'] as $exam) {
            if(!empty($exam['questionSourceUrl'])) {
                $test_url = $exam['questionSourceUrl'];
                break;
            }
        }
    }
    
    if ($test_url && preg_match('/spreadsheets\/d\/([a-zA-Z0-9-_]+)/', $test_url, $matches)) {
        $response = wp_remote_get("https://docs.google.com/spreadsheets/d/{$matches[1]}/export?format=csv", ['timeout' => 15]);
        if (is_wp_error($response)) {
            $sheet_test = ['success' => false, 'message' => 'WP_Error: ' . $response->get_error_message()];
        } elseif (wp_remote_retrieve_response_code($response) != 200) {
            $sheet_test = ['success' => false, 'message' => 'HTTP Status ' . wp_remote_retrieve_response_code($response) . '. Check sheet sharing settings.'];
        } else {
            $sheet_test = ['success' => true, 'message' => 'Successfully fetched ' . strlen(wp_remote_retrieve_body($response)) . ' bytes.'];
        }
    }
    
    $purchases = isset($payload['paidExamIds']) && is_array($payload['paidExamIds']) ? $payload['paidExamIds'] : [];

    return new WP_REST_Response([
        'user' => $payload['user'], 
        'purchases' => $purchases, 
        'results' => array_values($user_results), 
        'sheetTest' => $sheet_test
    ], 200);
}

function mco_api_download_config() {
    $config_object = mco_api_get_full_config(new WP_REST_Request())->get_data();
    $site_url_parts = parse_url(home_url());
    $site_host = $site_url_parts['host'] ?? 'default-site.com';
    $filename = $site_host . '-config.json';
    header('Content-Type: application/json; charset=utf-8');
    header('Content-Disposition: attachment; filename="' . $filename . '"');
    echo wp_json_encode($config_object, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
    exit;
}

// NEW ENDPOINTS
function mco_api_submit_feedback(WP_REST_Request $request) {
    // This is a placeholder. In a real app, you would save this to the DB, email it, etc.
    $payload = $request->get_param('jwt_payload');
    $user_email = $payload['user']['email'];
    $category = sanitize_text_field($request->get_param('category'));
    $message = sanitize_textarea_field($request->get_param('message'));

    // For now, we'll just log it to the PHP error log for demonstration.
    error_log("Feedback from {$user_email} (Category: {$category}): {$message}");
    
    return new WP_REST_Response(['success' => true, 'message' => 'Feedback received.'], 200);
}

function mco_api_submit_review(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user_id = (int)$payload['user']['id'];
    $user_name = $payload['user']['name'];
    $user_email = $payload['user']['email'];

    $exam_id = sanitize_text_field($request->get_param('examId'));
    $rating = (int)$request->get_param('rating');
    $review_text = sanitize_textarea_field($request->get_param('reviewText'));

    if ($rating < 1 || $rating > 5) {
        return new WP_Error('bad_request', 'Invalid rating.', ['status' => 400]);
    }
    
    $all_exams_data = mco_get_app_config_data();
    $product_id = null;
    if (isset($all_exams_data['examPrices'][$exam_id])) {
        $product_id = $all_exams_data['examPrices'][$exam_id]['productId'];
    }

    if (!$product_id) {
         return new WP_Error('not_found', 'Could not find a product linked to this exam ID.', ['status' => 404]);
    }

    $commentdata = [
        'comment_post_ID'      => $product_id,
        'comment_author'       => $user_name,
        'comment_author_email' => $user_email,
        'comment_content'      => $review_text,
        'user_id'              => $user_id,
        'comment_type'         => 'review',
        'comment_approved'     => 1, // Auto-approve
    ];

    $comment_id = wp_insert_comment($commentdata);
    if ($comment_id) {
        update_comment_meta($comment_id, 'rating', $rating);
        return new WP_REST_Response(['success' => true, 'message' => 'Review submitted.'], 200);
    } else {
        return new WP_Error('submission_failed', 'Could not save the review.', ['status' => 500]);
    }
}

function mco_api_spin_wheel(WP_REST_Request $request) {
    $payload = $request->get_param('jwt_payload');
    $user_id = (int)$payload['user']['id'];
    
    $spins = (int)get_user_meta($user_id, 'mco_spins_available', true);
    
    if ($spins <= 0 && !user_can($user_id, 'manage_options')) {
        return new WP_Error('no_spins', 'You have no spins left.', ['status' => 403]);
    }

    // Define prizes and their weights
    $prizes = [
        'SUB_YEARLY' => ['label' => 'Annual Subscription', 'weight' => 1],
        'SUB_MONTHLY' => ['label' => 'Monthly Subscription', 'weight' => 5],
        'SUB_WEEKLY' => ['label' => 'Weekly Subscription', 'weight' => 10],
        'EXAM_CPC' => ['label' => 'Free CPC Exam', 'weight' => 15],
        'EXAM_CCA' => ['label' => 'Free CCA Exam', 'weight' => 15],
        'NEXT_TIME' => ['label' => 'Better Luck Next Time', 'weight' => 54],
    ];

    $weighted_list = [];
    foreach ($prizes as $id => $prize) {
        for ($i = 0; $i < $prize['weight']; $i++) {
            $weighted_list[] = $id;
        }
    }
    
    $won_prize_id = $weighted_list[array_rand($weighted_list)];
    $won_prize_label = $prizes[$won_prize_id]['label'];

    // Decrement spins unless admin
    if (!user_can($user_id, 'manage_options')) {
        update_user_meta($user_id, 'mco_spins_available', $spins - 1);
    }
    
    // Grant prize
    if ($won_prize_id !== 'NEXT_TIME') {
        update_user_meta($user_id, 'mco_won_prize', ['prizeId' => $won_prize_id, 'prizeLabel' => $won_prize_label]);
        // Placeholder for actually granting the product/subscription
    }
    
    // Generate a new token with updated user data
    $new_token = mco_generate_exam_jwt($user_id);

    return new WP_REST_Response([
        'prizeId' => $won_prize_id,
        'prizeLabel' => $won_prize_label,
        'newToken' => $new_token
    ], 200);
}

// ADMIN ENDPOINTS
function mco_api_admin_search_users(WP_REST_Request $request) {
    $search_term = sanitize_text_field($request->get_param('searchTerm'));
    if (empty($search_term)) {
        return new WP_Error('bad_request', 'Search term cannot be empty.', ['status' => 400]);
    }
    
    $user_query = new WP_User_Query([
        'search' => '*' . esc_attr($search_term) . '*',
        'search_columns' => ['user_login', 'user_email', 'display_name'],
        'number' => 10
    ]);
    
    $users_found = [];
    foreach ($user_query->get_results() as $user) {
        $users_found[] = ['id' => strval($user->ID), 'name' => $user->display_name, 'email' => $user->user_email];
    }
    
    return new WP_REST_Response($users_found, 200);
}

function mco_api_admin_add_spins(WP_REST_Request $request) {
    $user_id = (int) $request->get_param('userId');
    $spins_to_add = (int) $request->get_param('spins');
    if ($spins_to_add <= 0) return new WP_Error('bad_request', 'Spins must be a positive number.', ['status' => 400]);

    $current_spins = (int) get_user_meta($user_id, 'mco_spins_available', true);
    $new_total = $current_spins + $spins_to_add;
    update_user_meta($user_id, 'mco_spins_available', $new_total);
    
    return new WP_REST_Response(['success' => true, 'newTotal' => $new_total], 200);
}

function mco_api_admin_grant_prize(WP_REST_Request $request) {
    $user_id = (int) $request->get_param('userId');
    $prize_id = sanitize_text_field($request->get_param('prizeId'));

    // In a real app, this would add a product or subscription. Here we just set the meta.
    update_user_meta($user_id, 'mco_won_prize', ['prizeId' => $prize_id, 'prizeLabel' => "Prize Granted by Admin"]);
    
    return new WP_REST_Response(['success' => true, 'message' => 'Prize granted.'], 200);
}

function mco_api_admin_reset_spins(WP_REST_Request $request) {
    $user_id = (int) $request->get_param('userId');
    update_user_meta($user_id, 'mco_spins_available', 0);
    return new WP_REST_Response(['success' => true, 'message' => 'Spins reset to 0.'], 200);
}

function mco_api_admin_remove_prize(WP_REST_Request $request) {
    $user_id = (int) $request->get_param('userId');
    delete_user_meta($user_id, 'mco_won_prize');
    return new WP_REST_Response(['success' => true, 'message' => 'Won prize data removed.'], 200);
}

?>