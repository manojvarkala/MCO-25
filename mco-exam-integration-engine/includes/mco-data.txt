<?php
if (!defined('ABSPATH')) exit;

// This function is the single source of truth for all dynamic data passed to the React app.
// It uses a transient for caching to improve performance on high-traffic sites.
function mco_get_app_config_data() {
    $cached_data = get_transient('mco_app_config_data');
    if ($cached_data !== false) {
        return $cached_data;
    }

    $full_snapshot = mco_get_full_snapshot_data(false);
    
    // The snapshot contains the fully structured data. We just need to extract the parts.
    $active_org = $full_snapshot['organizations'][0] ?? null;

    if (!$active_org) {
         $data = [
            'organizations' => [],
            'examPrices' => new stdClass(),
        ];
        set_transient('mco_app_config_data', $data, HOUR_IN_SECONDS);
        return $data;
    }

    $data = [
        'organizations' => $full_snapshot['organizations'],
        'examPrices' => $full_snapshot['examPrices'],
    ];

    set_transient('mco_app_config_data', $data, HOUR_IN_SECONDS);
    return $data;
}

// A unified function to generate either an empty blueprint or a full content snapshot.
function mco_get_full_snapshot_data($is_blueprint = false) {
    $site_name = get_bloginfo('name');
    $site_url_parts = parse_url(home_url());
    // FIX: Removed str_replace to ensure 'www.' is preserved in the website URL.
    $site_host = $site_url_parts['host'] ?? 'default-site.com';
    $custom_logo_url = get_option('mco_custom_logo_url', '');
    $logo_url = !empty($custom_logo_url) ? $custom_logo_url : (get_site_icon_url(512) ?: '');

    $available_themes = [
        [ 'id' => 'default', 'name' => 'Cyberpunk' ],
        [ 'id' => 'professional', 'name' => 'Professional' ],
        [ 'id' => 'serene', 'name' => 'Serene' ],
        [ 'id' => 'academic', 'name' => 'Academic' ],
        [ 'id' => 'noir', 'name' => 'Noir' ],
    ];

    $configured_templates = get_option('mco_certificate_templates');
    if (empty($configured_templates) || !is_array($configured_templates)) {
        $configured_templates = mco_get_default_certificate_templates();
    }


    // If it's just a blueprint, we return empty arrays for content.
    if ($is_blueprint) {
        $dynamic_data = [
            'exams' => [],
            'examProductCategories' => [],
            'suggestedBooks' => [],
            'examPrices' => new stdClass()
        ];
    } else {
        // Otherwise, we fetch all live data.
        $dynamic_data = mco_get_live_content_data();
    }

    $snapshot_object = [
        "version" => get_option('mco_config_version', current_time('YmdHis')),
        "organizations" => [
            [
                "id" => "org-" . sanitize_title($site_name),
                "name" => $site_name,
                "website" => $site_host,
                "logo" => $logo_url,
                "introVideoUrl" => get_option('mco_intro_video_url', ''),
                "availableThemes" => $available_themes,
                "activeThemeId" => get_option('mco_active_theme_id', 'default'),
                "certificateThemeId" => get_option('mco_certificate_theme_id', 'classic'),
                "exams" => $dynamic_data['exams'],
                "examProductCategories" => $dynamic_data['examProductCategories'],
                "certificateTemplates" => array_values($configured_templates),
                "suggestedBooks" => $dynamic_data['suggestedBooks']
            ]
        ],
        "examPrices" => $dynamic_data['examPrices'] ?? new stdClass()
    ];
    
    return $snapshot_object;
}

// Gathers all live content from CPTs and WooCommerce.
function mco_get_live_content_data() {
    $all_exams = [];
    $all_prices = [];
    $all_suggested_books = [];
    $exam_product_categories = [];

    // Step 1: Process Exam Programs
    $exam_program_posts = get_posts([
        'post_type' => 'mco_exam_program',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    ]);

    foreach ($exam_program_posts as $post) {
        $program_id_for_app = 'prod-' . $post->ID;
        $practice_exam_id_for_app = 'exam-' . $program_id_for_app . '-practice';
        $clean_title = wp_strip_all_tags(get_the_title($post));

        $practice_name_override = get_post_meta($post->ID, '_mco_practice_exam_title_override', true);
        $cert_name_override = get_post_meta($post->ID, '_mco_cert_exam_title_override', true);

        $practice_exam_name = !empty($practice_name_override) ? $practice_name_override : $clean_title . ' Practice';
        $cert_exam_name = !empty($cert_name_override) ? $cert_name_override : $clean_title;

        $practice_exam_obj = mco_build_exam_object($post, true, $practice_exam_id_for_app, $practice_exam_name);
        $cert_exam_obj = mco_build_exam_object($post, false, null, $cert_exam_name);

        if ($practice_exam_obj) $all_exams[] = $practice_exam_obj;
        if ($cert_exam_obj) $all_exams[] = $cert_exam_obj;
        
        $exam_product_categories[] = [
            'id' => $program_id_for_app,
            'name' => $clean_title,
            'description' => apply_filters('the_content', $post->post_content),
            'practiceExamId' => $practice_exam_id_for_app,
            'certificationExamId' => $cert_exam_obj ? $cert_exam_obj['id'] : null,
        ];
    }
    
    // Step 2: Get ALL products from WooCommerce
    if (class_exists('WooCommerce')) {
        $all_wc_products = wc_get_products(['limit' => -1]);
        foreach ($all_wc_products as $product) {
            $sku = $product->get_sku();
            if ($sku) {
                $product_data = [
                    'price' => (float)$product->get_price(), 
                    'regularPrice' => (float)$product->get_regular_price(),
                    'productId' => $product->get_id(),
                    'name' => $product->get_name(),
                    'type' => $product->get_type(),
                    'isBundle' => $product->get_meta('_mco_is_bundle') === 'yes',
                    'bundledSkus' => $product->get_meta('_mco_bundled_skus', true) ?: [],
                    'avgRating' => (float)$product->get_average_rating(),
                    'reviewCount' => (int)$product->get_review_count()
                ];

                if (class_exists('WC_Product_Subscription') && $product->is_type('subscription')) {
                    $product_data['subscription_period'] = $product->get_subscription_period();
                    $product_data['subscription_period_interval'] = $product->get_subscription_period_interval();
                    $product_data['subscription_length'] = $product->get_subscription_length();
                }
                $all_prices[$sku] = $product_data;
            }
        }
    }

    // Step 3: Get all suggested books
    $book_posts = get_posts([
        'post_type' => 'mco_recommended_book',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    ]);

    foreach($book_posts as $book) {
        $book_id_meta = get_post_meta($book->ID, '_mco_book_id', true);
        $book_id_to_use = !empty($book_id_meta) ? $book_id_meta : sanitize_title(get_the_title($book));
        
        $all_suggested_books[] = [
            'id' => $book_id_to_use,
            'title' => get_the_title($book),
            'description' => has_excerpt($book->ID) ? get_the_excerpt($book->ID) : wp_trim_words($book->post_content, 30),
            'thumbnailUrl' => get_post_meta($book->ID, '_mco_thumbnail_url', true),
            'affiliateLinks' => [
                'com' => get_post_meta($book->ID, '_mco_link_com', true),
                'in' => get_post_meta($book->ID, '_mco_link_in', true),
                'ae' => get_post_meta($book->ID, '_mco_link_ae', true),
            ]
        ];
    }

    return [
        'exams' => $all_exams,
        'examProductCategories' => $exam_product_categories,
        'suggestedBooks' => $all_suggested_books,
        'examPrices' => $all_prices,
    ];
}

if (!function_exists('mco_get_single_term')) {
    function mco_get_single_term($post_id, $taxonomy, $field = 'name') {
        $terms = get_the_terms($post_id, $taxonomy);
        if (!empty($terms) && !is_wp_error($terms)) {
            return $terms[0]->$field;
        }
        return '';
    }
}

if (!function_exists('mco_build_exam_object')) {
    function mco_build_exam_object($post, $is_practice, $exam_id, $title_override) {
        $question_source = get_post_meta($post->ID, '_mco_question_source_url', true);
        if (empty($question_source)) return null;

        $pass_score = mco_get_single_term($post->ID, 'exam_pass_score', 'name');
        $exam_sections_json = get_post_meta($post->ID, '_mco_exam_sections', true);
        $exam_sections = !empty($exam_sections_json) ? json_decode($exam_sections_json, true) : null;
        $book_post_ids = get_post_meta($post->ID, '_mco_recommended_book_ids', true) ?: [];
        $recommended_book_ids = [];
        if (is_array($book_post_ids)) {
            foreach ($book_post_ids as $book_post_id) {
                $custom_id = get_post_meta($book_post_id, '_mco_book_id', true);
                if ($custom_id) {
                    $recommended_book_ids[] = $custom_id;
                }
            }
        }
        
        $exam_data = [
            'name' => $title_override,
            'description' => apply_filters('the_content', $post->post_content),
            'passScore' => (int)$pass_score,
            'questionSourceUrl' => $question_source,
            'isPractice' => $is_practice,
            'recommendedBookIds' => $recommended_book_ids,
            'sections' => $exam_sections,
            'price' => 0,
            'regularPrice' => 0,
            'productSku' => '',
            'productSlug' => '',
        ];

        if ($is_practice) {
            $exam_data['id'] = $exam_id;
            $exam_data['numberOfQuestions'] = (int)mco_get_single_term($post->ID, 'exam_practice_questions', 'name');
            $exam_data['durationMinutes'] = (int)mco_get_single_term($post->ID, 'exam_practice_duration', 'name');
            $cert_enabled_meta = get_post_meta($post->ID, '_mco_practice_certificate_enabled', true);
            $exam_data['certificateEnabled'] = ($cert_enabled_meta === '') ? false : (bool)$cert_enabled_meta;
            $exam_data['certificateTemplateId'] = 'cert-practice';
            $exam_data['isProctored'] = false;
        } else {
            $cert_sku = get_post_meta($post->ID, '_mco_certification_exam_sku', true);
            if (empty($cert_sku)) return null;

            $exam_data['id'] = $cert_sku;
            $exam_data['productSku'] = $cert_sku;
            $exam_data['numberOfQuestions'] = (int)mco_get_single_term($post->ID, 'exam_cert_questions', 'name');
            $exam_data['durationMinutes'] = (int)mco_get_single_term($post->ID, 'exam_cert_duration', 'name');
            $exam_data['isProctored'] = (bool)get_post_meta($post->ID, '_mco_is_proctored', true);
            $cert_enabled_meta = get_post_meta($post->ID, '_mco_certificate_enabled', true);
            $exam_data['certificateEnabled'] = ($cert_enabled_meta === '') ? true : (bool)$cert_enabled_meta;
            $exam_data['certificateTemplateId'] = 'cert-completion';

            if ($cert_sku && class_exists('WooCommerce') && function_exists('wc_get_product_id_by_sku')) {
                $product_id = wc_get_product_id_by_sku($cert_sku);
                if ($product_id) {
                    $product = wc_get_product($product_id);
                    if ($product) {
                        $exam_data['price'] = (float)$product->get_price();
                        $exam_data['regularPrice'] = (float)$product->get_regular_price();
                        $exam_data['productSlug'] = $product->get_slug();
                    }
                }
            }
        }
        return $exam_data;
    }
}
?>