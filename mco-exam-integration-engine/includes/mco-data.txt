<?php
if (!defined('ABSPATH')) exit;

// Moved from mco-admin.php to be accessible by other files if needed.
if (!function_exists('mco_get_default_certificate_templates')) {
    function mco_get_default_certificate_templates() { 
        return [
            'cert-practice' => [
                'id' => 'cert-practice', 'name' => 'Default Practice Certificate', 'title' => 'Certificate of Proficiency', 
                'body' => "For successfully completing the {examName} with a final score of <strong>{finalScore}%</strong>.", 
                'signature1Name' => 'Manoj Balakrishnan', 'signature1Title' => 'CEO, Annapoorna Infotech', 'signature1ImageUrl' => '', 
                'signature2Name' => '', 'signature2Title' => ''
            ], 
            'cert-completion' => [
                'id' => 'cert-completion', 'name' => 'Default Completion Certificate', 'title' => 'Certificate of Achievement', 
                'body' => "This is to certify that <strong>{candidateName}</strong> has successfully completed the rigorous requirements of the <strong>{examName}</strong> and is hereby awarded this certificate upon achieving a passing score of <strong>{finalScore}%</strong>.", 
                'signature1Name' => 'Manoj Balakrishnan', 'signature1Title' => 'CEO, Annapoorna Infotech', 'signature1ImageUrl' => '', 
                'signature2Name' => 'Lead Instructor', 'signature2Title' => 'Education Department'
            ]
        ]; 
    }
}

// NEW: Function to generate a clean, ready-to-use blueprint for a new tenant.
function mco_get_tenant_blueprint_data() {
    $site_name = get_bloginfo('name');
    $site_url_parts = parse_url(home_url());
    $site_host = $site_url_parts['host'] ?? 'default-site.com';
    $custom_logo_url = get_option('mco_logo_url', '');
    $logo_url = !empty($custom_logo_url) ? $custom_logo_url : (get_site_icon_url(512) ?: '');

    $available_themes = [
        [ 'id' => 'default', 'name' => 'Cyberpunk' ],
        [ 'id' => 'professional', 'name' => 'Professional' ],
        [ 'id' => 'serene', 'name' => 'Serene' ],
        [ 'id' => 'academic', 'name' => 'Academic' ],
        [ 'id' => 'noir', 'name' => 'Noir' ],
    ];

    // Use the actual configured templates, falling back to default if none are saved.
    $configured_templates = get_option('mco_certificate_templates', mco_get_default_certificate_templates());

    $blueprint_object = [
        "version" => current_time('YmdHis'),
        "organizations" => [
            [
                "id" => "org-" . sanitize_title($site_name),
                "name" => $site_name,
                "website" => str_replace('www.', '', $site_host),
                "logo" => $logo_url,
                "availableThemes" => $available_themes,
                "activeThemeId" => "default",
                "exams" => [], // Empty for a new tenant
                "examProductCategories" => [], // Empty for a new tenant
                "certificateTemplates" => array_values($configured_templates), // Use configured templates
                "suggestedBooks" => [] // Empty for a new tenant
            ]
        ],
        "examPrices" => new stdClass() // Empty object for a new tenant
    ];
    
    return $blueprint_object;
}


// This function is the single source of truth for all dynamic data passed to the React app.
// It uses a transient for caching to improve performance on high-traffic sites.
function mco_get_app_config_data() {
    $cached_data = get_transient('mco_app_config_data');
    if ($cached_data !== false) {
        return $cached_data;
    }

    $all_exams = [];
    $all_prices = [];
    $all_suggested_books = [];
    $exam_product_categories = [];

    // --- Step 1: Process Exam Programs to build the app's core exam structure ---
    $exam_program_posts = get_posts([
        'post_type' => 'mco_exam_program',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    ]);

    foreach ($exam_program_posts as $post) {
        $practice_questions = mco_get_single_term($post->ID, 'exam_practice_questions', 'name');
        $practice_duration = mco_get_single_term($post->ID, 'exam_practice_duration', 'name');
        $cert_questions = mco_get_single_term($post->ID, 'exam_cert_questions', 'name');
        $cert_duration = mco_get_single_term($post->ID, 'exam_cert_duration', 'name');
        $pass_score = mco_get_single_term($post->ID, 'exam_pass_score', 'name');
        
        $cert_sku = get_post_meta($post->ID, '_mco_certification_exam_sku', true);
        $question_source = get_post_meta($post->ID, '_mco_question_source_url', true);
        $is_proctored = (bool) get_post_meta($post->ID, '_mco_is_proctored', true);
        
        $certificate_enabled_meta = get_post_meta($post->ID, '_mco_certificate_enabled', true);
        $certificate_enabled = ($certificate_enabled_meta === '') ? true : (bool) $certificate_enabled_meta;

        $practice_name_override = get_post_meta($post->ID, '_mco_practice_exam_title_override', true);
        $cert_name_override = get_post_meta($post->ID, '_mco_cert_exam_title_override', true);
        
        $exam_sections_json = get_post_meta($post->ID, '_mco_exam_sections', true);
        $exam_sections = !empty($exam_sections_json) ? json_decode($exam_sections_json, true) : null;

        $book_post_ids = get_post_meta($post->ID, '_mco_recommended_book_ids', true) ?: [];
        $recommended_book_ids = [];
        if (is_array($book_post_ids)) {
            foreach ($book_post_ids as $book_post_id) {
                $custom_id = get_post_meta($book_post_id, '_mco_book_id', true);
                if ($custom_id) {
                    $recommended_book_ids[] = $custom_id;
                }
            }
        }

        $program_id_for_app = 'prod-' . $post->ID;
        $practice_exam_id_for_app = 'exam-' . $program_id_for_app . '-practice';
        
        $image_url = '';
        if ($cert_sku) {
            $product_id = wc_get_product_id_by_sku($cert_sku);
            if ($product_id) {
                $image_url = get_the_post_thumbnail_url($product_id, 'medium_large') ?: '';
            }
        }

        // FIX: Strip HTML from title to prevent injection from other plugins.
        $clean_title = wp_strip_all_tags(get_the_title($post));
        
        $exam_product_categories[] = [
            'id' => $program_id_for_app,
            'name' => $clean_title,
            'description' => apply_filters('the_content', $post->post_content),
            'practiceExamId' => $practice_exam_id_for_app,
            'certificationExamId' => $cert_sku,
            'questionSourceUrl' => $question_source,
        ];
        
        $practice_exam_name = !empty($practice_name_override) ? $practice_name_override : $clean_title . ' Practice';
        $cert_exam_name = !empty($cert_name_override) ? $cert_name_override : $clean_title;

        // Practice Exam
        $all_exams[] = [
            'id' => $practice_exam_id_for_app,
            'name' => $practice_exam_name,
            'description' => 'A practice test to assess your knowledge for the ' . $clean_title . '.',
            'price' => 0,
            'productSku' => 'practice-' . $cert_sku,
            'numberOfQuestions' => (int)$practice_questions,
            'passScore' => (int)$pass_score,
            'certificateTemplateId' => 'cert-practice',
            'isPractice' => true,
            'certificateEnabled' => false,
            'isProctored' => false,
            'durationMinutes' => (int)$practice_duration,
            'questionSourceUrl' => $question_source,
            'recommendedBookIds' => $recommended_book_ids,
            'imageUrl' => $image_url,
            'sections' => $exam_sections,
        ];
        
        // Certification Exam
        if ($cert_sku) {
            $product_id = wc_get_product_id_by_sku($cert_sku);
            $product = $product_id ? wc_get_product($product_id) : null;
            if ($product) {
                 $all_exams[] = [
                    'id' => $cert_sku,
                    'name' => $cert_exam_name,
                    'description' => apply_filters('the_content', $post->post_content),
                    'price' => (float)$product->get_price(),
                    'regularPrice' => (float)$product->get_regular_price(),
                    'productSku' => $cert_sku,
                    'productSlug' => $product->get_slug(),
                    'numberOfQuestions' => (int)$cert_questions,
                    'passScore' => (int)$pass_score,
                    'certificateTemplateId' => 'cert-completion',
                    'isPractice' => false,
                    'certificateEnabled' => $certificate_enabled,
                    'isProctored' => $is_proctored,
                    'durationMinutes' => (int)$cert_duration,
                    'questionSourceUrl' => $question_source,
                    'recommendedBookIds' => $recommended_book_ids,
                    'imageUrl' => $image_url,
                    'sections' => $exam_sections,
                ];
            }
        }
    }

    // --- Step 2: Get ALL products from WooCommerce and build the price list ---
    $all_wc_products = wc_get_products(['limit' => -1]);
    
    foreach ($all_wc_products as $product) {
        $sku = $product->get_sku();
        // Only include products with a SKU, as it's the primary identifier in the app
        if ($sku) {
            $all_prices[$sku] = [
                'price' => (float)$product->get_price(), 
                'regularPrice' => (float)$product->get_regular_price(),
                'productId' => $product->get_id(),
                'name' => $product->get_name(),
                'type' => $product->get_type(),
                'isBundle' => $product->get_meta('_mco_is_bundle') === 'yes',
                'bundledSkus' => $product->get_meta('_mco_bundled_skus', true) ?: [],
                'avgRating' => (float)$product->get_average_rating(),
                'reviewCount' => (int)$product->get_review_count()
            ];
        }
    }

    // --- Step 3: Get all suggested books ---
    $book_posts = get_posts([
        'post_type' => 'mco_recommended_book',
        'posts_per_page' => -1,
        'post_status' => 'publish'
    ]);

    foreach($book_posts as $book) {
        $all_suggested_books[] = [
            'id' => get_post_meta($book->ID, '_mco_book_id', true),
            'title' => get_the_title($book),
            'description' => has_excerpt($book->ID) ? get_the_excerpt($book->ID) : wp_trim_words($book->post_content, 30),
            'thumbnailUrl' => get_post_meta($book->ID, '_mco_thumbnail_url', true),
            'affiliateLinks' => [
                'com' => get_post_meta($book->ID, '_mco_link_com', true),
                'in' => get_post_meta($book->ID, '_mco_link_in', true),
                'ae' => get_post_meta($book->ID, '_mco_link_ae', true),
            ]
        ];
    }

    $data = [
        'exams' => $all_exams,
        'examProductCategories' => $exam_product_categories,
        'suggestedBooks' => $all_suggested_books,
        'examPrices' => $all_prices,
    ];

    set_transient('mco_app_config_data', $data, HOUR_IN_SECONDS);
    return $data;
}

if (!function_exists('mco_get_single_term')) {
    function mco_get_single_term($post_id, $taxonomy, $field = 'name') {
        $terms = get_the_terms($post_id, $taxonomy);
        if (!empty($terms) && !is_wp_error($terms)) {
            return $terms[0]->$field;
        }
        return '';
    }
}
