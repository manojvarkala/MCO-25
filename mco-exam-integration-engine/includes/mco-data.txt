<?php
if (!defined('ABSPATH')) exit;

// --- DYNAMIC DATA HELPERS ---
if (!function_exists('mco_get_exam_app_url')) {
    function mco_get_exam_app_url() {
        $url = get_option('mco_exam_app_url', '');
        if (empty($url)) {
            return '';
        }
        $url_parts = parse_url($url);
        $scheme   = isset($url_parts['scheme']) ? $url_parts['scheme'] . '://' : '';
        $host     = isset($url_parts['host']) ? $url_parts['host'] : '';
        $port     = isset($url_parts['port']) ? ':' . $url_parts['port'] : '';
        $path     = isset($url_parts['path']) ? rtrim($url_parts['path'], '/') : '';
        return $scheme . $host . $port . $path;
    }
}

if (!function_exists('mco_get_app_config_data')) {
    function mco_get_app_config_data() {
        $books_query = new WP_Query(['post_type' => 'mco_recommended_book', 'posts_per_page' => -1, 'post_status' => 'publish']);
        $suggested_books = [];
        if ($books_query->have_posts()) {
            while ($books_query->have_posts()) {
                $books_query->the_post();
                $post_id = get_the_ID();
                $suggested_books[] = [
                    'id' => 'book-' . $post_id, 
                    'title' => html_entity_decode(get_the_title()), 
                    'description' => html_entity_decode(strip_tags(get_the_content())),
                    'thumbnailUrl' => get_the_post_thumbnail_url($post_id, 'medium'),
                    'affiliateLinks' => [ 
                        'com' => get_post_meta($post_id, '_mco_link_com', true) ?: '', 
                        'in' => get_post_meta($post_id, '_mco_link_in', true) ?: '', 
                        'ae' => get_post_meta($post_id, '_mco_link_ae', true) ?: '' 
                    ]
                ];
            }
        }
        wp_reset_postdata();

        $dynamic_exams = [];
        $dynamic_categories = [];
        $exam_prices = [];

        $programs_query = new WP_Query(['post_type' => 'mco_exam_program', 'posts_per_page' => -1, 'post_status' => 'publish']);
        if ($programs_query->have_posts()) {
            while ($programs_query->have_posts()) {
                $programs_query->the_post();
                $prog_id = get_the_ID();
                $practice_id = get_post_field('post_name', $prog_id) . '-practice';
                $cert_sku = get_post_meta($prog_id, '_mco_certification_exam_sku', true);
                if (empty($practice_id) || empty($cert_sku)) continue;
                
                $product_id = wc_get_product_id_by_sku($cert_sku);
                if (!$product_id) continue;
                $product = wc_get_product($product_id);
                if (!$product) continue;

                $pass_score_terms = wp_get_post_terms($prog_id, 'exam_pass_score', ['fields' => 'names']); $pass_score = !empty($pass_score_terms) ? (int)$pass_score_terms[0] : 70;
                $practice_q_terms = wp_get_post_terms($prog_id, 'exam_practice_questions', ['fields' => 'names']);
                $practice_d_terms = wp_get_post_terms($prog_id, 'exam_practice_duration', ['fields' => 'names']);
                $cert_q_terms = wp_get_post_terms($prog_id, 'exam_cert_questions', ['fields' => 'names']);
                $cert_d_terms = wp_get_post_terms($prog_id, 'exam_cert_duration', ['fields' => 'names']);
                $question_source = get_post_meta($prog_id, '_mco_question_source_url', true);
                $description = html_entity_decode(strip_tags(get_the_content()));

                $dynamic_exams[] = [ 'id' => $practice_id, 'name' => html_entity_decode(get_the_title()) . ' Practice', 'description' => $description, 'price' => 0, 'productSku' => $practice_id, 'numberOfQuestions' => !empty($practice_q_terms) ? (int)$practice_q_terms[0] : 25, 'passScore' => $pass_score, 'certificateTemplateId' => 'cert-practice-1', 'isPractice' => true, 'durationMinutes' => !empty($practice_d_terms) ? (int)$practice_d_terms[0] : 60, 'questionSourceUrl' => $question_source ];
                $dynamic_exams[] = [ 'id' => $cert_sku, 'name' => html_entity_decode(get_the_title()), 'description' => $description, 'price' => (float)$product->get_price(), 'regularPrice' => (float)$product->get_regular_price(), 'productSku' => $cert_sku, 'productSlug' => $product->get_slug(), 'numberOfQuestions' => !empty($cert_q_terms) ? (int)$cert_q_terms[0] : 100, 'passScore' => $pass_score, 'certificateTemplateId' => 'cert-generic', 'isPractice' => false, 'durationMinutes' => !empty($cert_d_terms) ? (int)$cert_d_terms[0] : 240, 'questionSourceUrl' => $question_source ];
                $dynamic_categories[] = [ 'id' => 'prod-' . $prog_id, 'name' => html_entity_decode(get_the_title()), 'description' => $description, 'practiceExamId' => $practice_id, 'certificationExamId' => $cert_sku, 'questionSourceUrl' => $question_source ];
                
                $exam_prices[$cert_sku] = [
                    'price' => (float)$product->get_price(),
                    'regularPrice' => (float)$product->get_regular_price(),
                    'productId' => $product_id,
                    'avgRating' => (float)$product->get_average_rating(),
                    'reviewCount' => (int)$product->get_review_count()
                ];
            }
        }
        wp_reset_postdata();

        $sub_query_args = [
            'post_type' => 'product',
            'posts_per_page' => -1,
            'meta_query' => [
                ['key' => '_mco_product_type', 'value' => 'subscription_bundle', 'compare' => '=']
            ]
        ];
        $sub_products_query = new WP_Query($sub_query_args);
        if ($sub_products_query->have_posts()) {
            while ($sub_products_query->have_posts()) {
                $sub_products_query->the_post();
                $product = wc_get_product(get_the_ID());
                if ($product && $product->get_sku()) {
                    $sku = $product->get_sku();
                    $exam_prices[$sku] = [
                        'price' => (float) $product->get_price(),
                        'regularPrice' => (float) $product->get_regular_price(),
                        'productId' => $product->get_id(),
                        'avgRating' => (float) $product->get_average_rating(),
                        'reviewCount' => (int) $product->get_review_count()
                    ];
                }
            }
        }
        wp_reset_postdata();

        return ['exams' => $dynamic_exams, 'examProductCategories' => $dynamic_categories, 'suggestedBooks' => $suggested_books, 'examPrices' => $exam_prices];
    }
}


// --- JWT FUNCTIONS ---
if (!function_exists('mco_base64url_encode')) {
    function mco_base64url_encode($data) { return rtrim(strtr(base64_encode($data), '+/', '-_'), '='); }
}

if (!function_exists('mco_generate_exam_jwt')) {
    function mco_generate_exam_jwt($user_id) {
        if (!defined('MCO_JWT_SECRET')) return false;
        $user = get_userdata($user_id);
        if (!$user) return false;

        $header = ['alg' => 'HS256', 'typ' => 'JWT'];

        $paid_exam_skus = []; 
        $is_subscribed = false;
        $customer_orders = wc_get_orders(['customer_id' => $user_id, 'status' => ['wc-completed', 'wc-processing']]);
        foreach ($customer_orders as $order) {
            foreach ($order->get_items() as $item) {
                $product = $item->get_product();
                if ($product) {
                    $product_type = $product->get_meta('_mco_product_type');
                    if ($product_type === 'certification_exam') {
                        $paid_exam_skus[] = $product->get_sku();
                    }
                    if ($product_type === 'subscription_bundle') {
                        $is_subscribed = true;
                    }
                }
            }
        }
        if (class_exists('WC_Subscriptions') && wcs_user_has_subscription($user_id, '', 'active')) {
            $is_subscribed = true;
        }
        
        $spins_available = (int) get_user_meta($user_id, 'mco_spins_available', true) ?: 0;
        $won_prize = get_user_meta($user_id, 'mco_won_prize', true);

        // Lightweight payload: Only contains user-specific data.
        $payload = [
            'user' => ['id' => strval($user->ID), 'name' => $user->display_name, 'email' => $user->user_email, 'isAdmin' => in_array('administrator', $user->roles)],
            'paidExamIds' => array_unique($paid_exam_skus),
            'isSubscribed' => $is_subscribed,
            'isSpinWheelEnabled' => (bool)get_option('mco_spin_wheel_enabled', 0),
            'spinsAvailable' => $spins_available,
            'wonPrize' => empty($won_prize) ? null : $won_prize,
            'iat' => time(), 
            'exp' => time() + (24 * HOUR_IN_SECONDS)
        ];

        $header_encoded = mco_base64url_encode(json_encode($header));
        $payload_encoded = mco_base64url_encode(json_encode($payload));
        $signature = hash_hmac('sha256', "$header_encoded.$payload_encoded", MCO_JWT_SECRET, true);
        $signature_encoded = mco_base64url_encode($signature);
        return "$header_encoded.$payload_encoded.$signature_encoded";
    }
}

if (!function_exists('mco_verify_exam_jwt')) {
    function mco_verify_exam_jwt($token) {
        if (!defined('MCO_JWT_SECRET')) return false;
        $parts = explode('.', $token);
        if (count($parts) !== 3) return false;
        list($header_encoded, $payload_encoded, $signature_encoded) = $parts;
        $signature = base64_decode(strtr($signature_encoded, '-_', '+/'));
        $expected_signature = hash_hmac('sha256', "$header_encoded.$payload_encoded", MCO_JWT_SECRET, true);
        if (!hash_equals($expected_signature, $signature)) return false;
        $payload = json_decode(base64_decode(strtr($payload_encoded, '-_', '+/')), true);
        if (json_last_error() !== JSON_ERROR_NONE || (isset($payload['exp']) && $payload['exp'] < time())) return false;
        return $payload;
    }
}

if (!function_exists('mco_get_random_recommended_books')) {
    function mco_get_random_recommended_books($count = 3) {
        $transient_key = 'mco_all_books_cache';
        $all_books = get_transient($transient_key);

        if (false === $all_books) {
            $query = new WP_Query(['post_type' => 'mco_recommended_book', 'posts_per_page' => -1, 'post_status' => 'publish']);
            $all_books = [];
            if ($query->have_posts()) {
                while ($query->have_posts()) {
                    $query->the_post();
                    $all_books[] = get_post();
                }
            }
            wp_reset_postdata();
            set_transient($transient_key, $all_books, 1 * HOUR_IN_SECONDS);
        }
        
        if (empty($all_books)) {
            return [];
        }
        
        shuffle($all_books);
        return array_slice($all_books, 0, $count);
    }
}