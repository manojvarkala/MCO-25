<?php
if (!defined('ABSPATH')) exit;

// --- CRITICAL HELPER FUNCTION ---
// This function must be in a globally included file because it's used by both the admin panel
// and front-end components like shortcodes and API endpoints.
if (!function_exists('mco_get_exam_app_url')) {
    function mco_get_exam_app_url() {
        $urls = get_option('mco_exam_app_url', '');
        if (empty($urls)) return '';
        // Return the first URL in the list as the primary URL
        $url_list = array_map('trim', explode("\n", $urls));
        return !empty($url_list) ? esc_url($url_list[0]) : '';
    }
}


// --- DEFAULT DATA & FALLBACKS ---

if (!function_exists('mco_get_default_certificate_templates')) {
    function mco_get_default_certificate_templates() { 
        return array(
            'cert-practice' => array(
                'id' => 'cert-practice', 
                'name' => 'Default Practice Certificate', 
                'title' => 'Certificate of Proficiency', 
                'body' => "This certifies that <strong>{candidateName}</strong> has successfully demonstrated proficiency in the <strong>{examName}</strong> practice exam, achieving a score of <strong>{finalScore}%</strong>.", 
                'signature1Name' => 'Amelia Reed', 
                'signature1Title' => 'Program Director', 
                'signature1ImageUrl' => '',
                'signature2Name' => 'Quinn Casey, CPC', 
                'signature2Title' => 'Lead Instructor', 
                'signature2ImageUrl' => ''
            ),
            'cert-completion' => array(
                'id' => 'cert-completion', 
                'name' => 'Default Completion Certificate', 
                'title' => 'Certificate of Achievement', 
                'body' => "This is to certify that <strong>{candidateName}</strong> has successfully completed the rigorous requirements of the <strong>{examName}</strong> and is hereby awarded this certificate upon achieving a passing score of <strong>{finalScore}%</strong>.", 
                'signature1Name' => 'Amelia Reed', 
                'signature1Title' => 'Program Director', 
                'signature1ImageUrl' => '',
                'signature2Name' => 'Quinn Casey, CPC', 
                'signature2Title' => 'Lead Instructor', 
                'signature2ImageUrl' => ''
            )
        );
    }
}


// --- MAIN DATA GATHERING FUNCTIONS ---

if (!function_exists('mco_get_app_config_data')) {
    function mco_get_app_config_data() {
        $cached_data = get_transient('mco_app_config_data');
        if ($cached_data !== false) {
            return $cached_data;
        }

        $config_data = mco_get_full_snapshot_data(false);
        set_transient('mco_app_config_data', $config_data, HOUR_IN_SECONDS);
        return $config_data;
    }
}

if (!function_exists('mco_get_full_snapshot_data')) {
    function mco_get_full_snapshot_data($is_blueprint = false) {
        $organizations_data = array();
        $is_wc_active = class_exists('WooCommerce');
        
        // FIX: The host for the 'website' field should be derived from the WordPress installation's URL (home_url),
        // not the Exam App URL from the settings. This was the root cause of incorrect login links.
        $site_url_parts = parse_url(home_url());
        $host = isset($site_url_parts['host']) ? $site_url_parts['host'] : str_replace(array('https://', 'http://'), '', home_url());
        
        $org_id = 'org-' . sanitize_title(get_bloginfo('name'));

        $available_themes = array(
            array('id' => 'default', 'name' => 'Cyberpunk'),
            array('id' => 'professional', 'name' => 'Professional'),
            array('id' => 'serene', 'name' => 'Serene'),
            array('id' => 'academic', 'name' => 'Academic'),
            array('id' => 'noir', 'name' => 'Noir'),
        );

        $exams = array();
        $exam_product_categories = array();
        if (!$is_blueprint) {
            $exam_program_posts = get_posts(array(
                'post_type' => 'mco_exam_program',
                'posts_per_page' => -1,
                'post_status' => 'publish'
            ));
            
            foreach ($exam_program_posts as $post) {
                $practice_exam_id = 'exam-' . $post->post_name . '-practice';
                $cert_exam_id = 'exam-' . $post->post_name . '-cert';
                
                $practice_name_override = get_post_meta($post->ID, '_mco_practice_exam_title_override', true);
                $cert_name_override = get_post_meta($post->ID, '_mco_cert_exam_title_override', true);
                
                $practice_exam = mco_build_exam_object($post, true, $practice_exam_id, $practice_name_override);
                $cert_exam = mco_build_exam_object($post, false, $cert_exam_id, $cert_name_override);

                if ($practice_exam) $exams[] = $practice_exam;
                if ($cert_exam) $exams[] = $cert_exam;

                $exam_product_categories[] = array(
                    'id' => 'prod-' . $post->ID,
                    'name' => get_the_title($post),
                    'description' => $post->post_content,
                    'practiceExamId' => $practice_exam ? $practice_exam_id : null,
                    'certificationExamId' => $cert_exam ? $cert_exam_id : null,
                    'questionSourceUrl' => get_post_meta($post->ID, '_mco_question_source_url', true)
                );
            }
        }
        
        $templates_option = get_option('mco_certificate_templates');
        if (empty($templates_option) || !is_array($templates_option)) {
            $templates_option = mco_get_default_certificate_templates();
        }
        
        // Fetch signatures from options and merge them into the templates
        $signature1_base64 = get_option('mco_signature1_base64', '');
        $signature2_base64 = get_option('mco_signature2_base64', '');

        foreach($templates_option as &$template) {
            if (isset($template['signature1ImageUrl'])) {
                $template['signature1ImageUrl'] = $signature1_base64;
            }
            if (isset($template['signature2ImageUrl'])) {
                $template['signature2ImageUrl'] = $signature2_base64;
            }
        }
        unset($template); // Unset the reference

        $certificate_templates = array_values($templates_option);
        
        $suggested_books = array();
        if (!$is_blueprint) {
            $book_posts = get_posts(array(
                'post_type' => 'mco_recommended_book',
                'posts_per_page' => -1,
                'post_status' => 'publish'
            ));
            foreach ($book_posts as $post) {
                $book_id_slug = get_post_meta($post->ID, '_mco_book_id', true);
                if (empty($book_id_slug)) continue;
                $suggested_books[] = array(
                    'id' => $book_id_slug,
                    'title' => get_the_title($post),
                    'description' => $post->post_content,
                    'thumbnailUrl' => get_post_meta($post->ID, '_mco_thumbnail_url', true),
                    'affiliateLinks' => array(
                        'com' => get_post_meta($post->ID, '_mco_link_com', true),
                        'in' => get_post_meta($post->ID, '_mco_link_in', true),
                        'ae' => get_post_meta($post->ID, '_mco_link_ae', true)
                    )
                );
            }
        }

        $exam_prices = array();
        if ($is_wc_active && function_exists('wc_get_products')) {
            $products = wc_get_products(array('limit' => -1, 'status' => 'publish'));
            foreach ($products as $product) {
                $sku = $product->get_sku();
                if (!empty($sku)) {
                    $price_data = array(
                        'price' => (float)$product->get_sale_price('edit'),
                        'regularPrice' => (float)$product->get_regular_price('edit'),
                        'productSlug' => $product->get_slug(),
                        'productId' => $product->get_id(),
                        'name' => $product->get_name(),
                        'type' => $product->get_type(),
                        'isBundle' => false,
                        'bundledSkus' => array()
                    );
                    
                    if (($product->is_type('subscription') || $product->is_type('variable-subscription')) && class_exists('WC_Subscriptions_Product') && function_exists('wcs_get_subscription_period_interval_strings')) {
                        $price_data['subscription_period'] = WC_Subscriptions_Product::get_period($product);
                        $price_data['subscription_period_interval'] = WC_Subscriptions_Product::get_interval($product);
                        $price_data['subscription_length'] = WC_Subscriptions_Product::get_length($product);
                    }
                    
                    $bundled_items_meta = $product->get_meta('_bundled_items', true);
                    if (is_array($bundled_items_meta) && !empty($bundled_items_meta)) {
                         $price_data['isBundle'] = true;
                         foreach ($bundled_items_meta as $item_data) {
                             $bundled_product_id = isset($item_data['product_id']) ? $item_data['product_id'] : null;
                             if ($bundled_product_id && function_exists('wc_get_product')) {
                                 $bundled_product = wc_get_product($bundled_product_id);
                                 if ($bundled_product && $bundled_product->get_sku()) {
                                     $price_data['bundledSkus'][] = $bundled_product->get_sku();
                                 }
                             }
                         }
                    }
                    $exam_prices[$sku] = $price_data;
                }
            }
        }

        $logo_url = get_option('mco_logo_url', '');
        if (empty($logo_url)) {
            $site_icon_id = get_option('site_icon');
            $logo_url = $site_icon_id ? wp_get_attachment_image_url($site_icon_id, 'full') : '';
        }

        $organizations_data[] = array(
            'id' => $org_id,
            'name' => get_bloginfo('name'),
            'website' => $host,
            'logo' => $logo_url,
            'introVideoUrl' => get_option('mco_intro_video_url', ''), // Add the new video URL
            'availableThemes' => $available_themes,
            'activeThemeId' => get_option('mco_active_theme', 'default'),
            'certificateThemeId' => get_option('mco_certificate_theme', 'classic'),
            'exams' => $exams,
            'examProductCategories' => $exam_product_categories,
            'certificateTemplates' => $certificate_templates,
            'suggestedBooks' => $suggested_books,
        );

        return array(
            'version' => get_option('mco_config_version', MCO_PLUGIN_VERSION),
            'organizations' => $organizations_data,
            'examPrices' => $exam_prices,
        );
    }
}


if (!function_exists('mco_get_exam_by_id')) {
    function mco_get_exam_by_id($exam_id) {
        if (empty($exam_id)) return null;

        $is_practice = strpos($exam_id, '-practice') !== false;
        $slug = str_replace(array('exam-', '-practice', '-cert'), '', $exam_id);

        if (empty($slug)) return null;

        $post = get_page_by_path($slug, OBJECT, 'mco_exam_program');
        if (!$post) return null;

        $name_override_key = $is_practice ? '_mco_practice_exam_title_override' : '_mco_cert_exam_title_override';
        $name_override = get_post_meta($post->ID, $name_override_key, true);

        return mco_build_exam_object($post, $is_practice, $exam_id, $name_override);
    }
}

if (!function_exists('mco_build_exam_object')) {
    function mco_build_exam_object($post, $is_practice, $exam_id, $title_override) {
        $tax_keys = $is_practice
            ? array('questions' => 'exam_practice_questions', 'duration' => 'exam_practice_duration')
            : array('questions' => 'exam_cert_questions', 'duration' => 'exam_cert_duration', 'pass_score' => 'exam_pass_score');

        $exam_data = array(
            'id' => $exam_id,
            'name' => !empty($title_override) ? $title_override : ($is_practice ? get_the_title($post) . ' Practice' : get_the_title($post)),
            'description' => $post->post_content,
            'isPractice' => $is_practice,
            'numberOfQuestions' => 0,
            'durationMinutes' => 0,
            'passScore' => 0,
            'productSku' => '',
            'price' => 0,
            'regularPrice' => 0,
            'productSlug' => '',
            'certificateEnabled' => false,
            'certificateTemplateId' => '',
            'isProctored' => false,
            'recommendedBookIds' => array(),
            'sections' => array()
        );

        foreach ($tax_keys as $key => $tax_slug) {
            $terms = get_the_terms($post->ID, $tax_slug);
            if (!empty($terms) && !is_wp_error($terms)) {
                $exam_data[($key === 'questions' ? 'numberOfQuestions' : ($key === 'duration' ? 'durationMinutes' : $key))] = (int)$terms[0]->name;
            }
        }
        
        if (!$is_practice) {
            $exam_data['productSku'] = get_post_meta($post->ID, '_mco_certification_exam_sku', true);
            $exam_data['passScore'] = $exam_data['passScore'] ?: 70; // Default pass score
            $exam_data['certificateEnabled'] = get_post_meta($post->ID, '_mco_certificate_enabled', true) === '1';
            $exam_data['isProctored'] = get_post_meta($post->ID, '_mco_is_proctored', true) === '1';
            $exam_data['certificateTemplateId'] = 'cert-completion';
            
            $book_post_ids = get_post_meta($post->ID, '_mco_recommended_book_ids', true);
            if (is_array($book_post_ids)) {
                foreach($book_post_ids as $book_post_id) {
                    $book_slug = get_post_meta($book_post_id, '_mco_book_id', true);
                    if ($book_slug) $exam_data['recommendedBookIds'][] = $book_slug;
                }
            }

        } else {
             $exam_data['certificateEnabled'] = get_post_meta($post->ID, '_mco_practice_certificate_enabled', true) === '1';
             $exam_data['certificateTemplateId'] = 'cert-practice';
        }
        
        $sections_raw = get_post_meta($post->ID, '_mco_exam_sections', true);
        if (is_array($sections_raw)) {
            $exam_data['sections'] = $sections_raw;
        }

        return $exam_data;
    }
}
?>