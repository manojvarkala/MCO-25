<?php
if (!defined('ABSPATH')) exit;

// [Default data functions: mco_get_exam_app_url, mco_get_default_certificate_templates remain here]

// --- MAIN DATA GATHERING FUNCTIONS ---

if (!function_exists('mco_get_app_config_data')) {
    // ... function remains the same
}

if (!function_exists('mco_get_full_snapshot_data')) {
    function mco_get_full_snapshot_data($is_blueprint = false) {
        // ... (initial setup logic remains the same)

        $exam_prices = array();
        if (class_exists('WooCommerce') && function_exists('wc_get_products')) {
            $products = wc_get_products(array('limit' => -1, 'status' => 'publish'));
            foreach ($products as $product) {
                $sku = $product->get_sku();
                if (!empty($sku)) {
                    // --- ROBUST PRICING LOGIC ---
                    $regular_price_raw = $product->get_regular_price('edit');
                    $sale_price_raw = $product->get_sale_price('edit');
                    $active_price_raw = $product->get_price('edit');

                    $price_data = array(
                        'price' => (float)$active_price_raw,
                        'regularPrice' => !empty($regular_price_raw) ? (float)$regular_price_raw : (float)$active_price_raw,
                        'productSlug' => $product->get_slug(),
                        'productId' => $product->get_id(),
                        'name' => $product->get_name(),
                        'type' => $product->get_type(),
                        'isBundle' => (bool)$product->get_meta('_mco_is_bundle', true),
                        'bundledSkus' => (array)$product->get_meta('_mco_bundled_skus', true)
                    );
                    
                    if ($product->is_type('subscription') || $product->is_type('variable-subscription')) {
                       // ... (subscription-specific logic remains the same)
                    }
                    
                    $exam_prices[$sku] = $price_data;
                }
            }
        }

        // ... (rest of the function: logo, org data, etc. remains the same)

        return array(
            'version' => get_option('mco_config_version', MCO_PLUGIN_VERSION),
            'organizations' => $organizations_data,
            'examPrices' => $exam_prices,
        );
    }
}


if (!function_exists('mco_get_exam_by_id')) {
    // ... function remains the same
}

if (!function_exists('mco_build_exam_object')) {
    function mco_build_exam_object($post, $is_practice, $exam_id, $title_override) {
        // ... (initial setup logic remains the same)
        
        if (!$is_practice) {
            $exam_data['productSku'] = get_post_meta($post->ID, '_mco_certification_exam_sku', true);
            if ($exam_data['productSku'] && class_exists('WooCommerce') && function_exists('wc_get_product_id_by_sku')) {
                $product_id = wc_get_product_id_by_sku($exam_data['productSku']);
                if ($product_id) {
                    $product = wc_get_product($product_id);
                    if ($product) {
                        // --- ROBUST PRICING LOGIC (for individual exams) ---
                        $exam_data['price'] = (float)$product->get_price('edit');
                        $exam_data['regularPrice'] = !empty($product->get_regular_price('edit')) ? (float)$product->get_regular_price('edit') : (float)$product->get_price('edit');
                        $exam_data['productSlug'] = $product->get_slug();
                    }
                }
            }
            // ... (rest of the cert exam logic remains the same)
        } else {
             // ... (practice exam logic remains the same)
        }
        
        // ... (rest of the function: sections, etc. remains the same)

        return $exam_data;
    }
}
?>